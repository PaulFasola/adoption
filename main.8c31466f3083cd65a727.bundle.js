(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1079:function(module,exports,__webpack_require__){"use strict";__webpack_require__(10),__webpack_require__(4),__webpack_require__(54),__webpack_require__(1080),__webpack_require__(41),__webpack_require__(42),__webpack_require__(1081),__webpack_require__(31),__webpack_require__(36);var _clientApi=__webpack_require__(79),_clientLogger=__webpack_require__(47),_configFilename=__webpack_require__(1082);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1082:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"parameters",(function(){return parameters}));__webpack_require__(5);var _storybook_theming__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_storybook_react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(215),storybook_addon_react_docgen__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(492);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_2__.addDecorator)(storybook_addon_react_docgen__WEBPACK_IMPORTED_MODULE_3__.withPropsTable);var parameters={darkMode:{darkClass:"lights-out",lightClass:"lights-on",current:"light",stylePreview:!1,dark:Object.assign({},_storybook_theming__WEBPACK_IMPORTED_MODULE_1__.themes.dark,{appBg:"#121212",appContentBg:"#121212"}),light:Object.assign({},_storybook_theming__WEBPACK_IMPORTED_MODULE_1__.themes.normal)}}},1087:function(module,exports,__webpack_require__){var map={"./nestedObjectAssign":475,"./nestedObjectAssign.js":475};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1087},1097:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(215).configure)([__webpack_require__(1098)],module,!1)}).call(this,__webpack_require__(151)(module))},1098:function(module,exports,__webpack_require__){var map={"./components/PaymentRequest/index.stories.tsx":1099,"./components/TransactionStatus/index.stories.tsx":1109,"./providers/theme/themeProvider.stories.tsx":1111};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1098},1099:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Basic",(function(){return Basic})),__webpack_require__.d(__webpack_exports__,"Detailed",(function(){return Detailed})),__webpack_require__.d(__webpack_exports__,"AnimatedStatus",(function(){return AnimatedStatus})),__webpack_require__.d(__webpack_exports__,"Transacted",(function(){return Transacted})),__webpack_require__.d(__webpack_exports__,"Completed",(function(){return Completed})),__webpack_require__.d(__webpack_exports__,"WithActions",(function(){return WithActions})),__webpack_require__.d(__webpack_exports__,"CustomStrings",(function(){return CustomStrings})),__webpack_require__.d(__webpack_exports__,"Simulation",(function(){return Simulation}));__webpack_require__(17),__webpack_require__(4),__webpack_require__(12),__webpack_require__(11),__webpack_require__(19),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(9),__webpack_require__(6),__webpack_require__(26),__webpack_require__(21),__webpack_require__(1100),__webpack_require__(36);var _parameters,react__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(0),_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(75),_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(55),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var companyAsset=__webpack_require__(484);__webpack_exports__.default={parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'Components/PaymentRequest\',\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill(\\\\n  {\\\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    txUrl:\\\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    amount: 0.01,\\\\n  },\\\\n  0,\\\\n  20\\\\n);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\',\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\',\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  };\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true,\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\\\n\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":25},\\"startBody\\":{\\"col\\":21,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":25}},\\"Detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":27},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":24,\\"line\\":27},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"AnimatedStatus\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":30,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"Transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":112},\\"startBody\\":{\\"col\\":26,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":112}},\\"Completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":126},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":126},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"WithActions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":189},\\"startBody\\":{\\"col\\":27,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":189}},\\"CustomStrings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":191},\\"endLoc\\":{\\"col\\":1,\\"line\\":246},\\"startBody\\":{\\"col\\":29,\\"line\\":191},\\"endBody\\":{\\"col\\":1,\\"line\\":246}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":248},\\"endLoc\\":{\\"col\\":1,\\"line\\":305},\\"startBody\\":{\\"col\\":36,\\"line\\":248},\\"endBody\\":{\\"col\\":1,\\"line\\":305}}};\\nimport React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'Components/PaymentRequest\',\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill(\\\\n  {\\\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    txUrl:\\\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    amount: 0.01,\\\\n  },\\\\n  0,\\\\n  20\\\\n);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\',\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\',\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  };\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true,\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":25},\\"startBody\\":{\\"col\\":21,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":25}},\\"detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":27},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":24,\\"line\\":27},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"animated-status\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":30,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":112},\\"startBody\\":{\\"col\\":26,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":112}},\\"completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":126},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":126},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"with-actions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":189},\\"startBody\\":{\\"col\\":27,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":189}},\\"custom-strings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":191},\\"endLoc\\":{\\"col\\":1,\\"line\\":246},\\"startBody\\":{\\"col\\":29,\\"line\\":191},\\"endBody\\":{\\"col\\":1,\\"line\\":246}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":248},\\"endLoc\\":{\\"col\\":1,\\"line\\":305},\\"startBody\\":{\\"col\\":36,\\"line\\":248},\\"endBody\\":{\\"col\\":1,\\"line\\":305}}}},},\\n  title: \'Components/PaymentRequest\',\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9 }}\\n    />\\n  );\\n};;\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill(\\n  {\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    txUrl:\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    amount: 0.01,\\n  },\\n  0,\\n  20\\n);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\',\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\',\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  };\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n          company: companyAsset,\\n        }}\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true,\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\',\\n          },\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":20},"endLoc":{"col":1,"line":32},"startBody":{"col":21,"line":20},"endBody":{"col":1,"line":32}},"Detailed":{"startLoc":{"col":24,"line":34},"endLoc":{"col":1,"line":56},"startBody":{"col":24,"line":34},"endBody":{"col":1,"line":56}},"AnimatedStatus":{"startLoc":{"col":30,"line":58},"endLoc":{"col":1,"line":81},"startBody":{"col":30,"line":58},"endBody":{"col":1,"line":81}},"Transacted":{"startLoc":{"col":26,"line":83},"endLoc":{"col":1,"line":119},"startBody":{"col":26,"line":83},"endBody":{"col":1,"line":119}},"Completed":{"startLoc":{"col":25,"line":133},"endLoc":{"col":1,"line":156},"startBody":{"col":25,"line":133},"endBody":{"col":1,"line":156}},"WithActions":{"startLoc":{"col":27,"line":158},"endLoc":{"col":1,"line":196},"startBody":{"col":27,"line":158},"endBody":{"col":1,"line":196}},"CustomStrings":{"startLoc":{"col":29,"line":198},"endLoc":{"col":1,"line":253},"startBody":{"col":29,"line":198},"endBody":{"col":1,"line":253}},"Simulation":{"startLoc":{"col":36,"line":255},"endLoc":{"col":1,"line":312},"startBody":{"col":36,"line":255},"endBody":{"col":1,"line":312}}};\n\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {\\n  title: \'Components/PaymentRequest\',\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9 }}\\n    />\\n  );\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill(\\n  {\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    txUrl:\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    amount: 0.01,\\n  },\\n  0,\\n  20\\n);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\',\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\',\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  };\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n          company: companyAsset,\\n        }}\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true,\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\',\\n          },\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":13},"endLoc":{"col":1,"line":25},"startBody":{"col":21,"line":13},"endBody":{"col":1,"line":25}},"Detailed":{"startLoc":{"col":24,"line":27},"endLoc":{"col":1,"line":49},"startBody":{"col":24,"line":27},"endBody":{"col":1,"line":49}},"AnimatedStatus":{"startLoc":{"col":30,"line":51},"endLoc":{"col":1,"line":74},"startBody":{"col":30,"line":51},"endBody":{"col":1,"line":74}},"Transacted":{"startLoc":{"col":26,"line":76},"endLoc":{"col":1,"line":112},"startBody":{"col":26,"line":76},"endBody":{"col":1,"line":112}},"Completed":{"startLoc":{"col":25,"line":126},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":126},"endBody":{"col":1,"line":149}},"WithActions":{"startLoc":{"col":27,"line":151},"endLoc":{"col":1,"line":189},"startBody":{"col":27,"line":151},"endBody":{"col":1,"line":189}},"CustomStrings":{"startLoc":{"col":29,"line":191},"endLoc":{"col":1,"line":246},"startBody":{"col":29,"line":191},"endBody":{"col":1,"line":246}},"Simulation":{"startLoc":{"col":36,"line":248},"endLoc":{"col":1,"line":305},"startBody":{"col":36,"line":248},"endBody":{"col":1,"line":305}}};\nimport React, { Fragment, useState } from \'react\';\nimport { PaymentRequest } from \'../PaymentRequest\';\nimport { PaymentStatus } from \'./enums/paymentStatus\';\nimport { ITransaction } from \'./interfaces\';\n\n\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\n\nexport default {parameters: {"storySource":{"source":"\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'Components/PaymentRequest\',\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill(\\\\n  {\\\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    txUrl:\\\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    amount: 0.01,\\\\n  },\\\\n  0,\\\\n  20\\\\n);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\',\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\',\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  };\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true,\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\\\n\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":25},\\"startBody\\":{\\"col\\":21,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":25}},\\"Detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":27},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":24,\\"line\\":27},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"AnimatedStatus\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":30,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"Transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":112},\\"startBody\\":{\\"col\\":26,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":112}},\\"Completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":126},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":126},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"WithActions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":189},\\"startBody\\":{\\"col\\":27,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":189}},\\"CustomStrings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":191},\\"endLoc\\":{\\"col\\":1,\\"line\\":246},\\"startBody\\":{\\"col\\":29,\\"line\\":191},\\"endBody\\":{\\"col\\":1,\\"line\\":246}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":248},\\"endLoc\\":{\\"col\\":1,\\"line\\":305},\\"startBody\\":{\\"col\\":36,\\"line\\":248},\\"endBody\\":{\\"col\\":1,\\"line\\":305}}};\\nimport React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'Components/PaymentRequest\',\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill(\\\\n  {\\\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    txUrl:\\\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n    amount: 0.01,\\\\n  },\\\\n  0,\\\\n  20\\\\n);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n        company: companyAsset,\\\\n      }}\\\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1,\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl:\\\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1,\\\\n        },\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true,\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\',\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\',\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  };\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl:\\\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true,\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":25},\\"startBody\\":{\\"col\\":21,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":25}},\\"detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":27},\\"endLoc\\":{\\"col\\":1,\\"line\\":49},\\"startBody\\":{\\"col\\":24,\\"line\\":27},\\"endBody\\":{\\"col\\":1,\\"line\\":49}},\\"animated-status\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":51},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":30,\\"line\\":51},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":112},\\"startBody\\":{\\"col\\":26,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":112}},\\"completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":126},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":126},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"with-actions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":189},\\"startBody\\":{\\"col\\":27,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":189}},\\"custom-strings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":191},\\"endLoc\\":{\\"col\\":1,\\"line\\":246},\\"startBody\\":{\\"col\\":29,\\"line\\":191},\\"endBody\\":{\\"col\\":1,\\"line\\":246}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":248},\\"endLoc\\":{\\"col\\":1,\\"line\\":305},\\"startBody\\":{\\"col\\":36,\\"line\\":248},\\"endBody\\":{\\"col\\":1,\\"line\\":305}}}},},\\n  title: \'Components/PaymentRequest\',\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9 }}\\n    />\\n  );\\n};;\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill(\\n  {\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    txUrl:\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    amount: 0.01,\\n  },\\n  0,\\n  20\\n);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\',\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\',\\n      }}\\n    />\\n  );\\n};;\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  };\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n          company: companyAsset,\\n        }}\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true,\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\',\\n          },\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":20},"endLoc":{"col":1,"line":32},"startBody":{"col":21,"line":20},"endBody":{"col":1,"line":32}},"detailed":{"startLoc":{"col":24,"line":34},"endLoc":{"col":1,"line":56},"startBody":{"col":24,"line":34},"endBody":{"col":1,"line":56}},"animated-status":{"startLoc":{"col":30,"line":58},"endLoc":{"col":1,"line":81},"startBody":{"col":30,"line":58},"endBody":{"col":1,"line":81}},"transacted":{"startLoc":{"col":26,"line":83},"endLoc":{"col":1,"line":119},"startBody":{"col":26,"line":83},"endBody":{"col":1,"line":119}},"completed":{"startLoc":{"col":25,"line":133},"endLoc":{"col":1,"line":156},"startBody":{"col":25,"line":133},"endBody":{"col":1,"line":156}},"with-actions":{"startLoc":{"col":27,"line":158},"endLoc":{"col":1,"line":196},"startBody":{"col":27,"line":158},"endBody":{"col":1,"line":196}},"custom-strings":{"startLoc":{"col":29,"line":198},"endLoc":{"col":1,"line":253},"startBody":{"col":29,"line":198},"endBody":{"col":1,"line":253}},"simulation":{"startLoc":{"col":36,"line":255},"endLoc":{"col":1,"line":312},"startBody":{"col":36,"line":255},"endBody":{"col":1,"line":312}}}},"storySource":{"source":"import React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {\\n  title: \'Components/PaymentRequest\',\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9 }}\\n    />\\n  );\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill(\\n  {\\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    txUrl:\\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n    amount: 0.01,\\n  },\\n  0,\\n  20\\n);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n        company: companyAsset,\\n      }}\\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl:\\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\',\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\',\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  };\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\\n          company: companyAsset,\\n        }}\\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl:\\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true,\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\',\\n          },\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":13},"endLoc":{"col":1,"line":25},"startBody":{"col":21,"line":13},"endBody":{"col":1,"line":25}},"detailed":{"startLoc":{"col":24,"line":27},"endLoc":{"col":1,"line":49},"startBody":{"col":24,"line":27},"endBody":{"col":1,"line":49}},"animated-status":{"startLoc":{"col":30,"line":51},"endLoc":{"col":1,"line":74},"startBody":{"col":30,"line":51},"endBody":{"col":1,"line":74}},"transacted":{"startLoc":{"col":26,"line":76},"endLoc":{"col":1,"line":112},"startBody":{"col":26,"line":76},"endBody":{"col":1,"line":112}},"completed":{"startLoc":{"col":25,"line":126},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":126},"endBody":{"col":1,"line":149}},"with-actions":{"startLoc":{"col":27,"line":151},"endLoc":{"col":1,"line":189},"startBody":{"col":27,"line":151},"endBody":{"col":1,"line":189}},"custom-strings":{"startLoc":{"col":29,"line":191},"endLoc":{"col":1,"line":246},"startBody":{"col":29,"line":191},"endBody":{"col":1,"line":246}},"simulation":{"startLoc":{"col":36,"line":248},"endLoc":{"col":1,"line":305},"startBody":{"col":36,"line":248},"endBody":{"col":1,"line":305}}}},},\n  title: \'Components/PaymentRequest\',\n};\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.9 }}\n    />\n  );\n};;;\n\nexport const Detailed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n        company: companyAsset,\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;;\n\nexport const AnimatedStatus = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      waitAnimation\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n        company: companyAsset,\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;;\n\nexport const Transacted = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n        company: companyAsset,\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl:\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1,\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl:\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1,\n        },\n      ]}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;;\n\nconst txs = new Array<ITransaction>(30);\ntxs.fill(\n  {\n    txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n    txUrl:\n      \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n    amount: 0.01,\n  },\n  0,\n  20\n);\n\nexport const Completed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.COMPLETE}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n        company: companyAsset,\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.2, received: 0.2 }}\n      transactions={txs}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;;\n\nexport const WithActions = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n        company: companyAsset,\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl:\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1,\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl:\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1,\n        },\n      ]}\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\n      customStatusText={\'Waiting for payment\'}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;;\n\nexport const CustomStrings = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n        company: companyAsset,\n      }}\n      address=\'1BitcoinEaterAddressDontSendf59kuE\'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl:\n            \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1,\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl:\n            \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1,\n        },\n      ]}\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true,\n      }}\n      customStatusText={\'Custom status message\'}\n      strings={{\n        cancel: \'Very cancelling\',\n        seller: \'Seller\',\n        deadline: \'Deadline\',\n        // txStatus is overriden by customStatusText props in this example.\n        txStatus: {\n          complete: \'Done o/\',\n          failed: \'Failed :(\',\n          pending: \'is pending...\',\n        },\n        request: \'Pay {amount} {symbol} to get your item\',\n        help: \'Wow, help here\',\n        status: \'Transaction\',\n        receivedAmount: \'Received:\',\n        remainingAmount: \'Remaining:\',\n        transactions: \'{txAmount} transactions\',\n      }}\n    />\n  );\n};;;\n\nexport const Simulation: React.FC = () => {\n  const [status, setStatus] = useState<PaymentStatus>();\n\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\n    setStatus(status);\n  };\n\n  return (\n    <Fragment>\n      <div style={{ marginBottom: \'20px\' }}>\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\n      </div>\n      <PaymentRequest\n        symbol=\'BTC\'\n        decimalPlaces={8}\n        sellerName=\'Such Company LTD\'\n        logos={{\n          coin: \'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\',\n          company: companyAsset,\n        }}\n        address=\'1BitcoinEaterAddressDontSendf59kuE\'\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n            txUrl:\n              \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n            amount: 0.1,\n          },\n          {\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n            txUrl:\n              \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n            amount: 0.1,\n          },\n        ]}\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n        deadline={{\n          dateLocale: \'en-US\',\n          datetime: dueDate,\n          humanized: true,\n        }}\n        status={status}\n        strings={{\n          txStatus: {\n            failed: \'Payment failed :(\',\n            pending: \'Waiting for payment\',\n            complete: \'Paid! Redirecting...\',\n          },\n        }}\n      />\n    </Fragment>\n  );\n};\n\n',locationsMap:{basic:{startLoc:{col:21,line:27},endLoc:{col:1,line:39},startBody:{col:21,line:27},endBody:{col:1,line:39}},detailed:{startLoc:{col:24,line:41},endLoc:{col:1,line:63},startBody:{col:24,line:41},endBody:{col:1,line:63}},"animated-status":{startLoc:{col:30,line:65},endLoc:{col:1,line:88},startBody:{col:30,line:65},endBody:{col:1,line:88}},transacted:{startLoc:{col:26,line:90},endLoc:{col:1,line:126},startBody:{col:26,line:90},endBody:{col:1,line:126}},completed:{startLoc:{col:25,line:140},endLoc:{col:1,line:163},startBody:{col:25,line:140},endBody:{col:1,line:163}},"with-actions":{startLoc:{col:27,line:165},endLoc:{col:1,line:203},startBody:{col:27,line:165},endBody:{col:1,line:203}},"custom-strings":{startLoc:{col:29,line:205},endLoc:{col:1,line:260},startBody:{col:29,line:205},endBody:{col:1,line:260}},simulation:{startLoc:{col:36,line:262},endLoc:{col:1,line:319},startBody:{col:36,line:262},endBody:{col:1,line:319}}}}},_defineProperty(_parameters,"storySource",{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React, { Fragment, useState } from 'react';\\nimport { PaymentRequest } from '../PaymentRequest';\\nimport { PaymentStatus } from './enums/paymentStatus';\\nimport { ITransaction } from './interfaces';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {\\n  title: 'Components/PaymentRequest',\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9 }}\\n    />\\n  );\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          amount: 0.1,\\n        },\\n      ]}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill(\\n  {\\n    txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n    txUrl:\\n      'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n    amount: 0.01,\\n  },\\n  0,\\n  20\\n);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n      onCancel={() => alert('User wants to cancel, do something here!')}\\n      customStatusText={'Waiting for payment'}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n      onCancel={() => alert('User wants to cancel, do something here!')}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n      customStatusText={'Custom status message'}\\n      strings={{\\n        cancel: 'Very cancelling',\\n        seller: 'Seller',\\n        deadline: 'Deadline',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: 'Done o/',\\n          failed: 'Failed :(',\\n          pending: 'is pending...',\\n        },\\n        request: 'Pay {amount} {symbol} to get your item',\\n        help: 'Wow, help here',\\n        status: 'Transaction',\\n        receivedAmount: 'Received:',\\n        remainingAmount: 'Remaining:',\\n        transactions: '{txAmount} transactions',\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  };\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: '20px' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: dueDate,\\n          humanized: true,\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":21,\"line\":13},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":21,\"line\":13},\"endBody\":{\"col\":1,\"line\":25}},\"Detailed\":{\"startLoc\":{\"col\":24,\"line\":27},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":24,\"line\":27},\"endBody\":{\"col\":1,\"line\":49}},\"AnimatedStatus\":{\"startLoc\":{\"col\":30,\"line\":51},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":30,\"line\":51},\"endBody\":{\"col\":1,\"line\":74}},\"Transacted\":{\"startLoc\":{\"col\":26,\"line\":76},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":26,\"line\":76},\"endBody\":{\"col\":1,\"line\":112}},\"Completed\":{\"startLoc\":{\"col\":25,\"line\":126},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":25,\"line\":126},\"endBody\":{\"col\":1,\"line\":149}},\"WithActions\":{\"startLoc\":{\"col\":27,\"line\":151},\"endLoc\":{\"col\":1,\"line\":189},\"startBody\":{\"col\":27,\"line\":151},\"endBody\":{\"col\":1,\"line\":189}},\"CustomStrings\":{\"startLoc\":{\"col\":29,\"line\":191},\"endLoc\":{\"col\":1,\"line\":246},\"startBody\":{\"col\":29,\"line\":191},\"endBody\":{\"col\":1,\"line\":246}},\"Simulation\":{\"startLoc\":{\"col\":36,\"line\":248},\"endLoc\":{\"col\":1,\"line\":305},\"startBody\":{\"col\":36,\"line\":248},\"endBody\":{\"col\":1,\"line\":305}}};\nimport React, { Fragment, useState } from 'react';\nimport { PaymentRequest } from '../PaymentRequest';\nimport { PaymentStatus } from './enums/paymentStatus';\nimport { ITransaction } from './interfaces';\n\n\nconst companyAsset = require('../../assets/fictiveCompany.png');\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { Fragment, useState } from 'react';\\nimport { PaymentRequest } from '../PaymentRequest';\\nimport { PaymentStatus } from './enums/paymentStatus';\\nimport { ITransaction } from './interfaces';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {\\n  title: 'Components/PaymentRequest',\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9 }}\\n    />\\n  );\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          amount: 0.1,\\n        },\\n      ]}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill(\\n  {\\n    txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n    txUrl:\\n      'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n    amount: 0.01,\\n  },\\n  0,\\n  20\\n);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n      onCancel={() => alert('User wants to cancel, do something here!')}\\n      customStatusText={'Waiting for payment'}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n    />\\n  );\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol='BTC'\\n      decimalPlaces={8}\\n      sellerName='Such Company LTD'\\n      logos={{\\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n        company: companyAsset,\\n      }}\\n      address='1BitcoinEaterAddressDontSendf59kuE'\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n          amount: 0.1,\\n        },\\n        {\\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          txUrl:\\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n          amount: 0.1,\\n        },\\n      ]}\\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n      onCancel={() => alert('User wants to cancel, do something here!')}\\n      deadline={{\\n        dateLocale: 'en-US',\\n        datetime: dueDate,\\n        humanized: true,\\n      }}\\n      customStatusText={'Custom status message'}\\n      strings={{\\n        cancel: 'Very cancelling',\\n        seller: 'Seller',\\n        deadline: 'Deadline',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: 'Done o/',\\n          failed: 'Failed :(',\\n          pending: 'is pending...',\\n        },\\n        request: 'Pay {amount} {symbol} to get your item',\\n        help: 'Wow, help here',\\n        status: 'Transaction',\\n        receivedAmount: 'Received:',\\n        remainingAmount: 'Remaining:',\\n        transactions: '{txAmount} transactions',\\n      }}\\n    />\\n  );\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  };\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: '20px' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: dueDate,\\n          humanized: true,\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n\",\"locationsMap\":{\"basic\":{\"startLoc\":{\"col\":21,\"line\":13},\"endLoc\":{\"col\":1,\"line\":25},\"startBody\":{\"col\":21,\"line\":13},\"endBody\":{\"col\":1,\"line\":25}},\"detailed\":{\"startLoc\":{\"col\":24,\"line\":27},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":24,\"line\":27},\"endBody\":{\"col\":1,\"line\":49}},\"animated-status\":{\"startLoc\":{\"col\":30,\"line\":51},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":30,\"line\":51},\"endBody\":{\"col\":1,\"line\":74}},\"transacted\":{\"startLoc\":{\"col\":26,\"line\":76},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":26,\"line\":76},\"endBody\":{\"col\":1,\"line\":112}},\"completed\":{\"startLoc\":{\"col\":25,\"line\":126},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":25,\"line\":126},\"endBody\":{\"col\":1,\"line\":149}},\"with-actions\":{\"startLoc\":{\"col\":27,\"line\":151},\"endLoc\":{\"col\":1,\"line\":189},\"startBody\":{\"col\":27,\"line\":151},\"endBody\":{\"col\":1,\"line\":189}},\"custom-strings\":{\"startLoc\":{\"col\":29,\"line\":191},\"endLoc\":{\"col\":1,\"line\":246},\"startBody\":{\"col\":29,\"line\":191},\"endBody\":{\"col\":1,\"line\":246}},\"simulation\":{\"startLoc\":{\"col\":36,\"line\":248},\"endLoc\":{\"col\":1,\"line\":305},\"startBody\":{\"col\":36,\"line\":248},\"endBody\":{\"col\":1,\"line\":305}}}},},\n  title: 'Components/PaymentRequest',\n};\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9 }}\n    />\n  );\n};;\n\nexport const Detailed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;\n\nexport const AnimatedStatus = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      waitAnimation\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;\n\nexport const Transacted = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1,\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1,\n        },\n      ]}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;\n\nconst txs = new Array<ITransaction>(30);\ntxs.fill(\n  {\n    txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n    txUrl:\n      'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n    amount: 0.01,\n  },\n  0,\n  20\n);\n\nexport const Completed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.COMPLETE}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.2, received: 0.2 }}\n      transactions={txs}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;\n\nexport const WithActions = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1,\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1,\n        },\n      ]}\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n      onCancel={() => alert('User wants to cancel, do something here!')}\n      customStatusText={'Waiting for payment'}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};;\n\nexport const CustomStrings = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1,\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1,\n        },\n      ]}\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n      onCancel={() => alert('User wants to cancel, do something here!')}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n      customStatusText={'Custom status message'}\n      strings={{\n        cancel: 'Very cancelling',\n        seller: 'Seller',\n        deadline: 'Deadline',\n        // txStatus is overriden by customStatusText props in this example.\n        txStatus: {\n          complete: 'Done o/',\n          failed: 'Failed :(',\n          pending: 'is pending...',\n        },\n        request: 'Pay {amount} {symbol} to get your item',\n        help: 'Wow, help here',\n        status: 'Transaction',\n        receivedAmount: 'Received:',\n        remainingAmount: 'Remaining:',\n        transactions: '{txAmount} transactions',\n      }}\n    />\n  );\n};;\n\nexport const Simulation: React.FC = () => {\n  const [status, setStatus] = useState<PaymentStatus>();\n\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\n    setStatus(status);\n  };\n\n  return (\n    <Fragment>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\n      </div>\n      <PaymentRequest\n        symbol='BTC'\n        decimalPlaces={8}\n        sellerName='Such Company LTD'\n        logos={{\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n          company: companyAsset,\n        }}\n        address='1BitcoinEaterAddressDontSendf59kuE'\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            amount: 0.1,\n          },\n          {\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            amount: 0.1,\n          },\n        ]}\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n        deadline={{\n          dateLocale: 'en-US',\n          datetime: dueDate,\n          humanized: true,\n        }}\n        status={status}\n        strings={{\n          txStatus: {\n            failed: 'Payment failed :(',\n            pending: 'Waiting for payment',\n            complete: 'Paid! Redirecting...',\n          },\n        }}\n      />\n    </Fragment>\n  );\n};\n\n",locationsMap:{basic:{startLoc:{col:21,line:20},endLoc:{col:1,line:32},startBody:{col:21,line:20},endBody:{col:1,line:32}},detailed:{startLoc:{col:24,line:34},endLoc:{col:1,line:56},startBody:{col:24,line:34},endBody:{col:1,line:56}},"animated-status":{startLoc:{col:30,line:58},endLoc:{col:1,line:81},startBody:{col:30,line:58},endBody:{col:1,line:81}},transacted:{startLoc:{col:26,line:83},endLoc:{col:1,line:119},startBody:{col:26,line:83},endBody:{col:1,line:119}},completed:{startLoc:{col:25,line:133},endLoc:{col:1,line:156},startBody:{col:25,line:133},endBody:{col:1,line:156}},"with-actions":{startLoc:{col:27,line:158},endLoc:{col:1,line:196},startBody:{col:27,line:158},endBody:{col:1,line:196}},"custom-strings":{startLoc:{col:29,line:198},endLoc:{col:1,line:253},startBody:{col:29,line:198},endBody:{col:1,line:253}},simulation:{startLoc:{col:36,line:255},endLoc:{col:1,line:312},startBody:{col:36,line:255},endBody:{col:1,line:312}}}}),_defineProperty(_parameters,"storySource",{source:"import React, { Fragment, useState } from 'react';\nimport { PaymentRequest } from '../PaymentRequest';\nimport { PaymentStatus } from './enums/paymentStatus';\nimport { ITransaction } from './interfaces';\n\n\nconst companyAsset = require('../../assets/fictiveCompany.png');\n\nexport default {\n  title: 'Components/PaymentRequest',\n};\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9 }}\n    />\n  );\n};\n\nexport const Detailed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};\n\nexport const AnimatedStatus = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      waitAnimation\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};\n\nexport const Transacted = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1,\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1,\n        },\n      ]}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};\n\nconst txs = new Array<ITransaction>(30);\ntxs.fill(\n  {\n    txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n    txUrl:\n      'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n    amount: 0.01,\n  },\n  0,\n  20\n);\n\nexport const Completed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.COMPLETE}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.2, received: 0.2 }}\n      transactions={txs}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};\n\nexport const WithActions = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1,\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1,\n        },\n      ]}\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n      onCancel={() => alert('User wants to cancel, do something here!')}\n      customStatusText={'Waiting for payment'}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n    />\n  );\n};\n\nexport const CustomStrings = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n        company: companyAsset,\n      }}\n      address='1BitcoinEaterAddressDontSendf59kuE'\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1,\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl:\n            'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1,\n        },\n      ]}\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n      onCancel={() => alert('User wants to cancel, do something here!')}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true,\n      }}\n      customStatusText={'Custom status message'}\n      strings={{\n        cancel: 'Very cancelling',\n        seller: 'Seller',\n        deadline: 'Deadline',\n        // txStatus is overriden by customStatusText props in this example.\n        txStatus: {\n          complete: 'Done o/',\n          failed: 'Failed :(',\n          pending: 'is pending...',\n        },\n        request: 'Pay {amount} {symbol} to get your item',\n        help: 'Wow, help here',\n        status: 'Transaction',\n        receivedAmount: 'Received:',\n        remainingAmount: 'Remaining:',\n        transactions: '{txAmount} transactions',\n      }}\n    />\n  );\n};\n\nexport const Simulation: React.FC = () => {\n  const [status, setStatus] = useState<PaymentStatus>();\n\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\n    setStatus(status);\n  };\n\n  return (\n    <Fragment>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\n      </div>\n      <PaymentRequest\n        symbol='BTC'\n        decimalPlaces={8}\n        sellerName='Such Company LTD'\n        logos={{\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n          company: companyAsset,\n        }}\n        address='1BitcoinEaterAddressDontSendf59kuE'\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            amount: 0.1,\n          },\n          {\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            amount: 0.1,\n          },\n        ]}\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n        deadline={{\n          dateLocale: 'en-US',\n          datetime: dueDate,\n          humanized: true,\n        }}\n        status={status}\n        strings={{\n          txStatus: {\n            failed: 'Payment failed :(',\n            pending: 'Waiting for payment',\n            complete: 'Paid! Redirecting...',\n          },\n        }}\n      />\n    </Fragment>\n  );\n};\n",locationsMap:{basic:{startLoc:{col:21,line:13},endLoc:{col:1,line:25},startBody:{col:21,line:13},endBody:{col:1,line:25}},detailed:{startLoc:{col:24,line:27},endLoc:{col:1,line:49},startBody:{col:24,line:27},endBody:{col:1,line:49}},"animated-status":{startLoc:{col:30,line:51},endLoc:{col:1,line:74},startBody:{col:30,line:51},endBody:{col:1,line:74}},transacted:{startLoc:{col:26,line:76},endLoc:{col:1,line:112},startBody:{col:26,line:76},endBody:{col:1,line:112}},completed:{startLoc:{col:25,line:126},endLoc:{col:1,line:149},startBody:{col:25,line:126},endBody:{col:1,line:149}},"with-actions":{startLoc:{col:27,line:151},endLoc:{col:1,line:189},startBody:{col:27,line:151},endBody:{col:1,line:189}},"custom-strings":{startLoc:{col:29,line:191},endLoc:{col:1,line:246},startBody:{col:29,line:191},endBody:{col:1,line:246}},simulation:{startLoc:{col:36,line:248},endLoc:{col:1,line:305},startBody:{col:36,line:248},endBody:{col:1,line:305}}}}),_parameters),title:"Components/PaymentRequest"};var Basic=function Basic(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{symbol:"BTC",decimalPlaces:8,logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg"},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9}})};Basic.displayName="Basic";var Detailed=function Detailed(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{status:_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__.a.PENDING,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:0},deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};Detailed.displayName="Detailed";var AnimatedStatus=function AnimatedStatus(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{waitAnimation:!0,status:_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__.a.PENDING,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:0},deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};AnimatedStatus.displayName="AnimatedStatus";var Transacted=function Transacted(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{status:_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__.a.PENDING,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};Transacted.displayName="Transacted";var txs=new Array(30);txs.fill({txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.01},0,20);var Completed=function Completed(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{status:_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__.a.COMPLETE,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.2,received:.2},transactions:txs,deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};Completed.displayName="Completed";var WithActions=function WithActions(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",onCancel:function onCancel(){return alert("User wants to cancel, do something here!")},customStatusText:"Waiting for payment",deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};WithActions.displayName="WithActions";var CustomStrings=function CustomStrings(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",onCancel:function onCancel(){return alert("User wants to cancel, do something here!")},deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0},customStatusText:"Custom status message",strings:{cancel:"Very cancelling",seller:"Seller",deadline:"Deadline",txStatus:{complete:"Done o/",failed:"Failed :(",pending:"is pending..."},request:"Pay {amount} {symbol} to get your item",help:"Wow, help here",status:"Transaction",receivedAmount:"Received:",remainingAmount:"Remaining:",transactions:"{txAmount} transactions"}})};CustomStrings.displayName="CustomStrings";var Simulation=function Simulation(){var _useState2=_slicedToArray(Object(react__WEBPACK_IMPORTED_MODULE_14__.useState)(),2),status=_useState2[0],setStatus=_useState2[1],dueDate=new Date;dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15));var _triggerStatus=function _triggerStatus(status){return function(){setStatus(status)}};return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(react__WEBPACK_IMPORTED_MODULE_14__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)("div",{style:{marginBottom:"20px"},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("button",{onClick:_triggerStatus(_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__.a.COMPLETE),children:"Trigger success"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("button",{onClick:_triggerStatus(_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_16__.a.FAILED),children:"Trigger failure"})]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_PaymentRequest__WEBPACK_IMPORTED_MODULE_15__.a,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0},status:status,strings:{txStatus:{failed:"Payment failed :(",pending:"Waiting for payment",complete:"Paid! Redirecting..."}}})]})};Simulation.displayName="Simulation";try{Simulation.displayName="Simulation",Simulation.__docgenInfo={description:"",displayName:"Simulation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/PaymentRequest/index.stories.tsx#Simulation"]={docgenInfo:Simulation.__docgenInfo,name:"Simulation",path:"src/components/PaymentRequest/index.stories.tsx#Simulation"})}catch(__react_docgen_typescript_loader_error){}},1109:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Basic",(function(){return Basic})),__webpack_require__.d(__webpack_exports__,"Statuses",(function(){return Statuses})),__webpack_require__.d(__webpack_exports__,"TransactionDetails",(function(){return TransactionDetails})),__webpack_require__.d(__webpack_exports__,"Animated",(function(){return Animated})),__webpack_require__.d(__webpack_exports__,"Simulation",(function(){return Simulation}));__webpack_require__(9),__webpack_require__(32),__webpack_require__(31),__webpack_require__(17),__webpack_require__(4),__webpack_require__(12),__webpack_require__(19),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(6),__webpack_require__(26),__webpack_require__(21),__webpack_require__(110),__webpack_require__(11),__webpack_require__(302),__webpack_require__(5),__webpack_require__(36);var _parameters,_templateObject,react__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(0),styled_components__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(14),_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(57),_txStatus__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(45),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var txCompleted=__webpack_require__(1110);__webpack_exports__.default={parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAddress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'Components/TransactionStatus\',\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAddress;\\\\n    receiver: IAddress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":18},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":21,\\"line\\":18},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"Statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":63},\\"startBody\\":{\\"col\\":24,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":63}},\\"TransactionDetails\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":65},\\"endLoc\\":{\\"col\\":1,\\"line\\":85},\\"startBody\\":{\\"col\\":34,\\"line\\":65},\\"endBody\\":{\\"col\\":1,\\"line\\":85}},\\"Animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":87},\\"endLoc\\":{\\"col\\":1,\\"line\\":126},\\"startBody\\":{\\"col\\":24,\\"line\\":87},\\"endBody\\":{\\"col\\":1,\\"line\\":126}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":128},\\"endLoc\\":{\\"col\\":1,\\"line\\":227},\\"startBody\\":{\\"col\\":36,\\"line\\":128},\\"endBody\\":{\\"col\\":1,\\"line\\":227}}};\\nimport React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAddress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAddress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'Components/TransactionStatus\',\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAddress;\\\\n    receiver: IAddress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":18},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":21,\\"line\\":18},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":63},\\"startBody\\":{\\"col\\":24,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":63}},\\"transaction-details\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":65},\\"endLoc\\":{\\"col\\":1,\\"line\\":85},\\"startBody\\":{\\"col\\":34,\\"line\\":65},\\"endBody\\":{\\"col\\":1,\\"line\\":85}},\\"animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":87},\\"endLoc\\":{\\"col\\":1,\\"line\\":126},\\"startBody\\":{\\"col\\":24,\\"line\\":87},\\"endBody\\":{\\"col\\":1,\\"line\\":126}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":128},\\"endLoc\\":{\\"col\\":1,\\"line\\":227},\\"startBody\\":{\\"col\\":36,\\"line\\":128},\\"endBody\\":{\\"col\\":1,\\"line\\":227}}}},},\\n  title: \'Components/TransactionStatus\',\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAddress;\\n    receiver: IAddress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":25},"endLoc":{"col":1,"line":34},"startBody":{"col":21,"line":25},"endBody":{"col":1,"line":34}},"Statuses":{"startLoc":{"col":24,"line":36},"endLoc":{"col":1,"line":70},"startBody":{"col":24,"line":36},"endBody":{"col":1,"line":70}},"TransactionDetails":{"startLoc":{"col":34,"line":72},"endLoc":{"col":1,"line":92},"startBody":{"col":34,"line":72},"endBody":{"col":1,"line":92}},"Animated":{"startLoc":{"col":24,"line":94},"endLoc":{"col":1,"line":133},"startBody":{"col":24,"line":94},"endBody":{"col":1,"line":133}},"Simulation":{"startLoc":{"col":36,"line":135},"endLoc":{"col":1,"line":234},"startBody":{"col":36,"line":135},"endBody":{"col":1,"line":234}}};\n\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAddress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {\\n  title: \'Components/TransactionStatus\',\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAddress;\\n    receiver: IAddress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":18},"endLoc":{"col":1,"line":27},"startBody":{"col":21,"line":18},"endBody":{"col":1,"line":27}},"Statuses":{"startLoc":{"col":24,"line":29},"endLoc":{"col":1,"line":63},"startBody":{"col":24,"line":29},"endBody":{"col":1,"line":63}},"TransactionDetails":{"startLoc":{"col":34,"line":65},"endLoc":{"col":1,"line":85},"startBody":{"col":34,"line":65},"endBody":{"col":1,"line":85}},"Animated":{"startLoc":{"col":24,"line":87},"endLoc":{"col":1,"line":126},"startBody":{"col":24,"line":87},"endBody":{"col":1,"line":126}},"Simulation":{"startLoc":{"col":36,"line":128},"endLoc":{"col":1,"line":227},"startBody":{"col":36,"line":128},"endBody":{"col":1,"line":227}}};\nimport React, { Fragment, useEffect, useRef, useState } from \'react\';\nimport styled from \'styled-components\';\nimport { TransactionStatus } from \'../TransactionStatus\';\nimport { IAddress } from \'./interfaces\';\nimport { TxStatus } from \'./txStatus\';\n\n\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\n\nexport default {parameters: {"storySource":{"source":"\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAddress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'Components/TransactionStatus\',\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAddress;\\\\n    receiver: IAddress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":18},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":21,\\"line\\":18},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"Statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":63},\\"startBody\\":{\\"col\\":24,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":63}},\\"TransactionDetails\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":65},\\"endLoc\\":{\\"col\\":1,\\"line\\":85},\\"startBody\\":{\\"col\\":34,\\"line\\":65},\\"endBody\\":{\\"col\\":1,\\"line\\":85}},\\"Animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":87},\\"endLoc\\":{\\"col\\":1,\\"line\\":126},\\"startBody\\":{\\"col\\":24,\\"line\\":87},\\"endBody\\":{\\"col\\":1,\\"line\\":126}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":128},\\"endLoc\\":{\\"col\\":1,\\"line\\":227},\\"startBody\\":{\\"col\\":36,\\"line\\":128},\\"endBody\\":{\\"col\\":1,\\"line\\":227}}};\\nimport React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAddress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAddress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'Components/TransactionStatus\',\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAddress;\\\\n    receiver: IAddress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":18},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":21,\\"line\\":18},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":63},\\"startBody\\":{\\"col\\":24,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":63}},\\"transaction-details\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":65},\\"endLoc\\":{\\"col\\":1,\\"line\\":85},\\"startBody\\":{\\"col\\":34,\\"line\\":65},\\"endBody\\":{\\"col\\":1,\\"line\\":85}},\\"animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":87},\\"endLoc\\":{\\"col\\":1,\\"line\\":126},\\"startBody\\":{\\"col\\":24,\\"line\\":87},\\"endBody\\":{\\"col\\":1,\\"line\\":126}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":128},\\"endLoc\\":{\\"col\\":1,\\"line\\":227},\\"startBody\\":{\\"col\\":36,\\"line\\":128},\\"endBody\\":{\\"col\\":1,\\"line\\":227}}}},},\\n  title: \'Components/TransactionStatus\',\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAddress;\\n    receiver: IAddress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":25},"endLoc":{"col":1,"line":34},"startBody":{"col":21,"line":25},"endBody":{"col":1,"line":34}},"statuses":{"startLoc":{"col":24,"line":36},"endLoc":{"col":1,"line":70},"startBody":{"col":24,"line":36},"endBody":{"col":1,"line":70}},"transaction-details":{"startLoc":{"col":34,"line":72},"endLoc":{"col":1,"line":92},"startBody":{"col":34,"line":72},"endBody":{"col":1,"line":92}},"animated":{"startLoc":{"col":24,"line":94},"endLoc":{"col":1,"line":133},"startBody":{"col":24,"line":94},"endBody":{"col":1,"line":133}},"simulation":{"startLoc":{"col":36,"line":135},"endLoc":{"col":1,"line":234},"startBody":{"col":36,"line":135},"endBody":{"col":1,"line":234}}}},"storySource":{"source":"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAddress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {\\n  title: \'Components/TransactionStatus\',\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAddress;\\n    receiver: IAddress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":18},"endLoc":{"col":1,"line":27},"startBody":{"col":21,"line":18},"endBody":{"col":1,"line":27}},"statuses":{"startLoc":{"col":24,"line":29},"endLoc":{"col":1,"line":63},"startBody":{"col":24,"line":29},"endBody":{"col":1,"line":63}},"transaction-details":{"startLoc":{"col":34,"line":65},"endLoc":{"col":1,"line":85},"startBody":{"col":34,"line":65},"endBody":{"col":1,"line":85}},"animated":{"startLoc":{"col":24,"line":87},"endLoc":{"col":1,"line":126},"startBody":{"col":24,"line":87},"endBody":{"col":1,"line":126}},"simulation":{"startLoc":{"col":36,"line":128},"endLoc":{"col":1,"line":227},"startBody":{"col":36,"line":128},"endBody":{"col":1,"line":227}}}},},\n  title: \'Components/TransactionStatus\',\n};\n\nconst Spacer = styled.div`\n  margin: 10px 0 10px 0;\n`;\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      status={TxStatus.COMPLETED}\n      amount=\'0.1\'\n      symbol=\'BTC\'\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n    />\n  );\n};;;\n\nexport const Statuses = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.PENDING}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.COMPLETED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.FAILED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n  </Fragment>\n);;;\n\nexport const TransactionDetails = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      amount=\'0.1\'\n      symbol=\'BTC\'\n      txFees=\'0.0001\'\n      date={{\n        value: new Date(),\n      }}\n      sender={{\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n      }}\n      receiver={{\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\n      }}\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n    />\n  );\n};;;\n\nexport const Animated = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.PENDING}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.UNKNOWN}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.COMPLETED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.FAILED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n  </Fragment>\n);;;\n\nexport const Simulation: React.FC = () => {\n  interface ITransaction {\n    sender: IAddress;\n    receiver: IAddress;\n  }\n\n  const timer = useRef<NodeJS.Timeout>();\n\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\n  const [isInit, setIsInit] = useState<boolean>(false);\n  const [txURL, setTxURL] = useState<string>();\n\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\n  const _delay = (delay: number): Promise<void> =>\n    new Promise((resolve) => setTimeout(resolve, delay));\n\n  useEffect(() => {\n    return () => _clearTimeout();\n  }, []);\n\n  const runSimulation = (): void => {\n    _clearTimeout();\n\n    _delay(3 * 1000)\n      .then(() =>\n        setTxURL(\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n        )\n      )\n\n      // wait 5s before completing that transaction\n      .then(() => _delay(5 * 1000))\n      .then(() => setStatus(TxStatus.COMPLETED))\n\n      // let\'s say, tx infos need to be fetched before being able to render them\n      .then(() => _delay(1.5 * 1000))\n      .then(() =>\n        setTx({\n          ...tx,\n          ...{\n            sender: {\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n            },\n            receiver: {\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\n            },\n            txFees: \'0.0001\',\n            customDetailComponent: (\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\n            ),\n          },\n        })\n      );\n  };\n\n  const _handleReset = (): void => {\n    setTx({});\n    setStatus(TxStatus.PENDING);\n    runSimulation();\n  };\n\n  const _handleInit = (): void => {\n    setIsInit(true);\n    runSimulation();\n  };\n\n  if (!isInit) {\n    return <button onClick={_handleInit}>Begin transaction</button>;\n  }\n\n  return (\n    <Spacer>\n      <TransactionStatus\n        animated\n        autoShowDetails\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={status}\n        txURL={txURL}\n        date={{\n          value: new Date(),\n        }}\n        {...tx}\n      />\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\n        Reset\n      </button>\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\n        <p>\n          In this example, <u>autoShowDetails</u> property is added. <br />\n          When the component will receive props, it will automatically expand the card. This is\n          fully optional.\n        </p>\n      </i>\n    </Spacer>\n  );\n};\n\n',locationsMap:{basic:{startLoc:{col:21,line:32},endLoc:{col:1,line:41},startBody:{col:21,line:32},endBody:{col:1,line:41}},statuses:{startLoc:{col:24,line:43},endLoc:{col:1,line:77},startBody:{col:24,line:43},endBody:{col:1,line:77}},"transaction-details":{startLoc:{col:34,line:79},endLoc:{col:1,line:99},startBody:{col:34,line:79},endBody:{col:1,line:99}},animated:{startLoc:{col:24,line:101},endLoc:{col:1,line:140},startBody:{col:24,line:101},endBody:{col:1,line:140}},simulation:{startLoc:{col:36,line:142},endLoc:{col:1,line:241},startBody:{col:36,line:142},endBody:{col:1,line:241}}}}},_defineProperty(_parameters,"storySource",{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React, { Fragment, useEffect, useRef, useState } from 'react';\\nimport styled from 'styled-components';\\nimport { TransactionStatus } from '../TransactionStatus';\\nimport { IAddress } from './interfaces';\\nimport { TxStatus } from './txStatus';\\n\\n\\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\\n\\nexport default {\\n  title: 'Components/TransactionStatus',\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount='0.1'\\n      symbol='BTC'\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount='0.1'\\n      symbol='BTC'\\n      txFees='0.0001'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n      }}\\n      receiver={{\\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.UNKNOWN}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAddress;\\n    receiver: IAddress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let's say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n            },\\n            receiver: {\\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n            },\\n            txFees: '0.0001',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount='0.1'\\n        symbol='BTC'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":21,\"line\":18},\"endLoc\":{\"col\":1,\"line\":27},\"startBody\":{\"col\":21,\"line\":18},\"endBody\":{\"col\":1,\"line\":27}},\"Statuses\":{\"startLoc\":{\"col\":24,\"line\":29},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":24,\"line\":29},\"endBody\":{\"col\":1,\"line\":63}},\"TransactionDetails\":{\"startLoc\":{\"col\":34,\"line\":65},\"endLoc\":{\"col\":1,\"line\":85},\"startBody\":{\"col\":34,\"line\":65},\"endBody\":{\"col\":1,\"line\":85}},\"Animated\":{\"startLoc\":{\"col\":24,\"line\":87},\"endLoc\":{\"col\":1,\"line\":126},\"startBody\":{\"col\":24,\"line\":87},\"endBody\":{\"col\":1,\"line\":126}},\"Simulation\":{\"startLoc\":{\"col\":36,\"line\":128},\"endLoc\":{\"col\":1,\"line\":227},\"startBody\":{\"col\":36,\"line\":128},\"endBody\":{\"col\":1,\"line\":227}}};\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { TransactionStatus } from '../TransactionStatus';\nimport { IAddress } from './interfaces';\nimport { TxStatus } from './txStatus';\n\n\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { Fragment, useEffect, useRef, useState } from 'react';\\nimport styled from 'styled-components';\\nimport { TransactionStatus } from '../TransactionStatus';\\nimport { IAddress } from './interfaces';\\nimport { TxStatus } from './txStatus';\\n\\n\\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\\n\\nexport default {\\n  title: 'Components/TransactionStatus',\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount='0.1'\\n      symbol='BTC'\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount='0.1'\\n      symbol='BTC'\\n      txFees='0.0001'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n      }}\\n      receiver={{\\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.UNKNOWN}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAddress;\\n    receiver: IAddress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let's say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n            },\\n            receiver: {\\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n            },\\n            txFees: '0.0001',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount='0.1'\\n        symbol='BTC'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\",\"locationsMap\":{\"basic\":{\"startLoc\":{\"col\":21,\"line\":18},\"endLoc\":{\"col\":1,\"line\":27},\"startBody\":{\"col\":21,\"line\":18},\"endBody\":{\"col\":1,\"line\":27}},\"statuses\":{\"startLoc\":{\"col\":24,\"line\":29},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":24,\"line\":29},\"endBody\":{\"col\":1,\"line\":63}},\"transaction-details\":{\"startLoc\":{\"col\":34,\"line\":65},\"endLoc\":{\"col\":1,\"line\":85},\"startBody\":{\"col\":34,\"line\":65},\"endBody\":{\"col\":1,\"line\":85}},\"animated\":{\"startLoc\":{\"col\":24,\"line\":87},\"endLoc\":{\"col\":1,\"line\":126},\"startBody\":{\"col\":24,\"line\":87},\"endBody\":{\"col\":1,\"line\":126}},\"simulation\":{\"startLoc\":{\"col\":36,\"line\":128},\"endLoc\":{\"col\":1,\"line\":227},\"startBody\":{\"col\":36,\"line\":128},\"endBody\":{\"col\":1,\"line\":227}}}},},\n  title: 'Components/TransactionStatus',\n};\n\nconst Spacer = styled.div`\n  margin: 10px 0 10px 0;\n`;\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      status={TxStatus.COMPLETED}\n      amount='0.1'\n      symbol='BTC'\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};;\n\nexport const Statuses = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);;\n\nexport const TransactionDetails = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      amount='0.1'\n      symbol='BTC'\n      txFees='0.0001'\n      date={{\n        value: new Date(),\n      }}\n      sender={{\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      }}\n      receiver={{\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n      }}\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};;\n\nexport const Animated = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.UNKNOWN}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);;\n\nexport const Simulation: React.FC = () => {\n  interface ITransaction {\n    sender: IAddress;\n    receiver: IAddress;\n  }\n\n  const timer = useRef<NodeJS.Timeout>();\n\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\n  const [isInit, setIsInit] = useState<boolean>(false);\n  const [txURL, setTxURL] = useState<string>();\n\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\n  const _delay = (delay: number): Promise<void> =>\n    new Promise((resolve) => setTimeout(resolve, delay));\n\n  useEffect(() => {\n    return () => _clearTimeout();\n  }, []);\n\n  const runSimulation = (): void => {\n    _clearTimeout();\n\n    _delay(3 * 1000)\n      .then(() =>\n        setTxURL(\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n        )\n      )\n\n      // wait 5s before completing that transaction\n      .then(() => _delay(5 * 1000))\n      .then(() => setStatus(TxStatus.COMPLETED))\n\n      // let's say, tx infos need to be fetched before being able to render them\n      .then(() => _delay(1.5 * 1000))\n      .then(() =>\n        setTx({\n          ...tx,\n          ...{\n            sender: {\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n            },\n            receiver: {\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n            },\n            txFees: '0.0001',\n            customDetailComponent: (\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\n            ),\n          },\n        })\n      );\n  };\n\n  const _handleReset = (): void => {\n    setTx({});\n    setStatus(TxStatus.PENDING);\n    runSimulation();\n  };\n\n  const _handleInit = (): void => {\n    setIsInit(true);\n    runSimulation();\n  };\n\n  if (!isInit) {\n    return <button onClick={_handleInit}>Begin transaction</button>;\n  }\n\n  return (\n    <Spacer>\n      <TransactionStatus\n        animated\n        autoShowDetails\n        amount='0.1'\n        symbol='BTC'\n        status={status}\n        txURL={txURL}\n        date={{\n          value: new Date(),\n        }}\n        {...tx}\n      />\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\n        Reset\n      </button>\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\n        <p>\n          In this example, <u>autoShowDetails</u> property is added. <br />\n          When the component will receive props, it will automatically expand the card. This is\n          fully optional.\n        </p>\n      </i>\n    </Spacer>\n  );\n};\n\n",locationsMap:{basic:{startLoc:{col:21,line:25},endLoc:{col:1,line:34},startBody:{col:21,line:25},endBody:{col:1,line:34}},statuses:{startLoc:{col:24,line:36},endLoc:{col:1,line:70},startBody:{col:24,line:36},endBody:{col:1,line:70}},"transaction-details":{startLoc:{col:34,line:72},endLoc:{col:1,line:92},startBody:{col:34,line:72},endBody:{col:1,line:92}},animated:{startLoc:{col:24,line:94},endLoc:{col:1,line:133},startBody:{col:24,line:94},endBody:{col:1,line:133}},simulation:{startLoc:{col:36,line:135},endLoc:{col:1,line:234},startBody:{col:36,line:135},endBody:{col:1,line:234}}}}),_defineProperty(_parameters,"storySource",{source:"import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { TransactionStatus } from '../TransactionStatus';\nimport { IAddress } from './interfaces';\nimport { TxStatus } from './txStatus';\n\n\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\n\nexport default {\n  title: 'Components/TransactionStatus',\n};\n\nconst Spacer = styled.div`\n  margin: 10px 0 10px 0;\n`;\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      status={TxStatus.COMPLETED}\n      amount='0.1'\n      symbol='BTC'\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};\n\nexport const Statuses = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);\n\nexport const TransactionDetails = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      amount='0.1'\n      symbol='BTC'\n      txFees='0.0001'\n      date={{\n        value: new Date(),\n      }}\n      sender={{\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      }}\n      receiver={{\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n      }}\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};\n\nexport const Animated = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.UNKNOWN}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);\n\nexport const Simulation: React.FC = () => {\n  interface ITransaction {\n    sender: IAddress;\n    receiver: IAddress;\n  }\n\n  const timer = useRef<NodeJS.Timeout>();\n\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\n  const [isInit, setIsInit] = useState<boolean>(false);\n  const [txURL, setTxURL] = useState<string>();\n\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\n  const _delay = (delay: number): Promise<void> =>\n    new Promise((resolve) => setTimeout(resolve, delay));\n\n  useEffect(() => {\n    return () => _clearTimeout();\n  }, []);\n\n  const runSimulation = (): void => {\n    _clearTimeout();\n\n    _delay(3 * 1000)\n      .then(() =>\n        setTxURL(\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n        )\n      )\n\n      // wait 5s before completing that transaction\n      .then(() => _delay(5 * 1000))\n      .then(() => setStatus(TxStatus.COMPLETED))\n\n      // let's say, tx infos need to be fetched before being able to render them\n      .then(() => _delay(1.5 * 1000))\n      .then(() =>\n        setTx({\n          ...tx,\n          ...{\n            sender: {\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n            },\n            receiver: {\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n            },\n            txFees: '0.0001',\n            customDetailComponent: (\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\n            ),\n          },\n        })\n      );\n  };\n\n  const _handleReset = (): void => {\n    setTx({});\n    setStatus(TxStatus.PENDING);\n    runSimulation();\n  };\n\n  const _handleInit = (): void => {\n    setIsInit(true);\n    runSimulation();\n  };\n\n  if (!isInit) {\n    return <button onClick={_handleInit}>Begin transaction</button>;\n  }\n\n  return (\n    <Spacer>\n      <TransactionStatus\n        animated\n        autoShowDetails\n        amount='0.1'\n        symbol='BTC'\n        status={status}\n        txURL={txURL}\n        date={{\n          value: new Date(),\n        }}\n        {...tx}\n      />\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\n        Reset\n      </button>\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\n        <p>\n          In this example, <u>autoShowDetails</u> property is added. <br />\n          When the component will receive props, it will automatically expand the card. This is\n          fully optional.\n        </p>\n      </i>\n    </Spacer>\n  );\n};\n",locationsMap:{basic:{startLoc:{col:21,line:18},endLoc:{col:1,line:27},startBody:{col:21,line:18},endBody:{col:1,line:27}},statuses:{startLoc:{col:24,line:29},endLoc:{col:1,line:63},startBody:{col:24,line:29},endBody:{col:1,line:63}},"transaction-details":{startLoc:{col:34,line:65},endLoc:{col:1,line:85},startBody:{col:34,line:65},endBody:{col:1,line:85}},animated:{startLoc:{col:24,line:87},endLoc:{col:1,line:126},startBody:{col:24,line:87},endBody:{col:1,line:126}},simulation:{startLoc:{col:36,line:128},endLoc:{col:1,line:227},startBody:{col:36,line:128},endBody:{col:1,line:227}}}}),_parameters),title:"Components/TransactionStatus"};var Spacer=styled_components__WEBPACK_IMPORTED_MODULE_19__.c.div(_templateObject||(_templateObject=function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  margin: 10px 0 10px 0;\n"]))),Basic=function Basic(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.COMPLETED,amount:"0.1",symbol:"BTC",txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})};Basic.displayName="Basic";var Statuses=function Statuses(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react__WEBPACK_IMPORTED_MODULE_18__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{amount:"0.1",symbol:"BTC",txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.PENDING,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.COMPLETED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.FAILED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})})]})};Statuses.displayName="Statuses";var TransactionDetails=function TransactionDetails(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{amount:"0.1",symbol:"BTC",txFees:"0.0001",date:{value:new Date},sender:{hash:"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",url:"https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"},receiver:{hash:"1CounterpartyXXXXXXXXXXXXXXXUWLpVr"},customDetailComponent:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("b",{children:"Hello, this is a custom component!"}),txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})};TransactionDetails.displayName="TransactionDetails";var Animated=function Animated(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react__WEBPACK_IMPORTED_MODULE_18__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{animated:!0,amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.PENDING,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{animated:!0,amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.UNKNOWN,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{animated:!0,amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.COMPLETED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(Spacer,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,{animated:!0,amount:"0.1",symbol:"BTC",status:_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.FAILED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})})]})};Animated.displayName="Animated";var Simulation=function Simulation(){var timer=Object(react__WEBPACK_IMPORTED_MODULE_18__.useRef)(),_useState2=_slicedToArray(Object(react__WEBPACK_IMPORTED_MODULE_18__.useState)(_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.PENDING),2),status=_useState2[0],setStatus=_useState2[1],_useState4=_slicedToArray(Object(react__WEBPACK_IMPORTED_MODULE_18__.useState)({}),2),tx=_useState4[0],setTx=_useState4[1],_useState6=_slicedToArray(Object(react__WEBPACK_IMPORTED_MODULE_18__.useState)(!1),2),isInit=_useState6[0],setIsInit=_useState6[1],_useState8=_slicedToArray(Object(react__WEBPACK_IMPORTED_MODULE_18__.useState)(),2),txURL=_useState8[0],setTxURL=_useState8[1],_clearTimeout=function _clearTimeout(){return timer.current&&clearInterval(timer.current)},_delay=function _delay(delay){return new Promise((function(resolve){return setTimeout(resolve,delay)}))};Object(react__WEBPACK_IMPORTED_MODULE_18__.useEffect)((function(){return function(){return _clearTimeout()}}),[]);var runSimulation=function runSimulation(){_clearTimeout(),_delay(3e3).then((function(){return setTxURL("https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1")})).then((function(){return _delay(5e3)})).then((function(){return setStatus(_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.COMPLETED)})).then((function(){return _delay(1500)})).then((function(){return setTx(Object.assign({},tx,{sender:{hash:"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",url:"https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"},receiver:{hash:"1CounterpartyXXXXXXXXXXXXXXXUWLpVr",url:"https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr"},txFees:"0.0001",customDetailComponent:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("img",{src:txCompleted,alt:"Custom component",style:{width:"100%"}})}))}))};return isInit?Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(Spacer,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_TransactionStatus__WEBPACK_IMPORTED_MODULE_20__.a,Object.assign({animated:!0,autoShowDetails:!0,amount:"0.1",symbol:"BTC",status:status,txURL:txURL,date:{value:new Date}},tx)),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("button",{style:{marginTop:"10px"},onClick:function _handleReset(){setTx({}),setStatus(_txStatus__WEBPACK_IMPORTED_MODULE_21__.a.PENDING),runSimulation()},children:"Reset"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("i",{style:{display:"block",fontSize:"12px",marginTop:"10px"},children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("p",{children:["In this example, ",Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("u",{children:"autoShowDetails"})," property is added. ",Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("br",{}),"When the component will receive props, it will automatically expand the card. This is fully optional."]})})]}):Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("button",{onClick:function _handleInit(){setIsInit(!0),runSimulation()},children:"Begin transaction"})};Simulation.displayName="Simulation";try{Simulation.displayName="Simulation",Simulation.__docgenInfo={description:"",displayName:"Simulation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TransactionStatus/index.stories.tsx#Simulation"]={docgenInfo:Simulation.__docgenInfo,name:"Simulation",path:"src/components/TransactionStatus/index.stories.tsx#Simulation"})}catch(__react_docgen_typescript_loader_error){}},1110:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/txstatus-completed.87b0f1b0.jpg"},1111:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Presets",(function(){return Presets})),__webpack_require__.d(__webpack_exports__,"CustomThemes",(function(){return CustomThemes}));__webpack_require__(17),__webpack_require__(4),__webpack_require__(12),__webpack_require__(19),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(26),__webpack_require__(9),__webpack_require__(21),__webpack_require__(6),__webpack_require__(20),__webpack_require__(10),__webpack_require__(24),__webpack_require__(11),__webpack_require__(23),__webpack_require__(36);var _parameters,react__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(0),_components_PaymentRequest_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(55),_components_TransactionStatus__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(57),_components_PaymentRequest__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(75),_themeProvider__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(122),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(1);function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}(arr)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var companyAsset=__webpack_require__(484);__webpack_exports__.default={parameters:(_parameters={storySource:{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\\"import React, { useContext } from 'react';\\\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\\\nimport { ITheme } from './ITheme';\\\\n\\\\n\\\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\\\n\\\\nexport default {\\\\n  title: 'ThemeProvider',\\\\n};\\\\n\\\\nconst LabRat = (): React.ReactElement => {\\\\n  return (\\\\n    <>\\\\n      <TransactionStatus\\\\n        status={TxStatus.PENDING}\\\\n        amount='0.1'\\\\n        symbol='BTC'\\\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\\\n      />\\\\n      <br />\\\\n      <PaymentRequest\\\\n        symbol='BTC'\\\\n        decimalPlaces={8}\\\\n        sellerName='Such Company LTD'\\\\n        logos={{\\\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\\\n        deadline={{\\\\n          dateLocale: 'en-US',\\\\n          datetime: new Date(),\\\\n          humanized: true,\\\\n        }}\\\\n        status={PaymentStatus.COMPLETE}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: 'Payment failed :(',\\\\n            pending: 'Waiting for payment',\\\\n            complete: 'Paid! Redirecting...',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const Presets: React.FC = () => {\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>\\\\n            <br />\\\\n            <small>\\\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\\\n              you refresh the page.\\\\n            </small>\\\\n          </p>\\\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\\\n          <button onClick={() => switchTo('light')}>Go light</button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\\nexport const CustomThemes: React.FC = () => {\\\\n  const customThemes: Record<string, Partial<ITheme>> = {\\\\n    wow: {\\\\n      primary: {\\\\n        backgroundColor: 'pink',\\\\n        color: 'yellow',\\\\n      },\\\\n    },\\\\n    veryOrganic: {\\\\n      primary: {\\\\n        backgroundColor: 'lightgreen',\\\\n        color: 'darkgreen',\\\\n      },\\\\n    },\\\\n  };\\\\n\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>.<br />\\\\n            <ul>\\\\n              <li>\\\\n                You can fully (or even partially) create your themes and enable them simply by\\\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\\\n              </li>\\\\n              <li>\\\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\\\n                persist if you refresh the page.\\\\n              </li>\\\\n              <li>\\\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\\\n              </li>\\\\n            </ul>\\\\n          </p>\\\\n          {availableThemes.map((key, i) => (\\\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\\\n              Go {key}\\\\n            </button>\\\\n          ))}\\\\n          <button\\\\n            onClick={() => {\\\\n              switchTo('fail');\\\\n              alert('Check your console, a warning is waiting for you ;)');\\\\n            }}\\\\n          >\\\\n            Go fail (will.. fail).\\\\n          </button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider customThemes={customThemes}>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\\"Presets\\\":{\\\"startLoc\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":96},\\\"startBody\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":96}},\\\"CustomThemes\\\":{\\\"startLoc\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":161},\\\"startBody\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":161}}};\\nimport React, { useContext } from 'react';\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\nimport { ITheme } from './ITheme';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useContext } from 'react';\\\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\\\nimport { ITheme } from './ITheme';\\\\n\\\\n\\\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\\\n\\\\nexport default {\\\\n  title: 'ThemeProvider',\\\\n};\\\\n\\\\nconst LabRat = (): React.ReactElement => {\\\\n  return (\\\\n    <>\\\\n      <TransactionStatus\\\\n        status={TxStatus.PENDING}\\\\n        amount='0.1'\\\\n        symbol='BTC'\\\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\\\n      />\\\\n      <br />\\\\n      <PaymentRequest\\\\n        symbol='BTC'\\\\n        decimalPlaces={8}\\\\n        sellerName='Such Company LTD'\\\\n        logos={{\\\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\\\n        deadline={{\\\\n          dateLocale: 'en-US',\\\\n          datetime: new Date(),\\\\n          humanized: true,\\\\n        }}\\\\n        status={PaymentStatus.COMPLETE}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: 'Payment failed :(',\\\\n            pending: 'Waiting for payment',\\\\n            complete: 'Paid! Redirecting...',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const Presets: React.FC = () => {\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>\\\\n            <br />\\\\n            <small>\\\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\\\n              you refresh the page.\\\\n            </small>\\\\n          </p>\\\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\\\n          <button onClick={() => switchTo('light')}>Go light</button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\\nexport const CustomThemes: React.FC = () => {\\\\n  const customThemes: Record<string, Partial<ITheme>> = {\\\\n    wow: {\\\\n      primary: {\\\\n        backgroundColor: 'pink',\\\\n        color: 'yellow',\\\\n      },\\\\n    },\\\\n    veryOrganic: {\\\\n      primary: {\\\\n        backgroundColor: 'lightgreen',\\\\n        color: 'darkgreen',\\\\n      },\\\\n    },\\\\n  };\\\\n\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>.<br />\\\\n            <ul>\\\\n              <li>\\\\n                You can fully (or even partially) create your themes and enable them simply by\\\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\\\n              </li>\\\\n              <li>\\\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\\\n                persist if you refresh the page.\\\\n              </li>\\\\n              <li>\\\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\\\n              </li>\\\\n            </ul>\\\\n          </p>\\\\n          {availableThemes.map((key, i) => (\\\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\\\n              Go {key}\\\\n            </button>\\\\n          ))}\\\\n          <button\\\\n            onClick={() => {\\\\n              switchTo('fail');\\\\n              alert('Check your console, a warning is waiting for you ;)');\\\\n            }}\\\\n          >\\\\n            Go fail (will.. fail).\\\\n          </button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider customThemes={customThemes}>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"presets\\\":{\\\"startLoc\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":96},\\\"startBody\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":96}},\\\"custom-themes\\\":{\\\"startLoc\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":161},\\\"startBody\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":161}}}},},\\n  title: 'ThemeProvider',\\n};\\n\\nconst LabRat = (): React.ReactElement => {\\n  return (\\n    <>\\n      <TransactionStatus\\n        status={TxStatus.PENDING}\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n      <br />\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: new Date(),\\n          humanized: true,\\n        }}\\n        status={PaymentStatus.COMPLETE}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const Presets: React.FC = () => {\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>\\n            <br />\\n            <small>\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\n              you refresh the page.\\n            </small>\\n          </p>\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\n          <button onClick={() => switchTo('light')}>Go light</button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};;\\n\\nexport const CustomThemes: React.FC = () => {\\n  const customThemes: Record<string, Partial<ITheme>> = {\\n    wow: {\\n      primary: {\\n        backgroundColor: 'pink',\\n        color: 'yellow',\\n      },\\n    },\\n    veryOrganic: {\\n      primary: {\\n        backgroundColor: 'lightgreen',\\n        color: 'darkgreen',\\n      },\\n    },\\n  };\\n\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>.<br />\\n            <ul>\\n              <li>\\n                You can fully (or even partially) create your themes and enable them simply by\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\n              </li>\\n              <li>\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\n                persist if you refresh the page.\\n              </li>\\n              <li>\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\n              </li>\\n            </ul>\\n          </p>\\n          {availableThemes.map((key, i) => (\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\n              Go {key}\\n            </button>\\n          ))}\\n          <button\\n            onClick={() => {\\n              switchTo('fail');\\n              alert('Check your console, a warning is waiting for you ;)');\\n            }}\\n          >\\n            Go fail (will.. fail).\\n          </button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider customThemes={customThemes}>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Presets\":{\"startLoc\":{\"col\":33,\"line\":75},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":33,\"line\":75},\"endBody\":{\"col\":1,\"line\":103}},\"CustomThemes\":{\"startLoc\":{\"col\":38,\"line\":105},\"endLoc\":{\"col\":1,\"line\":168},\"startBody\":{\"col\":38,\"line\":105},\"endBody\":{\"col\":1,\"line\":168}}};\n\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React, { useContext } from 'react';\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\nimport { ITheme } from './ITheme';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {\\n  title: 'ThemeProvider',\\n};\\n\\nconst LabRat = (): React.ReactElement => {\\n  return (\\n    <>\\n      <TransactionStatus\\n        status={TxStatus.PENDING}\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n      <br />\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: new Date(),\\n          humanized: true,\\n        }}\\n        status={PaymentStatus.COMPLETE}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const Presets: React.FC = () => {\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>\\n            <br />\\n            <small>\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\n              you refresh the page.\\n            </small>\\n          </p>\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\n          <button onClick={() => switchTo('light')}>Go light</button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\\nexport const CustomThemes: React.FC = () => {\\n  const customThemes: Record<string, Partial<ITheme>> = {\\n    wow: {\\n      primary: {\\n        backgroundColor: 'pink',\\n        color: 'yellow',\\n      },\\n    },\\n    veryOrganic: {\\n      primary: {\\n        backgroundColor: 'lightgreen',\\n        color: 'darkgreen',\\n      },\\n    },\\n  };\\n\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>.<br />\\n            <ul>\\n              <li>\\n                You can fully (or even partially) create your themes and enable them simply by\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\n              </li>\\n              <li>\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\n                persist if you refresh the page.\\n              </li>\\n              <li>\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\n              </li>\\n            </ul>\\n          </p>\\n          {availableThemes.map((key, i) => (\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\n              Go {key}\\n            </button>\\n          ))}\\n          <button\\n            onClick={() => {\\n              switchTo('fail');\\n              alert('Check your console, a warning is waiting for you ;)');\\n            }}\\n          >\\n            Go fail (will.. fail).\\n          </button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider customThemes={customThemes}>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Presets\":{\"startLoc\":{\"col\":33,\"line\":68},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":33,\"line\":68},\"endBody\":{\"col\":1,\"line\":96}},\"CustomThemes\":{\"startLoc\":{\"col\":38,\"line\":98},\"endLoc\":{\"col\":1,\"line\":161},\"startBody\":{\"col\":38,\"line\":98},\"endBody\":{\"col\":1,\"line\":161}}};\nimport React, { useContext } from 'react';\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\nimport { PaymentRequest } from '../../components/PaymentRequest';\nimport { ThemeContext, ThemeProvider } from './themeProvider';\nimport { ITheme } from './ITheme';\n\n\nconst companyAsset = require('../../assets/fictiveCompany.png');\n\nexport default {parameters: {\"storySource\":{\"source\":\"\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\\"import React, { useContext } from 'react';\\\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\\\nimport { ITheme } from './ITheme';\\\\n\\\\n\\\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\\\n\\\\nexport default {\\\\n  title: 'ThemeProvider',\\\\n};\\\\n\\\\nconst LabRat = (): React.ReactElement => {\\\\n  return (\\\\n    <>\\\\n      <TransactionStatus\\\\n        status={TxStatus.PENDING}\\\\n        amount='0.1'\\\\n        symbol='BTC'\\\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\\\n      />\\\\n      <br />\\\\n      <PaymentRequest\\\\n        symbol='BTC'\\\\n        decimalPlaces={8}\\\\n        sellerName='Such Company LTD'\\\\n        logos={{\\\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\\\n        deadline={{\\\\n          dateLocale: 'en-US',\\\\n          datetime: new Date(),\\\\n          humanized: true,\\\\n        }}\\\\n        status={PaymentStatus.COMPLETE}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: 'Payment failed :(',\\\\n            pending: 'Waiting for payment',\\\\n            complete: 'Paid! Redirecting...',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const Presets: React.FC = () => {\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>\\\\n            <br />\\\\n            <small>\\\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\\\n              you refresh the page.\\\\n            </small>\\\\n          </p>\\\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\\\n          <button onClick={() => switchTo('light')}>Go light</button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\\nexport const CustomThemes: React.FC = () => {\\\\n  const customThemes: Record<string, Partial<ITheme>> = {\\\\n    wow: {\\\\n      primary: {\\\\n        backgroundColor: 'pink',\\\\n        color: 'yellow',\\\\n      },\\\\n    },\\\\n    veryOrganic: {\\\\n      primary: {\\\\n        backgroundColor: 'lightgreen',\\\\n        color: 'darkgreen',\\\\n      },\\\\n    },\\\\n  };\\\\n\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>.<br />\\\\n            <ul>\\\\n              <li>\\\\n                You can fully (or even partially) create your themes and enable them simply by\\\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\\\n              </li>\\\\n              <li>\\\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\\\n                persist if you refresh the page.\\\\n              </li>\\\\n              <li>\\\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\\\n              </li>\\\\n            </ul>\\\\n          </p>\\\\n          {availableThemes.map((key, i) => (\\\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\\\n              Go {key}\\\\n            </button>\\\\n          ))}\\\\n          <button\\\\n            onClick={() => {\\\\n              switchTo('fail');\\\\n              alert('Check your console, a warning is waiting for you ;)');\\\\n            }}\\\\n          >\\\\n            Go fail (will.. fail).\\\\n          </button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider customThemes={customThemes}>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\\"Presets\\\":{\\\"startLoc\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":96},\\\"startBody\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":96}},\\\"CustomThemes\\\":{\\\"startLoc\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":161},\\\"startBody\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":161}}};\\nimport React, { useContext } from 'react';\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\nimport { ITheme } from './ITheme';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useContext } from 'react';\\\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\\\nimport { ITheme } from './ITheme';\\\\n\\\\n\\\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\\\n\\\\nexport default {\\\\n  title: 'ThemeProvider',\\\\n};\\\\n\\\\nconst LabRat = (): React.ReactElement => {\\\\n  return (\\\\n    <>\\\\n      <TransactionStatus\\\\n        status={TxStatus.PENDING}\\\\n        amount='0.1'\\\\n        symbol='BTC'\\\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\\\n      />\\\\n      <br />\\\\n      <PaymentRequest\\\\n        symbol='BTC'\\\\n        decimalPlaces={8}\\\\n        sellerName='Such Company LTD'\\\\n        logos={{\\\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\\\n          company: companyAsset,\\\\n        }}\\\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\\\n            amount: 0.1,\\\\n          },\\\\n          {\\\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            txUrl:\\\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\\\n            amount: 0.1,\\\\n          },\\\\n        ]}\\\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\\\n        deadline={{\\\\n          dateLocale: 'en-US',\\\\n          datetime: new Date(),\\\\n          humanized: true,\\\\n        }}\\\\n        status={PaymentStatus.COMPLETE}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: 'Payment failed :(',\\\\n            pending: 'Waiting for payment',\\\\n            complete: 'Paid! Redirecting...',\\\\n          },\\\\n        }}\\\\n      />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\\nexport const Presets: React.FC = () => {\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>\\\\n            <br />\\\\n            <small>\\\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\\\n              you refresh the page.\\\\n            </small>\\\\n          </p>\\\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\\\n          <button onClick={() => switchTo('light')}>Go light</button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\\nexport const CustomThemes: React.FC = () => {\\\\n  const customThemes: Record<string, Partial<ITheme>> = {\\\\n    wow: {\\\\n      primary: {\\\\n        backgroundColor: 'pink',\\\\n        color: 'yellow',\\\\n      },\\\\n    },\\\\n    veryOrganic: {\\\\n      primary: {\\\\n        backgroundColor: 'lightgreen',\\\\n        color: 'darkgreen',\\\\n      },\\\\n    },\\\\n  };\\\\n\\\\n  const MyPaymentRequest: React.FC = () => {\\\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\\\n\\\\n    return (\\\\n      <>\\\\n        <div style={{ marginBottom: '20px' }}>\\\\n          <p>\\\\n            Theme is <b>{currentTheme.name}</b>.<br />\\\\n            <ul>\\\\n              <li>\\\\n                You can fully (or even partially) create your themes and enable them simply by\\\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\\\n              </li>\\\\n              <li>\\\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\\\n                persist if you refresh the page.\\\\n              </li>\\\\n              <li>\\\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\\\n              </li>\\\\n            </ul>\\\\n          </p>\\\\n          {availableThemes.map((key, i) => (\\\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\\\n              Go {key}\\\\n            </button>\\\\n          ))}\\\\n          <button\\\\n            onClick={() => {\\\\n              switchTo('fail');\\\\n              alert('Check your console, a warning is waiting for you ;)');\\\\n            }}\\\\n          >\\\\n            Go fail (will.. fail).\\\\n          </button>\\\\n        </div>\\\\n        <LabRat />\\\\n      </>\\\\n    );\\\\n  };\\\\n\\\\n  return (\\\\n    <ThemeProvider customThemes={customThemes}>\\\\n      <MyPaymentRequest />\\\\n    </ThemeProvider>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"presets\\\":{\\\"startLoc\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":96},\\\"startBody\\\":{\\\"col\\\":33,\\\"line\\\":68},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":96}},\\\"custom-themes\\\":{\\\"startLoc\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":161},\\\"startBody\\\":{\\\"col\\\":38,\\\"line\\\":98},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":161}}}},},\\n  title: 'ThemeProvider',\\n};\\n\\nconst LabRat = (): React.ReactElement => {\\n  return (\\n    <>\\n      <TransactionStatus\\n        status={TxStatus.PENDING}\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n      <br />\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: new Date(),\\n          humanized: true,\\n        }}\\n        status={PaymentStatus.COMPLETE}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const Presets: React.FC = () => {\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>\\n            <br />\\n            <small>\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\n              you refresh the page.\\n            </small>\\n          </p>\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\n          <button onClick={() => switchTo('light')}>Go light</button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};;\\n\\nexport const CustomThemes: React.FC = () => {\\n  const customThemes: Record<string, Partial<ITheme>> = {\\n    wow: {\\n      primary: {\\n        backgroundColor: 'pink',\\n        color: 'yellow',\\n      },\\n    },\\n    veryOrganic: {\\n      primary: {\\n        backgroundColor: 'lightgreen',\\n        color: 'darkgreen',\\n      },\\n    },\\n  };\\n\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>.<br />\\n            <ul>\\n              <li>\\n                You can fully (or even partially) create your themes and enable them simply by\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\n              </li>\\n              <li>\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\n                persist if you refresh the page.\\n              </li>\\n              <li>\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\n              </li>\\n            </ul>\\n          </p>\\n          {availableThemes.map((key, i) => (\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\n              Go {key}\\n            </button>\\n          ))}\\n          <button\\n            onClick={() => {\\n              switchTo('fail');\\n              alert('Check your console, a warning is waiting for you ;)');\\n            }}\\n          >\\n            Go fail (will.. fail).\\n          </button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider customThemes={customThemes}>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\\n\",\"locationsMap\":{\"presets\":{\"startLoc\":{\"col\":33,\"line\":75},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":33,\"line\":75},\"endBody\":{\"col\":1,\"line\":103}},\"custom-themes\":{\"startLoc\":{\"col\":38,\"line\":105},\"endLoc\":{\"col\":1,\"line\":168},\"startBody\":{\"col\":38,\"line\":105},\"endBody\":{\"col\":1,\"line\":168}}}},\"storySource\":{\"source\":\"import React, { useContext } from 'react';\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\nimport { ITheme } from './ITheme';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {\\n  title: 'ThemeProvider',\\n};\\n\\nconst LabRat = (): React.ReactElement => {\\n  return (\\n    <>\\n      <TransactionStatus\\n        status={TxStatus.PENDING}\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n      <br />\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: new Date(),\\n          humanized: true,\\n        }}\\n        status={PaymentStatus.COMPLETE}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const Presets: React.FC = () => {\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>\\n            <br />\\n            <small>\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\n              you refresh the page.\\n            </small>\\n          </p>\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\n          <button onClick={() => switchTo('light')}>Go light</button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\\nexport const CustomThemes: React.FC = () => {\\n  const customThemes: Record<string, Partial<ITheme>> = {\\n    wow: {\\n      primary: {\\n        backgroundColor: 'pink',\\n        color: 'yellow',\\n      },\\n    },\\n    veryOrganic: {\\n      primary: {\\n        backgroundColor: 'lightgreen',\\n        color: 'darkgreen',\\n      },\\n    },\\n  };\\n\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>.<br />\\n            <ul>\\n              <li>\\n                You can fully (or even partially) create your themes and enable them simply by\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\n              </li>\\n              <li>\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\n                persist if you refresh the page.\\n              </li>\\n              <li>\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\n              </li>\\n            </ul>\\n          </p>\\n          {availableThemes.map((key, i) => (\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\n              Go {key}\\n            </button>\\n          ))}\\n          <button\\n            onClick={() => {\\n              switchTo('fail');\\n              alert('Check your console, a warning is waiting for you ;)');\\n            }}\\n          >\\n            Go fail (will.. fail).\\n          </button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider customThemes={customThemes}>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\",\"locationsMap\":{\"presets\":{\"startLoc\":{\"col\":33,\"line\":68},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":33,\"line\":68},\"endBody\":{\"col\":1,\"line\":96}},\"custom-themes\":{\"startLoc\":{\"col\":38,\"line\":98},\"endLoc\":{\"col\":1,\"line\":161},\"startBody\":{\"col\":38,\"line\":98},\"endBody\":{\"col\":1,\"line\":161}}}},},\n  title: 'ThemeProvider',\n};\n\nconst LabRat = (): React.ReactElement => {\n  return (\n    <>\n      <TransactionStatus\n        status={TxStatus.PENDING}\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n      <br />\n      <PaymentRequest\n        symbol='BTC'\n        decimalPlaces={8}\n        sellerName='Such Company LTD'\n        logos={{\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n          company: companyAsset,\n        }}\n        address='1BitcoinEaterAddressDontSendf59kuE'\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            amount: 0.1,\n          },\n          {\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            amount: 0.1,\n          },\n        ]}\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n        deadline={{\n          dateLocale: 'en-US',\n          datetime: new Date(),\n          humanized: true,\n        }}\n        status={PaymentStatus.COMPLETE}\n        strings={{\n          txStatus: {\n            failed: 'Payment failed :(',\n            pending: 'Waiting for payment',\n            complete: 'Paid! Redirecting...',\n          },\n        }}\n      />\n    </>\n  );\n};\n\nexport const Presets: React.FC = () => {\n  const MyPaymentRequest: React.FC = () => {\n    const { currentTheme, switchTo } = useContext(ThemeContext);\n\n    return (\n      <>\n        <div style={{ marginBottom: '20px' }}>\n          <p>\n            Theme is <b>{currentTheme.name}</b>\n            <br />\n            <small>\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\n              you refresh the page.\n            </small>\n          </p>\n          <button onClick={() => switchTo('dark')}>Go dark</button>\n          <button onClick={() => switchTo('light')}>Go light</button>\n        </div>\n        <LabRat />\n      </>\n    );\n  };\n\n  return (\n    <ThemeProvider>\n      <MyPaymentRequest />\n    </ThemeProvider>\n  );\n};;;\n\nexport const CustomThemes: React.FC = () => {\n  const customThemes: Record<string, Partial<ITheme>> = {\n    wow: {\n      primary: {\n        backgroundColor: 'pink',\n        color: 'yellow',\n      },\n    },\n    veryOrganic: {\n      primary: {\n        backgroundColor: 'lightgreen',\n        color: 'darkgreen',\n      },\n    },\n  };\n\n  const MyPaymentRequest: React.FC = () => {\n    const { currentTheme, switchTo } = useContext(ThemeContext);\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\n\n    return (\n      <>\n        <div style={{ marginBottom: '20px' }}>\n          <p>\n            Theme is <b>{currentTheme.name}</b>.<br />\n            <ul>\n              <li>\n                You can fully (or even partially) create your themes and enable them simply by\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\n              </li>\n              <li>\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\n                persist if you refresh the page.\n              </li>\n              <li>\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\n              </li>\n            </ul>\n          </p>\n          {availableThemes.map((key, i) => (\n            <button key={i.toString()} onClick={() => switchTo(key)}>\n              Go {key}\n            </button>\n          ))}\n          <button\n            onClick={() => {\n              switchTo('fail');\n              alert('Check your console, a warning is waiting for you ;)');\n            }}\n          >\n            Go fail (will.. fail).\n          </button>\n        </div>\n        <LabRat />\n      </>\n    );\n  };\n\n  return (\n    <ThemeProvider customThemes={customThemes}>\n      <MyPaymentRequest />\n    </ThemeProvider>\n  );\n};\n\n",locationsMap:{presets:{startLoc:{col:33,line:82},endLoc:{col:1,line:110},startBody:{col:33,line:82},endBody:{col:1,line:110}},"custom-themes":{startLoc:{col:38,line:112},endLoc:{col:1,line:175},startBody:{col:38,line:112},endBody:{col:1,line:175}}}}},_defineProperty(_parameters,"storySource",{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React, { useContext } from 'react';\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\nimport { ITheme } from './ITheme';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {\\n  title: 'ThemeProvider',\\n};\\n\\nconst LabRat = (): React.ReactElement => {\\n  return (\\n    <>\\n      <TransactionStatus\\n        status={TxStatus.PENDING}\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n      <br />\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: new Date(),\\n          humanized: true,\\n        }}\\n        status={PaymentStatus.COMPLETE}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const Presets: React.FC = () => {\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>\\n            <br />\\n            <small>\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\n              you refresh the page.\\n            </small>\\n          </p>\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\n          <button onClick={() => switchTo('light')}>Go light</button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\\nexport const CustomThemes: React.FC = () => {\\n  const customThemes: Record<string, Partial<ITheme>> = {\\n    wow: {\\n      primary: {\\n        backgroundColor: 'pink',\\n        color: 'yellow',\\n      },\\n    },\\n    veryOrganic: {\\n      primary: {\\n        backgroundColor: 'lightgreen',\\n        color: 'darkgreen',\\n      },\\n    },\\n  };\\n\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>.<br />\\n            <ul>\\n              <li>\\n                You can fully (or even partially) create your themes and enable them simply by\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\n              </li>\\n              <li>\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\n                persist if you refresh the page.\\n              </li>\\n              <li>\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\n              </li>\\n            </ul>\\n          </p>\\n          {availableThemes.map((key, i) => (\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\n              Go {key}\\n            </button>\\n          ))}\\n          <button\\n            onClick={() => {\\n              switchTo('fail');\\n              alert('Check your console, a warning is waiting for you ;)');\\n            }}\\n          >\\n            Go fail (will.. fail).\\n          </button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider customThemes={customThemes}>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Presets\":{\"startLoc\":{\"col\":33,\"line\":68},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":33,\"line\":68},\"endBody\":{\"col\":1,\"line\":96}},\"CustomThemes\":{\"startLoc\":{\"col\":38,\"line\":98},\"endLoc\":{\"col\":1,\"line\":161},\"startBody\":{\"col\":38,\"line\":98},\"endBody\":{\"col\":1,\"line\":161}}};\nimport React, { useContext } from 'react';\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\nimport { PaymentRequest } from '../../components/PaymentRequest';\nimport { ThemeContext, ThemeProvider } from './themeProvider';\nimport { ITheme } from './ITheme';\n\n\nconst companyAsset = require('../../assets/fictiveCompany.png');\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useContext } from 'react';\\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\\nimport { PaymentRequest } from '../../components/PaymentRequest';\\nimport { ThemeContext, ThemeProvider } from './themeProvider';\\nimport { ITheme } from './ITheme';\\n\\n\\nconst companyAsset = require('../../assets/fictiveCompany.png');\\n\\nexport default {\\n  title: 'ThemeProvider',\\n};\\n\\nconst LabRat = (): React.ReactElement => {\\n  return (\\n    <>\\n      <TransactionStatus\\n        status={TxStatus.PENDING}\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n      <br />\\n      <PaymentRequest\\n        symbol='BTC'\\n        decimalPlaces={8}\\n        sellerName='Such Company LTD'\\n        logos={{\\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\\n          company: companyAsset,\\n        }}\\n        address='1BitcoinEaterAddressDontSendf59kuE'\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\\n            amount: 0.1,\\n          },\\n          {\\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            txUrl:\\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\\n            amount: 0.1,\\n          },\\n        ]}\\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\\n        deadline={{\\n          dateLocale: 'en-US',\\n          datetime: new Date(),\\n          humanized: true,\\n        }}\\n        status={PaymentStatus.COMPLETE}\\n        strings={{\\n          txStatus: {\\n            failed: 'Payment failed :(',\\n            pending: 'Waiting for payment',\\n            complete: 'Paid! Redirecting...',\\n          },\\n        }}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const Presets: React.FC = () => {\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>\\n            <br />\\n            <small>\\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\\n              you refresh the page.\\n            </small>\\n          </p>\\n          <button onClick={() => switchTo('dark')}>Go dark</button>\\n          <button onClick={() => switchTo('light')}>Go light</button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\\nexport const CustomThemes: React.FC = () => {\\n  const customThemes: Record<string, Partial<ITheme>> = {\\n    wow: {\\n      primary: {\\n        backgroundColor: 'pink',\\n        color: 'yellow',\\n      },\\n    },\\n    veryOrganic: {\\n      primary: {\\n        backgroundColor: 'lightgreen',\\n        color: 'darkgreen',\\n      },\\n    },\\n  };\\n\\n  const MyPaymentRequest: React.FC = () => {\\n    const { currentTheme, switchTo } = useContext(ThemeContext);\\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\\n\\n    return (\\n      <>\\n        <div style={{ marginBottom: '20px' }}>\\n          <p>\\n            Theme is <b>{currentTheme.name}</b>.<br />\\n            <ul>\\n              <li>\\n                You can fully (or even partially) create your themes and enable them simply by\\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\\n              </li>\\n              <li>\\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\\n                persist if you refresh the page.\\n              </li>\\n              <li>\\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\\n              </li>\\n            </ul>\\n          </p>\\n          {availableThemes.map((key, i) => (\\n            <button key={i.toString()} onClick={() => switchTo(key)}>\\n              Go {key}\\n            </button>\\n          ))}\\n          <button\\n            onClick={() => {\\n              switchTo('fail');\\n              alert('Check your console, a warning is waiting for you ;)');\\n            }}\\n          >\\n            Go fail (will.. fail).\\n          </button>\\n        </div>\\n        <LabRat />\\n      </>\\n    );\\n  };\\n\\n  return (\\n    <ThemeProvider customThemes={customThemes}>\\n      <MyPaymentRequest />\\n    </ThemeProvider>\\n  );\\n};\\n\",\"locationsMap\":{\"presets\":{\"startLoc\":{\"col\":33,\"line\":68},\"endLoc\":{\"col\":1,\"line\":96},\"startBody\":{\"col\":33,\"line\":68},\"endBody\":{\"col\":1,\"line\":96}},\"custom-themes\":{\"startLoc\":{\"col\":38,\"line\":98},\"endLoc\":{\"col\":1,\"line\":161},\"startBody\":{\"col\":38,\"line\":98},\"endBody\":{\"col\":1,\"line\":161}}}},},\n  title: 'ThemeProvider',\n};\n\nconst LabRat = (): React.ReactElement => {\n  return (\n    <>\n      <TransactionStatus\n        status={TxStatus.PENDING}\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n      <br />\n      <PaymentRequest\n        symbol='BTC'\n        decimalPlaces={8}\n        sellerName='Such Company LTD'\n        logos={{\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n          company: companyAsset,\n        }}\n        address='1BitcoinEaterAddressDontSendf59kuE'\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            amount: 0.1,\n          },\n          {\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            amount: 0.1,\n          },\n        ]}\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n        deadline={{\n          dateLocale: 'en-US',\n          datetime: new Date(),\n          humanized: true,\n        }}\n        status={PaymentStatus.COMPLETE}\n        strings={{\n          txStatus: {\n            failed: 'Payment failed :(',\n            pending: 'Waiting for payment',\n            complete: 'Paid! Redirecting...',\n          },\n        }}\n      />\n    </>\n  );\n};\n\nexport const Presets: React.FC = () => {\n  const MyPaymentRequest: React.FC = () => {\n    const { currentTheme, switchTo } = useContext(ThemeContext);\n\n    return (\n      <>\n        <div style={{ marginBottom: '20px' }}>\n          <p>\n            Theme is <b>{currentTheme.name}</b>\n            <br />\n            <small>\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\n              you refresh the page.\n            </small>\n          </p>\n          <button onClick={() => switchTo('dark')}>Go dark</button>\n          <button onClick={() => switchTo('light')}>Go light</button>\n        </div>\n        <LabRat />\n      </>\n    );\n  };\n\n  return (\n    <ThemeProvider>\n      <MyPaymentRequest />\n    </ThemeProvider>\n  );\n};;\n\nexport const CustomThemes: React.FC = () => {\n  const customThemes: Record<string, Partial<ITheme>> = {\n    wow: {\n      primary: {\n        backgroundColor: 'pink',\n        color: 'yellow',\n      },\n    },\n    veryOrganic: {\n      primary: {\n        backgroundColor: 'lightgreen',\n        color: 'darkgreen',\n      },\n    },\n  };\n\n  const MyPaymentRequest: React.FC = () => {\n    const { currentTheme, switchTo } = useContext(ThemeContext);\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\n\n    return (\n      <>\n        <div style={{ marginBottom: '20px' }}>\n          <p>\n            Theme is <b>{currentTheme.name}</b>.<br />\n            <ul>\n              <li>\n                You can fully (or even partially) create your themes and enable them simply by\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\n              </li>\n              <li>\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\n                persist if you refresh the page.\n              </li>\n              <li>\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\n              </li>\n            </ul>\n          </p>\n          {availableThemes.map((key, i) => (\n            <button key={i.toString()} onClick={() => switchTo(key)}>\n              Go {key}\n            </button>\n          ))}\n          <button\n            onClick={() => {\n              switchTo('fail');\n              alert('Check your console, a warning is waiting for you ;)');\n            }}\n          >\n            Go fail (will.. fail).\n          </button>\n        </div>\n        <LabRat />\n      </>\n    );\n  };\n\n  return (\n    <ThemeProvider customThemes={customThemes}>\n      <MyPaymentRequest />\n    </ThemeProvider>\n  );\n};\n\n",locationsMap:{presets:{startLoc:{col:33,line:75},endLoc:{col:1,line:103},startBody:{col:33,line:75},endBody:{col:1,line:103}},"custom-themes":{startLoc:{col:38,line:105},endLoc:{col:1,line:168},startBody:{col:38,line:105},endBody:{col:1,line:168}}}}),_defineProperty(_parameters,"storySource",{source:"import React, { useContext } from 'react';\nimport { PaymentStatus } from '../../components/PaymentRequest/enums/paymentStatus';\nimport { TransactionStatus, TxStatus } from '../../components/TransactionStatus';\nimport { PaymentRequest } from '../../components/PaymentRequest';\nimport { ThemeContext, ThemeProvider } from './themeProvider';\nimport { ITheme } from './ITheme';\n\n\nconst companyAsset = require('../../assets/fictiveCompany.png');\n\nexport default {\n  title: 'ThemeProvider',\n};\n\nconst LabRat = (): React.ReactElement => {\n  return (\n    <>\n      <TransactionStatus\n        status={TxStatus.PENDING}\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n      <br />\n      <PaymentRequest\n        symbol='BTC'\n        decimalPlaces={8}\n        sellerName='Such Company LTD'\n        logos={{\n          coin: 'https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg',\n          company: companyAsset,\n        }}\n        address='1BitcoinEaterAddressDontSendf59kuE'\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            amount: 0.1,\n          },\n          {\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            txUrl:\n              'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            amount: 0.1,\n          },\n        ]}\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n        deadline={{\n          dateLocale: 'en-US',\n          datetime: new Date(),\n          humanized: true,\n        }}\n        status={PaymentStatus.COMPLETE}\n        strings={{\n          txStatus: {\n            failed: 'Payment failed :(',\n            pending: 'Waiting for payment',\n            complete: 'Paid! Redirecting...',\n          },\n        }}\n      />\n    </>\n  );\n};\n\nexport const Presets: React.FC = () => {\n  const MyPaymentRequest: React.FC = () => {\n    const { currentTheme, switchTo } = useContext(ThemeContext);\n\n    return (\n      <>\n        <div style={{ marginBottom: '20px' }}>\n          <p>\n            Theme is <b>{currentTheme.name}</b>\n            <br />\n            <small>\n              It&apos;s saved into your browser&apos;s localStorage, so this theme will persist if\n              you refresh the page.\n            </small>\n          </p>\n          <button onClick={() => switchTo('dark')}>Go dark</button>\n          <button onClick={() => switchTo('light')}>Go light</button>\n        </div>\n        <LabRat />\n      </>\n    );\n  };\n\n  return (\n    <ThemeProvider>\n      <MyPaymentRequest />\n    </ThemeProvider>\n  );\n};\n\nexport const CustomThemes: React.FC = () => {\n  const customThemes: Record<string, Partial<ITheme>> = {\n    wow: {\n      primary: {\n        backgroundColor: 'pink',\n        color: 'yellow',\n      },\n    },\n    veryOrganic: {\n      primary: {\n        backgroundColor: 'lightgreen',\n        color: 'darkgreen',\n      },\n    },\n  };\n\n  const MyPaymentRequest: React.FC = () => {\n    const { currentTheme, switchTo } = useContext(ThemeContext);\n    const availableThemes = [...Object.keys(customThemes), ...['light', 'dark']];\n\n    return (\n      <>\n        <div style={{ marginBottom: '20px' }}>\n          <p>\n            Theme is <b>{currentTheme.name}</b>.<br />\n            <ul>\n              <li>\n                You can fully (or even partially) create your themes and enable them simply by\n                proving these ones to the <i>&lt;ThemeProvider /&gt;.</i>\n              </li>\n              <li>\n                The chosen theme is saved into your browser&apos;s localStorage, so this theme will\n                persist if you refresh the page.\n              </li>\n              <li>\n                Also, you can trigger page&apos;s dark mode on Storybook, check the button above ☝️\n              </li>\n            </ul>\n          </p>\n          {availableThemes.map((key, i) => (\n            <button key={i.toString()} onClick={() => switchTo(key)}>\n              Go {key}\n            </button>\n          ))}\n          <button\n            onClick={() => {\n              switchTo('fail');\n              alert('Check your console, a warning is waiting for you ;)');\n            }}\n          >\n            Go fail (will.. fail).\n          </button>\n        </div>\n        <LabRat />\n      </>\n    );\n  };\n\n  return (\n    <ThemeProvider customThemes={customThemes}>\n      <MyPaymentRequest />\n    </ThemeProvider>\n  );\n};\n",locationsMap:{presets:{startLoc:{col:33,line:68},endLoc:{col:1,line:96},startBody:{col:33,line:68},endBody:{col:1,line:96}},"custom-themes":{startLoc:{col:38,line:98},endLoc:{col:1,line:161},startBody:{col:38,line:98},endBody:{col:1,line:161}}}}),_parameters),title:"ThemeProvider"};var LabRat=function LabRat(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_components_TransactionStatus__WEBPACK_IMPORTED_MODULE_19__.a,{status:_components_TransactionStatus__WEBPACK_IMPORTED_MODULE_19__.b.PENDING,amount:"0.1",symbol:"BTC",txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("br",{}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_components_PaymentRequest__WEBPACK_IMPORTED_MODULE_20__.a,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",deadline:{dateLocale:"en-US",datetime:new Date,humanized:!0},status:_components_PaymentRequest_enums_paymentStatus__WEBPACK_IMPORTED_MODULE_18__.a.COMPLETE,strings:{txStatus:{failed:"Payment failed :(",pending:"Waiting for payment",complete:"Paid! Redirecting..."}}})]})},Presets=function Presets(){var MyPaymentRequest=function MyPaymentRequest(){var _useContext=Object(react__WEBPACK_IMPORTED_MODULE_17__.useContext)(_themeProvider__WEBPACK_IMPORTED_MODULE_21__.a),currentTheme=_useContext.currentTheme,switchTo=_useContext.switchTo;return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("div",{style:{marginBottom:"20px"},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("p",{children:["Theme is ",Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("b",{children:currentTheme.name}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("br",{}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("small",{children:"It's saved into your browser's localStorage, so this theme will persist if you refresh the page."})]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("button",{onClick:function onClick(){return switchTo("dark")},children:"Go dark"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("button",{onClick:function onClick(){return switchTo("light")},children:"Go light"})]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(LabRat,{})]})};return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_themeProvider__WEBPACK_IMPORTED_MODULE_21__.b,{children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(MyPaymentRequest,{})})};Presets.displayName="Presets";var CustomThemes=function CustomThemes(){var customThemes={wow:{primary:{backgroundColor:"pink",color:"yellow"}},veryOrganic:{primary:{backgroundColor:"lightgreen",color:"darkgreen"}}},MyPaymentRequest=function MyPaymentRequest(){var _useContext2=Object(react__WEBPACK_IMPORTED_MODULE_17__.useContext)(_themeProvider__WEBPACK_IMPORTED_MODULE_21__.a),currentTheme=_useContext2.currentTheme,switchTo=_useContext2.switchTo,availableThemes=[].concat(_toConsumableArray(Object.keys(customThemes)),["light","dark"]);return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("div",{style:{marginBottom:"20px"},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("p",{children:["Theme is ",Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("b",{children:currentTheme.name}),".",Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("br",{}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("ul",{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("li",{children:["You can fully (or even partially) create your themes and enable them simply by proving these ones to the ",Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("i",{children:"<ThemeProvider />."})]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("li",{children:"The chosen theme is saved into your browser's localStorage, so this theme will persist if you refresh the page."}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("li",{children:"Also, you can trigger page's dark mode on Storybook, check the button above ☝️"})]})]}),availableThemes.map((function(key,i){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("button",{onClick:function onClick(){return switchTo(key)},children:["Go ",key]},i.toString())})),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("button",{onClick:function onClick(){switchTo("fail"),alert("Check your console, a warning is waiting for you ;)")},children:"Go fail (will.. fail)."})]}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(LabRat,{})]})};return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_themeProvider__WEBPACK_IMPORTED_MODULE_21__.b,{customThemes:customThemes,children:Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(MyPaymentRequest,{})})};CustomThemes.displayName="CustomThemes";try{Presets.displayName="Presets",Presets.__docgenInfo={description:"",displayName:"Presets",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/theme/themeProvider.stories.tsx#Presets"]={docgenInfo:Presets.__docgenInfo,name:"Presets",path:"src/providers/theme/themeProvider.stories.tsx#Presets"})}catch(__react_docgen_typescript_loader_error){}try{CustomThemes.displayName="CustomThemes",CustomThemes.__docgenInfo={description:"",displayName:"CustomThemes",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/theme/themeProvider.stories.tsx#CustomThemes"]={docgenInfo:CustomThemes.__docgenInfo,name:"CustomThemes",path:"src/providers/theme/themeProvider.stories.tsx#CustomThemes"})}catch(__react_docgen_typescript_loader_error){}},121:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return stroke})),__webpack_require__.d(__webpack_exports__,"b",(function(){return infiniteProgress})),__webpack_require__.d(__webpack_exports__,"a",(function(){return finiteProgress}));__webpack_require__(9),__webpack_require__(32),__webpack_require__(31);var _templateObject,_templateObject2,_templateObject3,_templateObject4,styled_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(14);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var stroke=Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.d)(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n\t100% {\n\t\tstroke-dashoffset: 0;\n\t}\n"]))),infiniteProgress=(Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.d)(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n\t0%, 100% {\n\t\ttransform: none;\n\t}\n\n\t50% {\n\t\ttransform: scale3d(1.1, 1.1, 1);\n\t}\n"]))),Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.d)(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n\t0% { left: -200%; right: 100%; }\n  \t50% { left: 107%; right: -8%; }\n  \t100% { left: 107%; right: -8%; }\n"])))),finiteProgress=Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.d)(_templateObject4||(_templateObject4=_taggedTemplateLiteral(["\n\t0% {width: 0%; left: 0; right: 0 }\n\t50% { width: 100%; left: 0; right: 0 }\n\t100% { width: 100%; left: 0; right: 0 }\n"])))},122:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return defaultTheme})),__webpack_require__.d(__webpack_exports__,"a",(function(){return ThemeContext})),__webpack_require__.d(__webpack_exports__,"b",(function(){return themeProvider_ThemeProvider}));__webpack_require__(20),__webpack_require__(6),__webpack_require__(50),__webpack_require__(10),__webpack_require__(41),__webpack_require__(42),__webpack_require__(5),__webpack_require__(17),__webpack_require__(4),__webpack_require__(12),__webpack_require__(11),__webpack_require__(19),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(9),__webpack_require__(26);var react=__webpack_require__(0),react_default=__webpack_require__.n(react),styled_components_browser_esm=__webpack_require__(14),defaultThemes={dark:{primary:{backgroundColor:"#121212",color:"#ffffff",rule:"rgba(255, 255, 255, 0.2)",boxShadow:"0 3px 28px rgba(255, 255, 255, 0.1)"}},light:{primary:{backgroundColor:"#ffffff",color:"#000000",rule:"rgba(0, 0, 0, 0.2)",boxShadow:"0 12px 28px rgba(0, 0, 0, 0.1)"}}};__webpack_require__(36);function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}var isObject=function isObject(item){return item&&"object"===_typeof(item)&&!Array.isArray(item)},jsx_runtime=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var defaultTheme={name:"light",palette:defaultThemes.light},ThemeContext=react_default.a.createContext({currentTheme:defaultTheme,switchTo:function switchTo(){}}),themeProvider_ThemeProvider=function ThemeProvider(_ref){var customThemes=_ref.customThemes,children=_ref.children,_useState2=_slicedToArray(Object(react.useState)(defaultThemes),2),availableThemes=_useState2[0],setAvailableThemes=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(defaultTheme),2),currentTheme=_useState4[0],setCurrentTheme=_useState4[1],setViableThemeOrDefault=Object(react.useCallback)((function(themeName){var requestedTheme=availableThemes[themeName],theme=defaultTheme;return requestedTheme?theme={name:themeName,palette:requestedTheme}:console.warn('[WARN] Adoption Theme - requested theme "'.concat(themeName,'" was not found. Defaulting to "').concat(theme.name,"\" preset.\n\nAdd your theme to 'customThemes' property on <ThemeProvider>.\nAvailable themes: ").concat(Object.keys(availableThemes).join(", "))),setCurrentTheme(theme),[theme.name,theme.palette]}),[availableThemes]);Object(react.useEffect)((function(){var _localStorage$getItem,theme=null!==(_localStorage$getItem=localStorage.getItem("adoption-theme"))&&void 0!==_localStorage$getItem?_localStorage$getItem:"light";setViableThemeOrDefault(theme)}),[]),Object(react.useEffect)((function(){if(customThemes&&0!==Object.keys(customThemes).length){var filledCustomThemes={};Object.keys(customThemes).forEach((function(key){var viableTheme=function mergeDeep(target,source){var output=Object.assign({},target);return isObject(target)&&isObject(source)&&Object.keys(source).forEach((function(key){isObject(source[key])&&key in target?output[key]=mergeDeep(target[key],source[key]):Object.assign(output,_defineProperty({},key,source[key]))})),output}(defaultTheme.palette,customThemes[key]);filledCustomThemes[key]=viableTheme})),setAvailableThemes((function(prevProps){return Object.assign({},prevProps,filledCustomThemes)}))}}),[customThemes]);return Object(jsx_runtime.jsx)(ThemeContext.Provider,{value:{currentTheme:currentTheme,switchTo:function switchTo(nextTheme){var name=_slicedToArray(setViableThemeOrDefault(nextTheme),1)[0];localStorage.setItem("adoption-theme",name)}},children:Object(jsx_runtime.jsx)(styled_components_browser_esm.a,{theme:currentTheme.palette,children:children})})};themeProvider_ThemeProvider.displayName="ThemeProvider";try{themeProvider_ThemeProvider.displayName="ThemeProvider",themeProvider_ThemeProvider.__docgenInfo={description:"",displayName:"ThemeProvider",props:{customThemes:{defaultValue:null,description:"",name:"customThemes",required:!1,type:{name:"Record<string, Partial<ITheme>>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/providers/theme/themeProvider.tsx#ThemeProvider"]={docgenInfo:themeProvider_ThemeProvider.__docgenInfo,name:"ThemeProvider",path:"src/providers/theme/themeProvider.tsx#ThemeProvider"})}catch(__react_docgen_typescript_loader_error){}},170:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return AdaptiveSpan}));__webpack_require__(41),__webpack_require__(42),__webpack_require__(48),__webpack_require__(27),__webpack_require__(438),__webpack_require__(23),__webpack_require__(11),__webpack_require__(21),__webpack_require__(5),__webpack_require__(0);var dompurify__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(496),dompurify__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_10__),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(1),AdaptiveSpan=function AdaptiveSpan(_ref){var text=_ref.text,mapping=_ref.mapping,style=_ref.style,showTitle=_ref.showTitle,_toTag=function _toTag(value,style){return"bold"===style?"<b>".concat(value,"</b>"):"<i>".concat(value,"</i>")},html=text;style&&(html=_toTag(html,style)),null==mapping||mapping.forEach((function(map){var _map$value;map.value=null!==(_map$value=map.value)&&void 0!==_map$value?_map$value:"",text=text.replace(new RegExp(map.tag,"g"),map.value.toString()),map.style&&(map.value=_toTag(map.value,map.style)),html=html.replace(new RegExp(map.tag,"g"),map.value.toString())}));var props={};return showTitle&&(props=Object.assign({},props,{title:text})),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)("span",Object.assign({},props,{dangerouslySetInnerHTML:{__html:dompurify__WEBPACK_IMPORTED_MODULE_10___default.a.sanitize(html)}}))};AdaptiveSpan.displayName="AdaptiveSpan";try{AdaptiveSpan.displayName="AdaptiveSpan",AdaptiveSpan.__docgenInfo={description:"",displayName:"AdaptiveSpan",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"TextStyle"}},showTitle:{defaultValue:null,description:"",name:"showTitle",required:!1,type:{name:"boolean"}},mapping:{defaultValue:null,description:"",name:"mapping",required:!1,type:{name:"IMapping[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/AdaptiveSpan/index.tsx#AdaptiveSpan"]={docgenInfo:AdaptiveSpan.__docgenInfo,name:"AdaptiveSpan",path:"src/components/common/AdaptiveSpan/index.tsx#AdaptiveSpan"})}catch(__react_docgen_typescript_loader_error){}},224:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return shortenHash}));__webpack_require__(20);var shortenHash=function shortenHash(hash,length){return hash.length<=2*length?hash:"".concat(hash.substr(0,length),"...").concat(hash.substr(hash.length-length,hash.length-1))}},35:function(module,__webpack_exports__,__webpack_require__){"use strict";var _themeProvider__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(122);__webpack_exports__.a=function _(p,depth,name){return("primary"in p||void 0?p:_themeProvider__WEBPACK_IMPORTED_MODULE_0__.c.palette)[depth][name]}},45:function(module,__webpack_exports__,__webpack_require__){"use strict";var TxStatus;__webpack_require__.d(__webpack_exports__,"a",(function(){return TxStatus})),function(TxStatus){TxStatus.COMPLETED="completed",TxStatus.PENDING="pending",TxStatus.UNKNOWN="unknown",TxStatus.FAILED="failed"}(TxStatus||(TxStatus={}))},484:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/fictiveCompany.6ff5374a.png"},499:function(module,exports,__webpack_require__){__webpack_require__(500),__webpack_require__(662),__webpack_require__(663),__webpack_require__(821),__webpack_require__(1039),__webpack_require__(1072),__webpack_require__(1077),__webpack_require__(1079),module.exports=__webpack_require__(1097)},55:function(module,__webpack_exports__,__webpack_require__){"use strict";var PaymentStatus;__webpack_require__.d(__webpack_exports__,"a",(function(){return PaymentStatus})),function(PaymentStatus){PaymentStatus.COMPLETE="complete",PaymentStatus.PENDING="pending",PaymentStatus.FAILED="failed"}(PaymentStatus||(PaymentStatus={}))},57:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return TransactionStatus_TransactionStatus})),__webpack_require__.d(__webpack_exports__,"b",(function(){return txStatus.a}));__webpack_require__(5),__webpack_require__(9),__webpack_require__(17),__webpack_require__(4),__webpack_require__(12),__webpack_require__(11),__webpack_require__(19),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(6),__webpack_require__(26);var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15,react=__webpack_require__(0),styled_components_browser_esm=(__webpack_require__(32),__webpack_require__(31),__webpack_require__(14)),animations=__webpack_require__(121),styleFetcher=__webpack_require__(35),defaultColorMap={completed:"#f08a5d",pending:"deepskyblue",unknown:"grey",failed:"red"},txStatus=__webpack_require__(45);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var Container=styled_components_browser_esm.c.div(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  max-width: 375px;\n  max-height: 50px;\n  text-align: left;\n  box-shadow: ",";\n  background-color: ",";\n  border-radius: 3px;\n  font-size: 12px;\n  overflow: hidden;\n  transition: max-height 0.4s;\n\n  ","\n\n  ","\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","boxShadow")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")}),(function(p){return p.hasDate&&"\n    \tmax-height: 60px;\n\t"}),(function(p){return p.showDetails&&"\n\t\tmax-height: 500px;\n\t"})),IconWrapper=styled_components_browser_esm.c.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n  display: inline-block;\n  width: 25px;\n  float: right;\n  ","\n\n  svg {\n    stroke: ",";\n  }\n"])),(function(p){return p.clickable&&"\n\t\tcursor: pointer;\n\t"}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")})),Row=styled_components_browser_esm.c.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: 5fr 5fr;\n\n  ","\n"])),(function(p){return p.showSide&&"\n\t\tgrid-template-columns: 4fr 4fr 2fr;\n\t"})),Amount=styled_components_browser_esm.c.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral(["\n  color: ",";\n  padding: 0 10px 0 10px;\n  display: inline-block;\n  margin-right: 5px;\n\n  span.amount,\n  p {\n    display: inline-block;\n  }\n\n  span.amount {\n    font-size: 18px;\n    margin: 10px 3px 15px 0;\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")})),style_Date=styled_components_browser_esm.c.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral(["\n  font-size: 10px;\n  position: absolute;\n  bottom: -4px;\n  width: 100%;\n  height: 20px;\n  color: ",";\n  background-color: ",";\n\n  > span {\n    margin: 0 15px 0 10px;\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","rule")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")})),Status=styled_components_browser_esm.c.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral(["\n  width: 60%;\n  align-self: center;\n  line-height: 1.8em;\n  font-size: 14px;\n  margin: 2px 0 2px 0;\n  color: ",";\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")})),Side=styled_components_browser_esm.c.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  align-items: center;\n\n  div:not(:first-of-type) {\n    margin: 0 0 0 10px;\n  }\n\n  &:after {\n    content: '';\n    height: 50%;\n    width: 1.3px;\n    left: 0;\n    position: absolute;\n    background-color: ",";\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","rule")})),style_getAnimation=function _getAnimation(animation,bgColor){switch(animation){case txStatus.a.FAILED:case txStatus.a.UNKNOWN:case txStatus.a.COMPLETED:return function _finiteAnim(bgColor){return Object(styled_components_browser_esm.b)(_templateObject9||(_templateObject9=_taggedTemplateLiteral(["\n  transition: width 0.3s linear;\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    background-color: ",";\n    top: 0;\n    left: 0;\n    bottom: 0;\n    animation: "," 0.8s linear 0s 1 normal forwards;\n  }\n"])),bgColor,animations.a)}(null!=bgColor?bgColor:defaultColorMap[animation]);case txStatus.a.PENDING:return function _pendingAnim(bgColor){return Object(styled_components_browser_esm.b)(_templateObject8||(_templateObject8=_taggedTemplateLiteral(["\n  transition: width 0.3s linear;\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    background-color: ",";\n    top: 0;\n    left: 0;\n    bottom: 0;\n    animation: "," 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n  }\n"])),bgColor,animations.b)}(null!=bgColor?bgColor:"lightblue");default:return null}},StatusBar=styled_components_browser_esm.c.div(_templateObject10||(_templateObject10=_taggedTemplateLiteral(["\n  width: 100%;\n  height: 5px;\n  background-color: ",";\n  position: absolute;\n  overflow: hidden;\n  top: 0;\n\n  ","\n"])),(function(p){return p.animate?null:p.backgroundColor}),(function(p){return style_getAnimation(p.animate,p.backgroundColor)})),DetailedView=styled_components_browser_esm.c.div(_templateObject11||(_templateObject11=_taggedTemplateLiteral(["\n  padding: 10px;\n  min-height: 30px;\n  margin-bottom: 15px;\n"]))),Trajectory=styled_components_browser_esm.c.div(_templateObject12||(_templateObject12=_taggedTemplateLiteral(["\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  div {\n    display: inline-block;\n  }\n"]))),Arrow=styled_components_browser_esm.c.div(_templateObject13||(_templateObject13=_taggedTemplateLiteral(["\n  color: ",";\n  transform: rotate(45deg);\n  width: 0;\n  height: 0;\n  border: 5px solid transparent;\n  border-top: 5px solid;\n  border-right: 5px solid;\n  margin: 3px 15px 15px 10px;\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","rule")})),TxFees=styled_components_browser_esm.c.div(_templateObject14||(_templateObject14=_taggedTemplateLiteral(["\n  text-align: center;\n"]))),CustomComponent=styled_components_browser_esm.c.div(_templateObject15||(_templateObject15=_taggedTemplateLiteral(["\n  overflow: auto;\n  max-width: 100%;\n  margin-top: 10px;\n"]))),AdaptiveSpan=__webpack_require__(170),string=__webpack_require__(224),Icon=__webpack_require__(91),jsx_runtime=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var TransactionStatus_TransactionStatus=function TransactionStatus(props){var _props$date,_props$date$locale,_useState2=_slicedToArray(Object(react.useState)(txStatus.a.UNKNOWN),2),status=_useState2[0],setStatus=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(defaultColorMap),2),colorMap=_useState4[0],setColorMap=_useState4[1],_useState6=_slicedToArray(Object(react.useState)(!1),2),isToggled=_useState6[0],setIsToggled=_useState6[1],shouldRenderDetails=Boolean(props.txFees||props.sender||props.receiver||props.customDetailComponent),shouldRenderTrajectory=Boolean(props.sender||props.receiver),shouldRenderSide=Boolean(props.txURL||shouldRenderDetails)&&shouldRenderTrajectory;Object(react.useLayoutEffect)((function(){props.status&&setStatus(props.status),props.autoShowDetails&&shouldRenderDetails&&setIsToggled(!0),setColorMap(Object.assign({},defaultColorMap,props.colorMap))}),[props.status,props.colorMap,props.autoShowDetails,shouldRenderDetails]);var _getTransaction=function _getTransaction(tx){return tx&&tx.hash?Object(jsx_runtime.jsx)("a",{href:tx.url,rel:"noreferrer",target:"_blank",title:tx.hash,children:Object(string.a)(tx.hash,7)}):null};return Object(jsx_runtime.jsxs)(Container,{showDetails:isToggled,hasDate:Boolean(null===(_props$date=props.date)||void 0===_props$date?void 0:_props$date.value),children:[Object(jsx_runtime.jsx)(StatusBar,{backgroundColor:colorMap[status],animate:props.animated?props.status:null}),Object(jsx_runtime.jsxs)(Row,{showSide:shouldRenderSide,children:[Object(jsx_runtime.jsx)(Amount,{children:Object(jsx_runtime.jsx)(AdaptiveSpan.a,{text:'<span class="amount">{amount}</span><p>{symbol}</p>',mapping:[{tag:"{amount}",value:props.amount,style:"bold"},{tag:"{symbol}",value:props.symbol}]})}),Object(jsx_runtime.jsx)(Status,{title:"Status",children:Object(jsx_runtime.jsx)("span",{children:function _getStatus(){var output=status.toUpperCase()+status.slice(1);return props.uncapitalizeStatus||(output=status.toUpperCase()),output}()})}),shouldRenderSide&&Object(jsx_runtime.jsxs)(Side,{children:[props.txURL&&Object(jsx_runtime.jsx)(IconWrapper,{children:Object(jsx_runtime.jsx)(Icon.a,{type:Icon.b.OutboundLink,style:{width:21},url:props.txURL,targetBlank:!0})}),shouldRenderDetails&&Object(jsx_runtime.jsx)(IconWrapper,{clickable:!0,onClick:function _handleToggleClick(){return setIsToggled(!isToggled)},children:Object(jsx_runtime.jsx)(Icon.a,{type:isToggled?Icon.b.ArrowUp:Icon.b.ArrowDown,style:{width:15}})})]})]}),shouldRenderDetails&&Object(jsx_runtime.jsxs)(DetailedView,{children:[shouldRenderTrajectory&&Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsxs)(Trajectory,{children:[_getTransaction(props.sender),props.sender&&props.receiver&&Object(jsx_runtime.jsx)(Arrow,{}),_getTransaction(props.receiver)]}),Object(jsx_runtime.jsxs)(TxFees,{children:[props.txFees," ",props.symbol," (fees)"]})]}),Object(jsx_runtime.jsx)(CustomComponent,{children:props.customDetailComponent})]}),props.date&&props.date.value&&Object(jsx_runtime.jsx)(style_Date,{children:Object(jsx_runtime.jsx)("span",{children:new Intl.DateTimeFormat(null!==(_props$date$locale=props.date.locale)&&void 0!==_props$date$locale?_props$date$locale:"en-US",props.date.options).format(props.date.value)})})]})};TransactionStatus_TransactionStatus.displayName="TransactionStatus",TransactionStatus_TransactionStatus.defaultProps={date:{locale:"en-US",options:{day:"numeric",month:"numeric",hour:"numeric",minute:"numeric"}}};try{TransactionStatus_TransactionStatus.displayName="TransactionStatus",TransactionStatus_TransactionStatus.__docgenInfo={description:"",displayName:"TransactionStatus",props:{amount:{defaultValue:null,description:"",name:"amount",required:!0,type:{name:"string"}},symbol:{defaultValue:null,description:"",name:"symbol",required:!0,type:{name:"string"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"TxStatus"}},animated:{defaultValue:null,description:"",name:"animated",required:!1,type:{name:"boolean"}},date:{defaultValue:null,description:"",name:"date",required:!1,type:{name:"{ value?: Date; locale?: string | undefined; options?: DateTimeFormatOptions | undefined; } | undefined"}},txURL:{defaultValue:null,description:"",name:"txURL",required:!1,type:{name:"string"}},colorMap:{defaultValue:null,description:"",name:"colorMap",required:!1,type:{name:"Record<TxStatus, string>"}},uncapitalizeStatus:{defaultValue:null,description:"",name:"uncapitalizeStatus",required:!1,type:{name:"boolean"}},autoShowDetails:{defaultValue:null,description:"",name:"autoShowDetails",required:!1,type:{name:"boolean"}},sender:{defaultValue:null,description:"",name:"sender",required:!1,type:{name:"IAddress"}},receiver:{defaultValue:null,description:"",name:"receiver",required:!1,type:{name:"IAddress"}},txFees:{defaultValue:null,description:"",name:"txFees",required:!1,type:{name:"string"}},customDetailComponent:{defaultValue:null,description:"",name:"customDetailComponent",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TransactionStatus/index.tsx#TransactionStatus"]={docgenInfo:TransactionStatus_TransactionStatus.__docgenInfo,name:"TransactionStatus",path:"src/components/TransactionStatus/index.tsx#TransactionStatus"})}catch(__react_docgen_typescript_loader_error){}},572:function(module,exports){},663:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(215)},75:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return PaymentRequest_PaymentRequest}));__webpack_require__(5),__webpack_require__(21),__webpack_require__(68),__webpack_require__(82),__webpack_require__(48),__webpack_require__(27),__webpack_require__(11),__webpack_require__(23),__webpack_require__(24),__webpack_require__(17),__webpack_require__(4),__webpack_require__(12),__webpack_require__(19),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(9),__webpack_require__(6),__webpack_require__(26);var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,react=__webpack_require__(0),styled_components_browser_esm=(__webpack_require__(32),__webpack_require__(31),__webpack_require__(14)),dist_modules=__webpack_require__(494),styleFetcher=__webpack_require__(35);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var style_templateObject,style_templateObject2,style_templateObject3,style_templateObject4,style_templateObject5,Container=styled_components_browser_esm.c.div(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n  color: ",";\n  background-color: ",";\n  width: 360px;\n  max-height: 600px;\n  padding: 40px;\n  text-align: left;\n  box-shadow: ",";\n  border-radius: 3px;\n  font-size: 12px;\n\n  @media only screen and (max-width: 480px) {\n    padding: 0 0 25px 0;\n    width: 285px;\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","boxShadow")})),Header=styled_components_browser_esm.c.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n  margin-bottom: 25px;\n  max-height: 150px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  img {\n    max-width: 150px;\n    max-height: 115px;\n\n    &:not(:first-of-type) {\n      float: right;\n    }\n  }\n\n  @media only screen and (max-width: 480px) {\n    padding: 15px 30px 0 30px;\n    img {\n      max-width: 100px;\n    }\n  }\n"]))),Spinner=styled_components_browser_esm.c.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n  display: inline-block;\n  width: 6px;\n  height: 6px;\n  border: 2px solid rgba(0, 0, 0, 0.3);\n  border-radius: 50%;\n  border-top-color: ",";\n  animation: spin 1s ease-in-out infinite;\n  margin-right: 5px;\n\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")})),QRCode=Object(styled_components_browser_esm.c)(dist_modules.QRCode)(_templateObject4||(_templateObject4=_taggedTemplateLiteral(["\n  display: block;\n  margin: auto;\n"]))),DetailedView=styled_components_browser_esm.c.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral(["\n  display: block;\n  margin: 15px 0 15px 0;\n"]))),Request=styled_components_browser_esm.c.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral(["\n  text-align: center;\n  margin-bottom: 15px;\n\n  > div {\n    margin-top: 15px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    border-top: 1px solid #dedede;\n    border-bottom: 1px solid #dedede;\n    font-weight: bold;\n    padding: 10px 0 10px 0;\n  }\n"]))),TransactionList=styled_components_browser_esm.c.ul(_templateObject7||(_templateObject7=_taggedTemplateLiteral(["\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 60px;\n  overflow-x: hidden;\n  overflow-y: auto;\n\n  li {\n    i {\n      margin-left: 5px;\n    }\n  }\n\n  &::-webkit-scrollbar-track {\n    background-color: ",";\n    border: 1px solid #dedede;\n  }\n\n  &::-webkit-scrollbar {\n    width: 9px;\n    background-color: #dedede;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: ",";\n    border: 1px solid #dedede;\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")})),Visual=styled_components_browser_esm.c.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([""]))),CancelButton=styled_components_browser_esm.c.button(_templateObject9||(_templateObject9=_taggedTemplateLiteral(["\n  display: block;\n  cursor: pointer;\n  margin: 0 auto 5px auto;\n  padding: 0.35em 1.2em;\n  border: 0.1em solid ",";\n  border-radius: 0.12em;\n  box-sizing: border-box;\n  text-decoration: none;\n  font-weight: 300;\n  color: ",";\n  text-align: center;\n\n  &:hover {\n    color: ",";\n    background-color: #f7931a;\n  }\n\n  &:focus {\n    outline: none;\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")}),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")})),HelpLink=styled_components_browser_esm.c.a(_templateObject10||(_templateObject10=_taggedTemplateLiteral(["\n  display: block;\n  margin: auto;\n  cursor: pointer;\n  left: 0;\n  right: 0;\n  bottom: 15px;\n  text-align: center;\n  margin: 10px auto 0 auto;\n  text-align: center;\n  text-decoration: none;\n  font-weight: 700;\n  color: ",";\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")})),animations=__webpack_require__(121);function style_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var IconType,Circle=styled_components_browser_esm.c.circle(style_templateObject||(style_templateObject=style_taggedTemplateLiteral(["\n  stroke-dasharray: 166;\n  stroke-dashoffset: 166;\n  stroke-width: 2;\n  stroke-miterlimit: 10;\n  stroke: #4bb71b;\n  fill: ",";\n  animation: "," 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","backgroundColor")}),animations.c),style_Container=styled_components_browser_esm.c.svg(style_templateObject2||(style_templateObject2=style_taggedTemplateLiteral(["\n  width: 100px;\n  height: 100px;\n  display: block;\n  position: relative;\n  margin: 0 auto;\n"]))),CheckMark=styled_components_browser_esm.c.path(style_templateObject3||(style_templateObject3=style_taggedTemplateLiteral(["\n  stroke-width: 2;\n  stroke-miterlimit: 10;\n  box-shadow: inset 0px 0px 0px #4bb71b;\n  border-radius: 50%;\n  stroke: #4bb71b;\n  transform-origin: 50% 50%;\n  stroke-dasharray: 48;\n  stroke-dashoffset: 48;\n  animation: "," 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;\n"])),animations.c),Times=styled_components_browser_esm.c.g(style_templateObject4||(style_templateObject4=style_taggedTemplateLiteral(["\n  path {\n    stroke-width: 2;\n    stroke: #4bb71b;\n    stroke-dasharray: 48;\n    stroke-dashoffset: 48;\n    transform-origin: 50% 50% 0;\n    animation: 0.3s ease 0.8s normal forwards 1 running ",";\n  }\n"])),animations.c),IconContainer=styled_components_browser_esm.c.div(style_templateObject5||(style_templateObject5=style_taggedTemplateLiteral(["\n  display: inline-block;\n  vertical-align: middle;\n"]))),jsx_runtime=__webpack_require__(1);!function(IconType){IconType.Sucess="success",IconType.Failure="failure"}(IconType||(IconType={}));var AnimatedIcon_AnimatedIcon=function AnimatedIcon(_ref){var type=_ref.type,style=_ref.style,icons={success:Object(jsx_runtime.jsxs)(style_Container,{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 52 52",children:[Object(jsx_runtime.jsx)(Circle,{cx:"26",cy:"26",r:"25",fill:"none"}),Object(jsx_runtime.jsx)(CheckMark,{fill:"none",d:"M14.1 27.2l7.1 7.2 16.7-16.8"})]}),failure:Object(jsx_runtime.jsxs)(style_Container,{viewBox:"0 0 52 52",xmlns:"http://www.w3.org/2000/svg",children:[Object(jsx_runtime.jsx)(Circle,{cx:"26",cy:"26",r:"25",fill:"none"}),Object(jsx_runtime.jsxs)(Times,{children:[Object(jsx_runtime.jsx)("path",{fill:"none",d:"M16,16 l20,20"}),Object(jsx_runtime.jsx)("path",{fill:"none",d:"M16,36 l20,-20"})]})]})};return Object(jsx_runtime.jsx)(IconContainer,{style:style,children:icons[type]})};AnimatedIcon_AnimatedIcon.displayName="AnimatedIcon";try{AnimatedIcon_AnimatedIcon.displayName="AnimatedIcon",AnimatedIcon_AnimatedIcon.__docgenInfo={description:"",displayName:"AnimatedIcon",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"enum",value:[{value:'"success"'},{value:'"failure"'}]}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/AnimatedIcon/index.tsx#AnimatedIcon"]={docgenInfo:AnimatedIcon_AnimatedIcon.__docgenInfo,name:"AnimatedIcon",path:"src/components/common/AnimatedIcon/index.tsx#AnimatedIcon"})}catch(__react_docgen_typescript_loader_error){}var item_templateObject,item_templateObject2,item_templateObject3,paymentStatus=__webpack_require__(55),defaultStrings={request:"Please send {amount} {symbol} to address:",status:"Current status",seller:"Merchant",txStatus:{complete:"Payment complete",pending:"Waiting for payment",failed:"Payment failed"},cancel:"Cancel",help:"Need help? Click here!",deadline:"Send before",receivedAmount:"Amount received",remainingAmount:"Amount remaining",transactions:"Transactions ({txAmount})"},defaultProps={symbol:"BTC",status:paymentStatus.a.PENDING,showQRCode:!0},AdaptiveSpan=__webpack_require__(170),padDigits=function padDigits(number,digits){var max=arguments.length>2&&void 0!==arguments[2]?arguments[2]:30,s=number.toString();for(0===number&&(s="0.".concat(s));s.length<digits&&s.length<max;)s+="0";return s},string=__webpack_require__(224),Icon=__webpack_require__(91);function item_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var item_Container=styled_components_browser_esm.c.div(item_templateObject||(item_templateObject=item_taggedTemplateLiteral(["\n\tpadding: 4px 0;\n\tdisplay: flex;\n\talign-items: baseline;\n"]))),Title=styled_components_browser_esm.c.div(item_templateObject2||(item_templateObject2=item_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\twidth: 50%;\n\tbox-sizing: border-box;\n\tvertical-align: top;\n\tfont-size: 12px;\n\topacity: .6;\n\ttext-align: right;\n\n\t@media only screen and (max-width: 480px) {\n\t\tpadding-right: 2px;\n\t}\n"]))),Value=styled_components_browser_esm.c.div(item_templateObject3||(item_templateObject3=item_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\tpadding-left: 8px;\n\twidth: 50%;\n\tbox-sizing: border-box;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\n\t@media only screen and (max-width: 480px) {\n\t\tpadding-left: 2px;\n\t}\n"]))),item_Item=function Item(_ref){var title=_ref.title,children=_ref.children;return Object(jsx_runtime.jsxs)(item_Container,{children:[Object(jsx_runtime.jsxs)(Title,{title:title,children:[title,":"]}),Object(jsx_runtime.jsx)(Value,{children:children})]})};item_Item.displayName="Item";try{item_Item.displayName="Item",item_Item.__docgenInfo={description:"",displayName:"Item",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/PaymentRequest/item.tsx#Item"]={docgenInfo:item_Item.__docgenInfo,name:"Item",path:"src/components/PaymentRequest/item.tsx#Item"})}catch(__react_docgen_typescript_loader_error){}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var PaymentRequest_PaymentRequest=function PaymentRequest(props){var _props$amount$receive,_props$deadline$dateL2,_props$transactions,remainingAmount=props.amount.toPay-(null!==(_props$amount$receive=props.amount.received)&&void 0!==_props$amount$receive?_props$amount$receive:0),_useState2=_slicedToArray(Object(react.useState)(defaultStrings),2),strings=_useState2[0],setStrings=_useState2[1];Object(react.useLayoutEffect)((function(){props.strings&&setStrings((function(s){return Object.assign({},s,props.strings)}))}),[props.strings]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsxs)(Header,{children:[Object(jsx_runtime.jsx)("img",{src:props.logos.coin,alt:"".concat(props.symbol," logo")}),props.logos.company&&Object(jsx_runtime.jsx)("img",{src:props.logos.company,alt:"Company logo"})]}),Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsxs)(Request,{children:[Object(jsx_runtime.jsx)(AdaptiveSpan.a,{text:strings.request,mapping:[{tag:"{amount}",value:props.amount.toPay,style:"bold"},{tag:"{symbol}",value:props.symbol}]}),Object(jsx_runtime.jsx)("div",{title:props.address,children:props.address})]}),Object(jsx_runtime.jsx)(Visual,{children:function _renderVisual(){return props.status&&[paymentStatus.a.FAILED,paymentStatus.a.COMPLETE].includes(props.status)?Object(jsx_runtime.jsx)(AnimatedIcon_AnimatedIcon,{type:props.status===paymentStatus.a.FAILED?IconType.Failure:IconType.Sucess,style:{display:"flex",margin:"auto"}},props.status):props.showQRCode?Object(jsx_runtime.jsx)(QRCode,{bgColor:"transparent",fgColor:"#000000",level:"L",style:{width:100},value:props.address}):null}()}),Object(jsx_runtime.jsxs)(DetailedView,{children:[props.sellerName?Object(jsx_runtime.jsx)(item_Item,{title:strings.seller,children:Object(jsx_runtime.jsx)("span",{title:props.sellerName,children:props.sellerName})}):null,"number"==typeof props.amount.received?Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsxs)(item_Item,{title:strings.receivedAmount,children:[padDigits(props.amount.received,props.decimalPlaces)," ",props.symbol]}),Object(jsx_runtime.jsxs)(item_Item,{title:strings.remainingAmount,children:[padDigits(remainingAmount,props.decimalPlaces)," ",props.symbol]})]}):null,props.deadline&&remainingAmount>0?Object(jsx_runtime.jsxs)(item_Item,{title:strings.deadline,children:[new Intl.DateTimeFormat(null!==(_props$deadline$dateL2=props.deadline.dateLocale)&&void 0!==_props$deadline$dateL2?_props$deadline$dateL2:"en-US").format(props.deadline.datetime),props.deadline.humanized&&Object(jsx_runtime.jsxs)("span",{children:[" (",function _getFromDate(date){var _props$deadline$dateL,_props$deadline,currentDate=new Date,dayCount=(date.getTime()-currentDate.getTime())/864e5,unit="day",value=dayCount;if(dayCount>=0&&dayCount<=1){var hoursCount=Math.abs(currentDate.getTime()-date.getTime())/36e5;if(unit="hours",value=hoursCount,hoursCount<=1){var minCount=Math.abs(currentDate.getTime()-date.getTime())/1e3/60;unit="minute",value=Math.ceil(minCount)}}return new Intl.RelativeTimeFormat(null!==(_props$deadline$dateL=null===(_props$deadline=props.deadline)||void 0===_props$deadline?void 0:_props$deadline.dateLocale)&&void 0!==_props$deadline$dateL?_props$deadline$dateL:"en-US").format(Math.ceil(value),unit)}(props.deadline.datetime),")"]})]}):null,null!==(_props$transactions=props.transactions)&&void 0!==_props$transactions&&_props$transactions.length?Object(jsx_runtime.jsx)(item_Item,{title:strings.transactions.replace("{txAmount}",props.transactions.length.toString()),children:Object(jsx_runtime.jsx)(TransactionList,{children:props.transactions.map((function(transaction,index){return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("a",{href:transaction.txUrl,title:"Transaction",rel:"noreferrer",target:"_blank",children:Object(string.a)(transaction.txHash,3)}),Object(jsx_runtime.jsxs)("i",{children:["(",padDigits(transaction.amount,props.decimalPlaces)," ",props.symbol,")"]})]},index)}))})}):null,Object(jsx_runtime.jsxs)(item_Item,{title:strings.status,children:[props.waitAnimation&&props.status===paymentStatus.a.PENDING&&Object(jsx_runtime.jsx)(Spinner,{}),Object(jsx_runtime.jsx)(AdaptiveSpan.a,{showTitle:!0,text:function _getStatus(){return remainingAmount<=0?strings.txStatus.complete:props.customStatusText?props.customStatusText:strings.txStatus[props.status]}(),style:"bold"})]})]})]}),Object(jsx_runtime.jsxs)("div",{children:[props.onCancel&&Object(jsx_runtime.jsx)(CancelButton,{onClick:props.onCancel,children:strings.cancel}),props.helpUrl&&Object(jsx_runtime.jsxs)(HelpLink,{href:props.helpUrl,title:strings.help,target:"blank",children:[Object(jsx_runtime.jsx)(Icon.a,{type:Icon.b.HelpCircleO,style:{width:13,lineHeight:"15px"}}),strings.help]})]})]})};PaymentRequest_PaymentRequest.displayName="PaymentRequest",PaymentRequest_PaymentRequest.defaultProps=defaultProps;try{PaymentRequest_PaymentRequest.displayName="PaymentRequest",PaymentRequest_PaymentRequest.__docgenInfo={description:"",displayName:"PaymentRequest",props:{address:{defaultValue:null,description:"",name:"address",required:!0,type:{name:"string"}},symbol:{defaultValue:null,description:"",name:"symbol",required:!0,type:{name:"string"}},amount:{defaultValue:null,description:"",name:"amount",required:!0,type:{name:"{ toPay: number; received?: number | undefined; }"}},logos:{defaultValue:null,description:"",name:"logos",required:!0,type:{name:"{ coin: string; company?: string | undefined; }"}},decimalPlaces:{defaultValue:null,description:"",name:"decimalPlaces",required:!0,type:{name:"number"}},waitAnimation:{defaultValue:null,description:"",name:"waitAnimation",required:!1,type:{name:"boolean"}},sellerName:{defaultValue:null,description:"",name:"sellerName",required:!1,type:{name:"string"}},strings:{defaultValue:null,description:"",name:"strings",required:!1,type:{name:"Partial<IStrings>"}},onCancel:{defaultValue:null,description:"",name:"onCancel",required:!1,type:{name:"(() => void)"}},helpUrl:{defaultValue:null,description:"",name:"helpUrl",required:!1,type:{name:"string"}},showQRCode:{defaultValue:null,description:"",name:"showQRCode",required:!1,type:{name:"boolean"}},transactions:{defaultValue:null,description:"",name:"transactions",required:!1,type:{name:"ITransaction[]"}},customStatusText:{defaultValue:null,description:"",name:"customStatusText",required:!1,type:{name:"string"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"PaymentStatus"}},deadline:{defaultValue:null,description:"",name:"deadline",required:!1,type:{name:"{ dateLocale?: string; datetime: Date; humanized?: boolean | undefined; } | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/PaymentRequest/index.tsx#PaymentRequest"]={docgenInfo:PaymentRequest_PaymentRequest.__docgenInfo,name:"PaymentRequest",path:"src/components/PaymentRequest/index.tsx#PaymentRequest"})}catch(__react_docgen_typescript_loader_error){}},91:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return IconType})),__webpack_require__.d(__webpack_exports__,"a",(function(){return Icon_Icon}));__webpack_require__(5),__webpack_require__(0),__webpack_require__(9),__webpack_require__(32),__webpack_require__(31);var _templateObject,_templateObject2,styled_components_browser_esm=__webpack_require__(14),styleFetcher=__webpack_require__(35);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var IconType,Link=styled_components_browser_esm.c.a(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n  color: rgba(0, 0, 0, 0.8);\n  text-decoration: none;\n"]))),IconContainer=styled_components_browser_esm.c.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n  margin: 5px 3px 3px 3px;\n  display: inline-block;\n  vertical-align: middle;\n\n  svg .fillable {\n    fill: ",";\n  }\n"])),(function(p){return Object(styleFetcher.a)(p.theme,"primary","color")})),jsx_runtime=__webpack_require__(1);!function(IconType){IconType.OutboundLink="outbound-link",IconType.HelpCircleO="help-circle-o",IconType.ArrowUp="arrow-up",IconType.ArrowDown="arrow-down"}(IconType||(IconType={}));var Icon_Icon=function Icon(props){var _outboundLink=Object(jsx_runtime.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[Object(jsx_runtime.jsx)("path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}),Object(jsx_runtime.jsx)("polyline",{points:"15 3 21 3 21 9"}),Object(jsx_runtime.jsx)("line",{x1:"10",y1:"14",x2:"21",y2:"3"})]}),_arrowUp=Object(jsx_runtime.jsx)("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 330 330",xmlSpace:"preserve",children:Object(jsx_runtime.jsx)("path",{d:"M325.606,229.393l-150.004-150C172.79,76.58,168.974,75,164.996,75c-3.979,0-7.794,1.581-10.607,4.394 l-149.996,150c-5.858,5.858-5.858,15.355,0,21.213c5.857,5.857,15.355,5.858,21.213,0l139.39-139.393l139.397,139.393 C307.322,253.536,311.161,255,315,255c3.839,0,7.678-1.464,10.607-4.394C331.464,244.748,331.464,235.251,325.606,229.393z"})}),_arrowDown=Object(jsx_runtime.jsx)("svg",{version:"1.1",id:"Layer_1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 330 330",children:Object(jsx_runtime.jsx)("path",{d:"M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"})}),icons={"help-circle-o":Object(jsx_runtime.jsx)("svg",{viewBox:"0 0 20 20",children:Object(jsx_runtime.jsx)("g",{stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd",children:Object(jsx_runtime.jsx)("g",{transform:"translate(-782.000000, -288.000000)",children:Object(jsx_runtime.jsx)("g",{transform:"translate(100.000000, 100.000000)",children:Object(jsx_runtime.jsx)("g",{transform:"translate(680.000000, 186.000000)",children:Object(jsx_runtime.jsxs)("g",{children:[Object(jsx_runtime.jsx)("polygon",{id:"Path",points:"0 0 24 0 24 24 0 24"}),Object(jsx_runtime.jsx)("path",{className:"fillable",d:"M11,18 L13,18 L13,16 L11,16 L11,18 Z M12,2 C6.48,2 2,6.48 2,12 C2,17.52 6.48,22 12,22 C17.52,22 22,17.52 22,12 C22,6.48 17.52,2 12,2 Z M12,20 C7.59,20 4,16.41 4,12 C4,7.59 7.59,4 12,4 C16.41,4 20,7.59 20,12 C20,16.41 16.41,20 12,20 Z M12,6 C9.79,6 8,7.79 8,10 L10,10 C10,8.9 10.9,8 12,8 C13.1,8 14,8.9 14,10 C14,12 11,11.75 11,15 L13,15 C13,12.75 16,12.5 16,10 C16,7.79 14.21,6 12,6 Z"})]})})})})})}),"outbound-link":_outboundLink,"arrow-up":_arrowUp,"arrow-down":_arrowDown};return props.url?Object(jsx_runtime.jsx)(Link,Object.assign({href:props.url,title:props.url},function _getSpecProps(){var specProps={};return props.targetBlank&&(specProps=Object.assign({},specProps,{target:"_blank",rel:"noreferrer"})),specProps}(),{children:Object(jsx_runtime.jsx)(IconContainer,{style:props.style,children:icons[props.type]})})):Object(jsx_runtime.jsx)(IconContainer,{style:props.style,children:icons[props.type]})};Icon_Icon.displayName="Icon";try{Icon_Icon.displayName="Icon",Icon_Icon.__docgenInfo={description:"",displayName:"Icon",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"enum",value:[{value:'"outbound-link"'},{value:'"help-circle-o"'},{value:'"arrow-up"'},{value:'"arrow-down"'}]}},url:{defaultValue:null,description:"",name:"url",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},targetBlank:{defaultValue:null,description:"",name:"targetBlank",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/Icon/index.tsx#Icon"]={docgenInfo:Icon_Icon.__docgenInfo,name:"Icon",path:"src/components/common/Icon/index.tsx#Icon"})}catch(__react_docgen_typescript_loader_error){}}},[[499,1,2]]]);
//# sourceMappingURL=main.8c31466f3083cd65a727.bundle.js.map