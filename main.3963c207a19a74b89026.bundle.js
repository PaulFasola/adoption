(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1071:function(module,exports,__webpack_require__){"use strict";__webpack_require__(10),__webpack_require__(4),__webpack_require__(51),__webpack_require__(1072),__webpack_require__(43),__webpack_require__(44),__webpack_require__(1073),__webpack_require__(31),__webpack_require__(37);var _clientApi=__webpack_require__(74),_clientLogger=__webpack_require__(45),_configFilename=__webpack_require__(1074);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}(_configFilename.args||_configFilename.argTypes)&&_clientLogger.logger.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify({args:_configFilename.args,argTypes:_configFilename.argTypes})),_configFilename.decorators&&_configFilename.decorators.forEach((function(decorator){return(0,_clientApi.addDecorator)(decorator,!1)})),_configFilename.loaders&&_configFilename.loaders.forEach((function(loader){return(0,_clientApi.addLoader)(loader,!1)})),(_configFilename.parameters||_configFilename.globals||_configFilename.globalTypes)&&(0,_clientApi.addParameters)(_objectSpread(_objectSpread({},_configFilename.parameters),{},{globals:_configFilename.globals,globalTypes:_configFilename.globalTypes}),!1),_configFilename.argTypesEnhancers&&_configFilename.argTypesEnhancers.forEach((function(enhancer){return(0,_clientApi.addArgTypesEnhancer)(enhancer)}))},1074:function(module,exports,__webpack_require__){(0,__webpack_require__(248).addDecorator)(__webpack_require__(1075).withPropsTable)},1080:function(module,exports,__webpack_require__){var map={"./nestedObjectAssign":469,"./nestedObjectAssign.js":469};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1080},1090:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(248).configure)([__webpack_require__(1091)],module,!1)}).call(this,__webpack_require__(145)(module))},1091:function(module,exports,__webpack_require__){var map={"./components/PaymentRequest/index.stories.tsx":1106,"./components/TransactionStatus/index.stories.tsx":1107};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1091},1101:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/fictiveCompany.b16d6333.png"},1102:function(module,exports,__webpack_require__){module.exports=__webpack_require__.p+"static/media/txstatus-completed.87b0f1b0.jpg"},1106:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Basic",(function(){return index_stories_Basic})),__webpack_require__.d(__webpack_exports__,"Detailed",(function(){return index_stories_Detailed})),__webpack_require__.d(__webpack_exports__,"AnimatedStatus",(function(){return index_stories_AnimatedStatus})),__webpack_require__.d(__webpack_exports__,"Transacted",(function(){return index_stories_Transacted})),__webpack_require__.d(__webpack_exports__,"Completed",(function(){return index_stories_Completed})),__webpack_require__.d(__webpack_exports__,"WithActions",(function(){return index_stories_WithActions})),__webpack_require__.d(__webpack_exports__,"CustomStrings",(function(){return index_stories_CustomStrings})),__webpack_require__.d(__webpack_exports__,"Simulation",(function(){return index_stories_Simulation}));__webpack_require__(17),__webpack_require__(4),__webpack_require__(13),__webpack_require__(11),__webpack_require__(22),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(8),__webpack_require__(6),__webpack_require__(27),__webpack_require__(20),__webpack_require__(1092),__webpack_require__(37);var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,react=__webpack_require__(0),styled_components_browser_esm=(__webpack_require__(5),__webpack_require__(64),__webpack_require__(77),__webpack_require__(46),__webpack_require__(26),__webpack_require__(23),__webpack_require__(24),__webpack_require__(32),__webpack_require__(31),__webpack_require__(14)),dist_modules=__webpack_require__(486);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var style_templateObject,style_templateObject2,style_templateObject3,style_templateObject4,style_templateObject5,Container=styled_components_browser_esm.b.div(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n\tcolor: #000000;\n\tbackground-color: #ffffff;\n\twidth: 360px;\n\tmax-height: 600px;\n\tpadding: 40px;\n\ttext-align: left;\n\tbox-shadow: 0 12px 28px rgba(0,0,0,0.1);\n\tborder-radius: 3px;\n\tfont-size: 12px;\n\n\t@media only screen and (max-width: 480px) {\n\t\tpadding: 0 0 25px 0;\n\t\twidth: 285px;\n    }\n"]))),Header=styled_components_browser_esm.b.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n\tmargin-bottom: 25px;\n\tmax-height: 150px;\n\tdisplay: flex;\n\talign-items: center;\n    justify-content: space-between;\n\n\timg {\n\t\tmax-width: 150px;\n\t\tmax-height: 115px;\n\n\t\t&:not(:first-of-type){\n\t\t\tfloat: right;\n\t\t}\n\t}\n\n\t@media only screen and (max-width: 480px) {\n\t\tpadding: 15px 30px 0 30px;\n\t\timg {\n\t\t\tmax-width: 100px;\n\t\t}\n    }\n"]))),Spinner=styled_components_browser_esm.b.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\twidth: 6px;\n\theight: 6px;\n\tborder: 2px solid rgba(0,0,0,.3);\n\tborder-radius: 50%;\n\tborder-top-color: #fff;\n\tanimation: spin 1s ease-in-out infinite;\n\tmargin-right : 5px;\n\n\t@keyframes spin {\n\t\tto { -webkit-transform: rotate(360deg); }\n  \t}\n\n  \t@-webkit-keyframes spin {\n\t\tto { -webkit-transform: rotate(360deg); }\n  \t}\n"]))),QRCode=Object(styled_components_browser_esm.b)(dist_modules.QRCode)(_templateObject4||(_templateObject4=_taggedTemplateLiteral(["\n\tdisplay: block;\n\tmargin: auto;\n"]))),DetailedView=styled_components_browser_esm.b.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral(["\n\tdisplay: block;\n\tmargin: 15px 0 15px 0;\n"]))),Request=styled_components_browser_esm.b.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral(["\n\ttext-align: center;\n\tmargin-bottom: 15px;\n\n\t> div {\n\t\tmargin-top: 15px;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\tborder-top: 1px solid #dedede;\n\t\tborder-bottom: 1px solid #dedede;\n\t\tfont-weight: bold;\n\t\tpadding: 10px 0 10px 0;\n\t}\n"]))),TransactionList=styled_components_browser_esm.b.ul(_templateObject7||(_templateObject7=_taggedTemplateLiteral(["\n\tpadding: 0;\n\tmargin: 0;\n\tlist-style: none;\n    max-height: 60px;\n\toverflow-x: hidden;\n    overflow-y: auto;\n\n\tli {\n\t\ti {\n\t\t\tmargin-left: 5px;\n\t\t}\n\t}\n\n\t&::-webkit-scrollbar-track\n\t{\n\t\tbackground-color: #fff;\n\t\tborder: 1px solid #dedede;\n\t}\n\n\t&::-webkit-scrollbar\n\t{\n\t\twidth: 9px;\n\t\tbackground-color: #dedede;\n\t}\n\n\t&::-webkit-scrollbar-thumb\n\t{\n\t\tbackground-color: #000000;\n\t\tborder: 1px solid #dedede;\n\t}\n"]))),Visual=styled_components_browser_esm.b.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([""]))),CancelButton=styled_components_browser_esm.b.button(_templateObject9||(_templateObject9=_taggedTemplateLiteral(["\n\tdisplay: block;\n\tcursor: pointer;\n\tmargin: 0 auto 5px auto;\n    padding: 0.35em 1.2em;\n    border: 0.1em solid #fff;\n    border-radius: 0.12em;\n    box-sizing: border-box;\n    text-decoration: none;\n    font-weight: 300;\n    color: #000;\n    text-align: center;\n\n\t&:hover {\n\t\tcolor: #FFFFFF;\n\t\tbackground-color: #f7931a;\n\t}\n\n\t&:focus {\n\t\toutline: none;\n\t}\n"]))),HelpLink=styled_components_browser_esm.b.a(_templateObject10||(_templateObject10=_taggedTemplateLiteral(["\n\tdisplay: block;\n\tmargin: auto;\n\tcursor: pointer;\n\tleft: 0;\n\tright: 0;\n\tbottom: 15px;\n\ttext-align: center;\n\tmargin: 10px auto 0 auto;\n\ttext-align: center;\n\ttext-decoration: none;\n\tfont-weight: 700;\n\tcolor: #000;\n"]))),animations=__webpack_require__(116);function style_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var IconType,Circle=styled_components_browser_esm.b.circle(style_templateObject||(style_templateObject=style_taggedTemplateLiteral(["\n\tstroke-dasharray: 166;\n    stroke-dashoffset: 166;\n    stroke-width: 2;\n    stroke-miterlimit: 10;\n    stroke: #4bb71b;\n    fill: #fff;\n\tanimation: "," 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;\n"])),animations.c),style_Container=styled_components_browser_esm.b.svg(style_templateObject2||(style_templateObject2=style_taggedTemplateLiteral(["\n\twidth: 100px;\n\theight: 100px;\n\tdisplay: block;\n\tposition:relative;\n\tmargin: 0 auto;\n"]))),CheckMark=styled_components_browser_esm.b.path(style_templateObject3||(style_templateObject3=style_taggedTemplateLiteral(["\n\tstroke-width: 2;\n\tstroke-miterlimit: 10;\n\tbox-shadow: inset 0px 0px 0px #4bb71b;\n\tborder-radius: 50%;\n\tstroke: #4bb71b;\n\ttransform-origin: 50% 50%;\n\tstroke-dasharray: 48;\n\tstroke-dashoffset: 48;\n\tanimation: "," 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;\n"])),animations.c),Times=styled_components_browser_esm.b.g(style_templateObject4||(style_templateObject4=style_taggedTemplateLiteral(["\n\tpath {\n\t\tstroke-width: 2;\n\t\tstroke: #4bb71b;\n\t\tstroke-dasharray: 48;\n\t\tstroke-dashoffset: 48;\n\t\ttransform-origin: 50% 50% 0;\n\t\tanimation: 0.3s ease 0.8s normal forwards 1 running ",";\n\t}\n"])),animations.c),IconContainer=styled_components_browser_esm.b.div(style_templateObject5||(style_templateObject5=style_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n    vertical-align: middle;\n"]))),jsx_runtime=__webpack_require__(1);!function(IconType){IconType.Sucess="success",IconType.Failure="failure"}(IconType||(IconType={}));var PaymentStatus,AnimatedIcon_AnimatedIcon=function AnimatedIcon(_ref){var type=_ref.type,style=_ref.style,icons={success:Object(jsx_runtime.jsxs)(style_Container,{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 52 52",children:[Object(jsx_runtime.jsx)(Circle,{cx:"26",cy:"26",r:"25",fill:"none"}),Object(jsx_runtime.jsx)(CheckMark,{fill:"none",d:"M14.1 27.2l7.1 7.2 16.7-16.8"})]}),failure:Object(jsx_runtime.jsxs)(style_Container,{viewBox:"0 0 52 52",xmlns:"http://www.w3.org/2000/svg",children:[Object(jsx_runtime.jsx)(Circle,{cx:"26",cy:"26",r:"25",fill:"none"}),Object(jsx_runtime.jsxs)(Times,{children:[Object(jsx_runtime.jsx)("path",{fill:"none",d:"M16,16 l20,20"}),Object(jsx_runtime.jsx)("path",{fill:"none",d:"M16,36 l20,-20"})]})]})};return Object(jsx_runtime.jsx)(IconContainer,{style:style,children:icons[type]})};AnimatedIcon_AnimatedIcon.displayName="AnimatedIcon";try{AnimatedIcon_AnimatedIcon.displayName="AnimatedIcon",AnimatedIcon_AnimatedIcon.__docgenInfo={description:"",displayName:"AnimatedIcon",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"enum",value:[{value:'"success"'},{value:'"failure"'}]}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/AnimatedIcon/index.tsx#AnimatedIcon"]={docgenInfo:AnimatedIcon_AnimatedIcon.__docgenInfo,name:"AnimatedIcon",path:"src/components/common/AnimatedIcon/index.tsx#AnimatedIcon"})}catch(__react_docgen_typescript_loader_error){}!function(PaymentStatus){PaymentStatus.COMPLETE="complete",PaymentStatus.PENDING="pending",PaymentStatus.FAILED="failed"}(PaymentStatus||(PaymentStatus={}));var item_templateObject,item_templateObject2,item_templateObject3,defaultStrings={request:"Please send {amount} {symbol} to address:",status:"Current status",seller:"Merchant",txStatus:{complete:"Payment complete",pending:"Waiting for payment",failed:"Payment failed"},cancel:"Cancel",help:"Need help? Click here!",deadline:"Send before",receivedAmount:"Amount received",remainingAmount:"Amount remaining",transactions:"Transactions ({txAmount})"},defaultProps={symbol:"BTC",status:PaymentStatus.PENDING,showQRCode:!0},AdaptiveSpan=__webpack_require__(164),padDigits=function padDigits(number,digits){var max=arguments.length>2&&void 0!==arguments[2]?arguments[2]:30,s=number.toString();for(0===number&&(s="0.".concat(s));s.length<digits&&s.length<max;)s+="0";return s},string=__webpack_require__(217),Icon=__webpack_require__(86);function item_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var item_Container=styled_components_browser_esm.b.div(item_templateObject||(item_templateObject=item_taggedTemplateLiteral(["\n\tpadding: 4px 0;\n\tdisplay: flex;\n\talign-items: baseline;\n"]))),Title=styled_components_browser_esm.b.div(item_templateObject2||(item_templateObject2=item_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\twidth: 50%;\n\tbox-sizing: border-box;\n\tvertical-align: top;\n\tfont-size: 12px;\n\topacity: .6;\n\ttext-align: right;\n\n\t@media only screen and (max-width: 480px) {\n\t\tpadding-right: 2px;\n\t}\n"]))),Value=styled_components_browser_esm.b.div(item_templateObject3||(item_templateObject3=item_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\tpadding-left: 8px;\n\twidth: 50%;\n\tbox-sizing: border-box;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\n\t@media only screen and (max-width: 480px) {\n\t\tpadding-left: 2px;\n\t}\n"]))),item_Item=function Item(_ref){var title=_ref.title,children=_ref.children;return Object(jsx_runtime.jsxs)(item_Container,{children:[Object(jsx_runtime.jsxs)(Title,{title:title,children:[title,":"]}),Object(jsx_runtime.jsx)(Value,{children:children})]})};item_Item.displayName="Item";try{item_Item.displayName="Item",item_Item.__docgenInfo={description:"",displayName:"Item",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/PaymentRequest/item.tsx#Item"]={docgenInfo:item_Item.__docgenInfo,name:"Item",path:"src/components/PaymentRequest/item.tsx#Item"})}catch(__react_docgen_typescript_loader_error){}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _parameters,PaymentRequest_PaymentRequest=function PaymentRequest(props){var _props$amount$receive,_props$deadline$dateL2,_props$transactions,remainingAmount=props.amount.toPay-(null!==(_props$amount$receive=props.amount.received)&&void 0!==_props$amount$receive?_props$amount$receive:0),_useState2=_slicedToArray(Object(react.useState)(defaultStrings),2),strings=_useState2[0],setStrings=_useState2[1];Object(react.useLayoutEffect)((function(){props.strings&&setStrings((function(s){return Object.assign({},s,props.strings)}))}),[props.strings]);return Object(jsx_runtime.jsxs)(Container,{children:[Object(jsx_runtime.jsxs)(Header,{children:[Object(jsx_runtime.jsx)("img",{src:props.logos.coin,alt:"".concat(props.symbol," logo")}),props.logos.company&&Object(jsx_runtime.jsx)("img",{src:props.logos.company,alt:"Company logo"})]}),Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsxs)(Request,{children:[Object(jsx_runtime.jsx)(AdaptiveSpan.a,{text:strings.request,mapping:[{tag:"{amount}",value:props.amount.toPay,style:"bold"},{tag:"{symbol}",value:props.symbol}]}),Object(jsx_runtime.jsx)("div",{title:props.address,children:props.address})]}),Object(jsx_runtime.jsx)(Visual,{children:function _renderVisual(){return props.status&&[PaymentStatus.FAILED,PaymentStatus.COMPLETE].includes(props.status)?Object(jsx_runtime.jsx)(AnimatedIcon_AnimatedIcon,{type:props.status===PaymentStatus.FAILED?IconType.Failure:IconType.Sucess,style:{display:"flex",margin:"auto"}},props.status):props.showQRCode?Object(jsx_runtime.jsx)(QRCode,{bgColor:"transparent",fgColor:"#000000",level:"L",style:{width:100},value:props.address}):null}()}),Object(jsx_runtime.jsxs)(DetailedView,{children:[props.sellerName?Object(jsx_runtime.jsx)(item_Item,{title:strings.seller,children:Object(jsx_runtime.jsx)("span",{title:props.sellerName,children:props.sellerName})}):null,"number"==typeof props.amount.received?Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsxs)(item_Item,{title:strings.receivedAmount,children:[padDigits(props.amount.received,props.decimalPlaces)," ",props.symbol]}),Object(jsx_runtime.jsxs)(item_Item,{title:strings.remainingAmount,children:[padDigits(remainingAmount,props.decimalPlaces)," ",props.symbol]})]}):null,props.deadline&&remainingAmount>0?Object(jsx_runtime.jsxs)(item_Item,{title:strings.deadline,children:[new Intl.DateTimeFormat(null!==(_props$deadline$dateL2=props.deadline.dateLocale)&&void 0!==_props$deadline$dateL2?_props$deadline$dateL2:"en-US").format(props.deadline.datetime),props.deadline.humanized&&Object(jsx_runtime.jsxs)("span",{children:[" (",function _getFromDate(date){var _props$deadline$dateL,_props$deadline,currentDate=new Date,dayCount=(date.getTime()-currentDate.getTime())/864e5,unit="day",value=dayCount;if(dayCount>=0&&dayCount<=1){var hoursCount=Math.abs(currentDate.getTime()-date.getTime())/36e5;if(unit="hours",value=hoursCount,hoursCount<=1){var minCount=Math.abs(currentDate.getTime()-date.getTime())/1e3/60;unit="minute",value=Math.ceil(minCount)}}return new Intl.RelativeTimeFormat(null!==(_props$deadline$dateL=null===(_props$deadline=props.deadline)||void 0===_props$deadline?void 0:_props$deadline.dateLocale)&&void 0!==_props$deadline$dateL?_props$deadline$dateL:"en-US").format(Math.ceil(value),unit)}(props.deadline.datetime),")"]})]}):null,null!==(_props$transactions=props.transactions)&&void 0!==_props$transactions&&_props$transactions.length?Object(jsx_runtime.jsx)(item_Item,{title:strings.transactions.replace("{txAmount}",props.transactions.length.toString()),children:Object(jsx_runtime.jsx)(TransactionList,{children:props.transactions.map((function(transaction,index){return Object(jsx_runtime.jsxs)("li",{children:[Object(jsx_runtime.jsx)("a",{href:transaction.txUrl,title:"Transaction",rel:"noreferrer",target:"_blank",children:Object(string.a)(transaction.txHash,3)}),Object(jsx_runtime.jsxs)("i",{children:["(",padDigits(transaction.amount,props.decimalPlaces)," ",props.symbol,")"]})]},index)}))})}):null,Object(jsx_runtime.jsxs)(item_Item,{title:strings.status,children:[props.waitAnimation&&props.status===PaymentStatus.PENDING&&Object(jsx_runtime.jsx)(Spinner,{}),Object(jsx_runtime.jsx)(AdaptiveSpan.a,{showTitle:!0,text:function _getStatus(){return remainingAmount<=0?strings.txStatus.complete:props.customStatusText?props.customStatusText:strings.txStatus[props.status]}(),style:"bold"})]})]})]}),Object(jsx_runtime.jsxs)("div",{children:[props.onCancel&&Object(jsx_runtime.jsx)(CancelButton,{onClick:props.onCancel,children:strings.cancel}),props.helpUrl&&Object(jsx_runtime.jsxs)(HelpLink,{href:props.helpUrl,title:strings.help,target:"blank",children:[Object(jsx_runtime.jsx)(Icon.a,{type:Icon.b.HelpCircleO,style:{width:13,lineHeight:"15px"}}),strings.help]})]})]})};PaymentRequest_PaymentRequest.displayName="PaymentRequest",PaymentRequest_PaymentRequest.defaultProps=defaultProps;try{PaymentRequest_PaymentRequest.displayName="PaymentRequest",PaymentRequest_PaymentRequest.__docgenInfo={description:"",displayName:"PaymentRequest",props:{address:{defaultValue:null,description:"",name:"address",required:!0,type:{name:"string"}},symbol:{defaultValue:null,description:"",name:"symbol",required:!0,type:{name:"string"}},amount:{defaultValue:null,description:"",name:"amount",required:!0,type:{name:"{ toPay: number; received?: number | undefined; }"}},logos:{defaultValue:null,description:"",name:"logos",required:!0,type:{name:"{ coin: string; company?: string | undefined; }"}},decimalPlaces:{defaultValue:null,description:"",name:"decimalPlaces",required:!0,type:{name:"number"}},waitAnimation:{defaultValue:null,description:"",name:"waitAnimation",required:!1,type:{name:"boolean"}},sellerName:{defaultValue:null,description:"",name:"sellerName",required:!1,type:{name:"string"}},strings:{defaultValue:null,description:"",name:"strings",required:!1,type:{name:"Partial<IStrings>"}},onCancel:{defaultValue:null,description:"",name:"onCancel",required:!1,type:{name:"(() => void)"}},helpUrl:{defaultValue:null,description:"",name:"helpUrl",required:!1,type:{name:"string"}},showQRCode:{defaultValue:null,description:"",name:"showQRCode",required:!1,type:{name:"boolean"}},transactions:{defaultValue:null,description:"",name:"transactions",required:!1,type:{name:"ITransaction[]"}},customStatusText:{defaultValue:null,description:"",name:"customStatusText",required:!1,type:{name:"string"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"PaymentStatus"}},deadline:{defaultValue:null,description:"",name:"deadline",required:!1,type:{name:"{ dateLocale?: string; datetime: Date; humanized?: boolean | undefined; } | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/PaymentRequest/index.tsx#PaymentRequest"]={docgenInfo:PaymentRequest_PaymentRequest.__docgenInfo,name:"PaymentRequest",path:"src/components/PaymentRequest/index.tsx#PaymentRequest"})}catch(__react_docgen_typescript_loader_error){}function index_stories_slicedToArray(arr,i){return function index_stories_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function index_stories_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function index_stories_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return index_stories_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return index_stories_arrayLikeToArray(o,minLen)}(arr,i)||function index_stories_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function index_stories_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var companyAsset=__webpack_require__(1101),index_stories_Basic=(__webpack_exports__.default={parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'PaymentRequest\',\\\\n  component: PaymentRequest,\\\\n  argTypes: {\\\\n    // todo\\\\n  }\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\"\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill({\\\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  amount: 0.01\\\\n}, 0, 20);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done \\\\\\\\o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\'\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\'\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  }\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n          company: companyAsset\\\\n        }}\\\\n        address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1\\\\n          }\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\'\\\\n          }\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":17},\\"endLoc\\":{\\"col\\":1,\\"line\\":29},\\"startBody\\":{\\"col\\":21,\\"line\\":17},\\"endBody\\":{\\"col\\":1,\\"line\\":29}},\\"Detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":31},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":24,\\"line\\":31},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"AnimatedStatus\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":77},\\"startBody\\":{\\"col\\":30,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":77}},\\"Transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":79},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":26,\\"line\\":79},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"Completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":122},\\"endLoc\\":{\\"col\\":1,\\"line\\":145},\\"startBody\\":{\\"col\\":25,\\"line\\":122},\\"endBody\\":{\\"col\\":1,\\"line\\":145}},\\"WithActions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":147},\\"endLoc\\":{\\"col\\":1,\\"line\\":183},\\"startBody\\":{\\"col\\":27,\\"line\\":147},\\"endBody\\":{\\"col\\":1,\\"line\\":183}},\\"CustomStrings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":185},\\"endLoc\\":{\\"col\\":1,\\"line\\":238},\\"startBody\\":{\\"col\\":29,\\"line\\":185},\\"endBody\\":{\\"col\\":1,\\"line\\":238}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":240},\\"endLoc\\":{\\"col\\":1,\\"line\\":295},\\"startBody\\":{\\"col\\":36,\\"line\\":240},\\"endBody\\":{\\"col\\":1,\\"line\\":295}}};\\nimport React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'PaymentRequest\',\\\\n  component: PaymentRequest,\\\\n  argTypes: {\\\\n    // todo\\\\n  }\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\"\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill({\\\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  amount: 0.01\\\\n}, 0, 20);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done \\\\\\\\o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\'\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\'\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  }\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n          company: companyAsset\\\\n        }}\\\\n        address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1\\\\n          }\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\'\\\\n          }\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":17},\\"endLoc\\":{\\"col\\":1,\\"line\\":29},\\"startBody\\":{\\"col\\":21,\\"line\\":17},\\"endBody\\":{\\"col\\":1,\\"line\\":29}},\\"detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":31},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":24,\\"line\\":31},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"animated-status\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":77},\\"startBody\\":{\\"col\\":30,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":77}},\\"transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":79},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":26,\\"line\\":79},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":122},\\"endLoc\\":{\\"col\\":1,\\"line\\":145},\\"startBody\\":{\\"col\\":25,\\"line\\":122},\\"endBody\\":{\\"col\\":1,\\"line\\":145}},\\"with-actions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":147},\\"endLoc\\":{\\"col\\":1,\\"line\\":183},\\"startBody\\":{\\"col\\":27,\\"line\\":147},\\"endBody\\":{\\"col\\":1,\\"line\\":183}},\\"custom-strings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":185},\\"endLoc\\":{\\"col\\":1,\\"line\\":238},\\"startBody\\":{\\"col\\":29,\\"line\\":185},\\"endBody\\":{\\"col\\":1,\\"line\\":238}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":240},\\"endLoc\\":{\\"col\\":1,\\"line\\":295},\\"startBody\\":{\\"col\\":36,\\"line\\":240},\\"endBody\\":{\\"col\\":1,\\"line\\":295}}}},},\\n  title: \'PaymentRequest\',\\n  component: PaymentRequest,\\n  argTypes: {\\n    // todo\\n  }\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\"\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9 }}\\n    />\\n  )\\n};;\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill({\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  amount: 0.01\\n}, 0, 20);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done \\\\o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\'\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\'\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n          company: companyAsset\\n        }}\\n        address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1\\n          }\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\'\\n          }\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":24},"endLoc":{"col":1,"line":36},"startBody":{"col":21,"line":24},"endBody":{"col":1,"line":36}},"Detailed":{"startLoc":{"col":24,"line":38},"endLoc":{"col":1,"line":60},"startBody":{"col":24,"line":38},"endBody":{"col":1,"line":60}},"AnimatedStatus":{"startLoc":{"col":30,"line":62},"endLoc":{"col":1,"line":84},"startBody":{"col":30,"line":62},"endBody":{"col":1,"line":84}},"Transacted":{"startLoc":{"col":26,"line":86},"endLoc":{"col":1,"line":120},"startBody":{"col":26,"line":86},"endBody":{"col":1,"line":120}},"Completed":{"startLoc":{"col":25,"line":129},"endLoc":{"col":1,"line":152},"startBody":{"col":25,"line":129},"endBody":{"col":1,"line":152}},"WithActions":{"startLoc":{"col":27,"line":154},"endLoc":{"col":1,"line":190},"startBody":{"col":27,"line":154},"endBody":{"col":1,"line":190}},"CustomStrings":{"startLoc":{"col":29,"line":192},"endLoc":{"col":1,"line":245},"startBody":{"col":29,"line":192},"endBody":{"col":1,"line":245}},"Simulation":{"startLoc":{"col":36,"line":247},"endLoc":{"col":1,"line":302},"startBody":{"col":36,"line":247},"endBody":{"col":1,"line":302}}};\n\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {\\n  title: \'PaymentRequest\',\\n  component: PaymentRequest,\\n  argTypes: {\\n    // todo\\n  }\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\"\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9 }}\\n    />\\n  )\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill({\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  amount: 0.01\\n}, 0, 20);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done \\\\o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\'\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\'\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n          company: companyAsset\\n        }}\\n        address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1\\n          }\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\'\\n          }\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":17},"endLoc":{"col":1,"line":29},"startBody":{"col":21,"line":17},"endBody":{"col":1,"line":29}},"Detailed":{"startLoc":{"col":24,"line":31},"endLoc":{"col":1,"line":53},"startBody":{"col":24,"line":31},"endBody":{"col":1,"line":53}},"AnimatedStatus":{"startLoc":{"col":30,"line":55},"endLoc":{"col":1,"line":77},"startBody":{"col":30,"line":55},"endBody":{"col":1,"line":77}},"Transacted":{"startLoc":{"col":26,"line":79},"endLoc":{"col":1,"line":113},"startBody":{"col":26,"line":79},"endBody":{"col":1,"line":113}},"Completed":{"startLoc":{"col":25,"line":122},"endLoc":{"col":1,"line":145},"startBody":{"col":25,"line":122},"endBody":{"col":1,"line":145}},"WithActions":{"startLoc":{"col":27,"line":147},"endLoc":{"col":1,"line":183},"startBody":{"col":27,"line":147},"endBody":{"col":1,"line":183}},"CustomStrings":{"startLoc":{"col":29,"line":185},"endLoc":{"col":1,"line":238},"startBody":{"col":29,"line":185},"endBody":{"col":1,"line":238}},"Simulation":{"startLoc":{"col":36,"line":240},"endLoc":{"col":1,"line":295},"startBody":{"col":36,"line":240},"endBody":{"col":1,"line":295}}};\nimport React, { Fragment, useState } from \'react\';\nimport { PaymentRequest } from \'../PaymentRequest\';\nimport { PaymentStatus } from \'./enums/paymentStatus\';\nimport { ITransaction } from \'./interfaces\';\n\n\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\n\nexport default {parameters: {"storySource":{"source":"\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'PaymentRequest\',\\\\n  component: PaymentRequest,\\\\n  argTypes: {\\\\n    // todo\\\\n  }\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\"\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill({\\\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  amount: 0.01\\\\n}, 0, 20);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done \\\\\\\\o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\'\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\'\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  }\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n          company: companyAsset\\\\n        }}\\\\n        address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1\\\\n          }\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\'\\\\n          }\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":17},\\"endLoc\\":{\\"col\\":1,\\"line\\":29},\\"startBody\\":{\\"col\\":21,\\"line\\":17},\\"endBody\\":{\\"col\\":1,\\"line\\":29}},\\"Detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":31},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":24,\\"line\\":31},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"AnimatedStatus\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":77},\\"startBody\\":{\\"col\\":30,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":77}},\\"Transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":79},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":26,\\"line\\":79},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"Completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":122},\\"endLoc\\":{\\"col\\":1,\\"line\\":145},\\"startBody\\":{\\"col\\":25,\\"line\\":122},\\"endBody\\":{\\"col\\":1,\\"line\\":145}},\\"WithActions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":147},\\"endLoc\\":{\\"col\\":1,\\"line\\":183},\\"startBody\\":{\\"col\\":27,\\"line\\":147},\\"endBody\\":{\\"col\\":1,\\"line\\":183}},\\"CustomStrings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":185},\\"endLoc\\":{\\"col\\":1,\\"line\\":238},\\"startBody\\":{\\"col\\":29,\\"line\\":185},\\"endBody\\":{\\"col\\":1,\\"line\\":238}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":240},\\"endLoc\\":{\\"col\\":1,\\"line\\":295},\\"startBody\\":{\\"col\\":36,\\"line\\":240},\\"endBody\\":{\\"col\\":1,\\"line\\":295}}};\\nimport React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useState } from \'react\';\\\\nimport { PaymentRequest } from \'../PaymentRequest\';\\\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\\\nimport { ITransaction } from \'./interfaces\';\\\\n\\\\n\\\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\\\n\\\\nexport default {\\\\n  title: \'PaymentRequest\',\\\\n  component: PaymentRequest,\\\\n  argTypes: {\\\\n    // todo\\\\n  }\\\\n};\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\"\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9 }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Detailed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const AnimatedStatus = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest waitAnimation\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0 }}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Transacted = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.PENDING}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nconst txs = new Array<ITransaction>(30);\\\\ntxs.fill({\\\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n  amount: 0.01\\\\n}, 0, 20);\\\\n\\\\nexport const Completed = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      status={PaymentStatus.COMPLETE}\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.2, received: 0.2 }}\\\\n      transactions={txs}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const WithActions = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      customStatusText={\'Waiting for payment\'}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const CustomStrings = (): React.ReactNode => {\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n  return (\\\\n    <PaymentRequest\\\\n      symbol=\'BTC\'\\\\n      decimalPlaces={8}\\\\n      sellerName=\'Such Company LTD\'\\\\n      logos={{\\\\n        coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n        company: companyAsset\\\\n      }}\\\\n      address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n      amount={{ toPay: 0.9, received: 0.2 }}\\\\n      transactions={[\\\\n        {\\\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n          amount: 0.1\\\\n        },\\\\n        {\\\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n          amount: 0.1\\\\n        }\\\\n      ]}\\\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\\\n      deadline={{\\\\n        dateLocale: \'en-US\',\\\\n        datetime: dueDate,\\\\n        humanized: true\\\\n      }}\\\\n      customStatusText={\'Custom status message\'}\\\\n      strings={{\\\\n        cancel: \'Very cancelling\',\\\\n        seller: \'Seller\',\\\\n        deadline: \'Deadline\',\\\\n        // txStatus is overriden by customStatusText props in this example.\\\\n        txStatus: {\\\\n          complete: \'Done \\\\\\\\o/\',\\\\n          failed: \'Failed :(\',\\\\n          pending: \'is pending...\'\\\\n        },\\\\n        request: \'Pay {amount} {symbol} to get your item\',\\\\n        help: \'Wow, help here\',\\\\n        status: \'Transaction\',\\\\n        receivedAmount: \'Received:\',\\\\n        remainingAmount: \'Remaining:\',\\\\n        transactions: \'{txAmount} transactions\'\\\\n      }}\\\\n    />\\\\n  )\\\\n};\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  const [status, setStatus] = useState<PaymentStatus>();\\\\n\\\\n  const dueDate = new Date();\\\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\\\n\\\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\\\n    setStatus(status);\\\\n  }\\\\n\\\\n  return (\\\\n    <Fragment>\\\\n      <div style={{ marginBottom: \'20px\' }}>\\\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\\\n      </div>\\\\n      <PaymentRequest\\\\n        symbol=\'BTC\'\\\\n        decimalPlaces={8}\\\\n        sellerName=\'Such Company LTD\'\\\\n        logos={{\\\\n          coin: \\\\\\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\\\\\",\\\\n          company: companyAsset\\\\n        }}\\\\n        address=\\\\\\"1BitcoinEaterAddressDontSendf59kuE\\\\\\"\\\\n        amount={{ toPay: 0.9, received: 0.2 }}\\\\n        transactions={[\\\\n          {\\\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\\\n            amount: 0.1\\\\n          },\\\\n          {\\\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\\\n            amount: 0.1\\\\n          }\\\\n        ]}\\\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\\\n        deadline={{\\\\n          dateLocale: \'en-US\',\\\\n          datetime: dueDate,\\\\n          humanized: true\\\\n        }}\\\\n        status={status}\\\\n        strings={{\\\\n          txStatus: {\\\\n            failed: \'Payment failed :(\',\\\\n            pending: \'Waiting for payment\',\\\\n            complete: \'Paid! Redirecting...\'\\\\n          }\\\\n        }}\\\\n      />\\\\n    </Fragment>\\\\n  );\\\\n};\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":17},\\"endLoc\\":{\\"col\\":1,\\"line\\":29},\\"startBody\\":{\\"col\\":21,\\"line\\":17},\\"endBody\\":{\\"col\\":1,\\"line\\":29}},\\"detailed\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":31},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":24,\\"line\\":31},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"animated-status\\":{\\"startLoc\\":{\\"col\\":30,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":77},\\"startBody\\":{\\"col\\":30,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":77}},\\"transacted\\":{\\"startLoc\\":{\\"col\\":26,\\"line\\":79},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":26,\\"line\\":79},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"completed\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":122},\\"endLoc\\":{\\"col\\":1,\\"line\\":145},\\"startBody\\":{\\"col\\":25,\\"line\\":122},\\"endBody\\":{\\"col\\":1,\\"line\\":145}},\\"with-actions\\":{\\"startLoc\\":{\\"col\\":27,\\"line\\":147},\\"endLoc\\":{\\"col\\":1,\\"line\\":183},\\"startBody\\":{\\"col\\":27,\\"line\\":147},\\"endBody\\":{\\"col\\":1,\\"line\\":183}},\\"custom-strings\\":{\\"startLoc\\":{\\"col\\":29,\\"line\\":185},\\"endLoc\\":{\\"col\\":1,\\"line\\":238},\\"startBody\\":{\\"col\\":29,\\"line\\":185},\\"endBody\\":{\\"col\\":1,\\"line\\":238}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":240},\\"endLoc\\":{\\"col\\":1,\\"line\\":295},\\"startBody\\":{\\"col\\":36,\\"line\\":240},\\"endBody\\":{\\"col\\":1,\\"line\\":295}}}},},\\n  title: \'PaymentRequest\',\\n  component: PaymentRequest,\\n  argTypes: {\\n    // todo\\n  }\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\"\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9 }}\\n    />\\n  )\\n};;\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill({\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  amount: 0.01\\n}, 0, 20);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done \\\\o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\'\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\'\\n      }}\\n    />\\n  )\\n};;\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n          company: companyAsset\\n        }}\\n        address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1\\n          }\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\'\\n          }\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":24},"endLoc":{"col":1,"line":36},"startBody":{"col":21,"line":24},"endBody":{"col":1,"line":36}},"detailed":{"startLoc":{"col":24,"line":38},"endLoc":{"col":1,"line":60},"startBody":{"col":24,"line":38},"endBody":{"col":1,"line":60}},"animated-status":{"startLoc":{"col":30,"line":62},"endLoc":{"col":1,"line":84},"startBody":{"col":30,"line":62},"endBody":{"col":1,"line":84}},"transacted":{"startLoc":{"col":26,"line":86},"endLoc":{"col":1,"line":120},"startBody":{"col":26,"line":86},"endBody":{"col":1,"line":120}},"completed":{"startLoc":{"col":25,"line":129},"endLoc":{"col":1,"line":152},"startBody":{"col":25,"line":129},"endBody":{"col":1,"line":152}},"with-actions":{"startLoc":{"col":27,"line":154},"endLoc":{"col":1,"line":190},"startBody":{"col":27,"line":154},"endBody":{"col":1,"line":190}},"custom-strings":{"startLoc":{"col":29,"line":192},"endLoc":{"col":1,"line":245},"startBody":{"col":29,"line":192},"endBody":{"col":1,"line":245}},"simulation":{"startLoc":{"col":36,"line":247},"endLoc":{"col":1,"line":302},"startBody":{"col":36,"line":247},"endBody":{"col":1,"line":302}}}},"storySource":{"source":"import React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {\\n  title: \'PaymentRequest\',\\n  component: PaymentRequest,\\n  argTypes: {\\n    // todo\\n  }\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\"\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9 }}\\n    />\\n  )\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill({\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  amount: 0.01\\n}, 0, 20);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done \\\\o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\'\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\'\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n          company: companyAsset\\n        }}\\n        address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1\\n          }\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\'\\n          }\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};","locationsMap":{"basic":{"startLoc":{"col":21,"line":17},"endLoc":{"col":1,"line":29},"startBody":{"col":21,"line":17},"endBody":{"col":1,"line":29}},"detailed":{"startLoc":{"col":24,"line":31},"endLoc":{"col":1,"line":53},"startBody":{"col":24,"line":31},"endBody":{"col":1,"line":53}},"animated-status":{"startLoc":{"col":30,"line":55},"endLoc":{"col":1,"line":77},"startBody":{"col":30,"line":55},"endBody":{"col":1,"line":77}},"transacted":{"startLoc":{"col":26,"line":79},"endLoc":{"col":1,"line":113},"startBody":{"col":26,"line":79},"endBody":{"col":1,"line":113}},"completed":{"startLoc":{"col":25,"line":122},"endLoc":{"col":1,"line":145},"startBody":{"col":25,"line":122},"endBody":{"col":1,"line":145}},"with-actions":{"startLoc":{"col":27,"line":147},"endLoc":{"col":1,"line":183},"startBody":{"col":27,"line":147},"endBody":{"col":1,"line":183}},"custom-strings":{"startLoc":{"col":29,"line":185},"endLoc":{"col":1,"line":238},"startBody":{"col":29,"line":185},"endBody":{"col":1,"line":238}},"simulation":{"startLoc":{"col":36,"line":240},"endLoc":{"col":1,"line":295},"startBody":{"col":36,"line":240},"endBody":{"col":1,"line":295}}}},},\n  title: \'PaymentRequest\',\n  component: PaymentRequest,\n  argTypes: {\n    // todo\n  }\n};\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg"\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9 }}\n    />\n  )\n};;;\n\nexport const Detailed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;;\n\nexport const AnimatedStatus = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest waitAnimation\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;;\n\nexport const Transacted = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1\n        }\n      ]}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;;\n\nconst txs = new Array<ITransaction>(30);\ntxs.fill({\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n  amount: 0.01\n}, 0, 20);\n\nexport const Completed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.COMPLETE}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.2, received: 0.2 }}\n      transactions={txs}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;;\n\nexport const WithActions = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1\n        }\n      ]}\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\n      customStatusText={\'Waiting for payment\'}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;;\n\nexport const CustomStrings = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1\n        }\n      ]}\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n      customStatusText={\'Custom status message\'}\n      strings={{\n        cancel: \'Very cancelling\',\n        seller: \'Seller\',\n        deadline: \'Deadline\',\n        // txStatus is overriden by customStatusText props in this example.\n        txStatus: {\n          complete: \'Done \\o/\',\n          failed: \'Failed :(\',\n          pending: \'is pending...\'\n        },\n        request: \'Pay {amount} {symbol} to get your item\',\n        help: \'Wow, help here\',\n        status: \'Transaction\',\n        receivedAmount: \'Received:\',\n        remainingAmount: \'Remaining:\',\n        transactions: \'{txAmount} transactions\'\n      }}\n    />\n  )\n};;;\n\nexport const Simulation: React.FC = () => {\n  const [status, setStatus] = useState<PaymentStatus>();\n\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\n    setStatus(status);\n  }\n\n  return (\n    <Fragment>\n      <div style={{ marginBottom: \'20px\' }}>\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\n      </div>\n      <PaymentRequest\n        symbol=\'BTC\'\n        decimalPlaces={8}\n        sellerName=\'Such Company LTD\'\n        logos={{\n          coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n          company: companyAsset\n        }}\n        address="1BitcoinEaterAddressDontSendf59kuE"\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n            amount: 0.1\n          },\n          {\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n            amount: 0.1\n          }\n        ]}\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n        deadline={{\n          dateLocale: \'en-US\',\n          datetime: dueDate,\n          humanized: true\n        }}\n        status={status}\n        strings={{\n          txStatus: {\n            failed: \'Payment failed :(\',\n            pending: \'Waiting for payment\',\n            complete: \'Paid! Redirecting...\'\n          }\n        }}\n      />\n    </Fragment>\n  );\n};\n',locationsMap:{basic:{startLoc:{col:21,line:31},endLoc:{col:1,line:43},startBody:{col:21,line:31},endBody:{col:1,line:43}},detailed:{startLoc:{col:24,line:45},endLoc:{col:1,line:67},startBody:{col:24,line:45},endBody:{col:1,line:67}},"animated-status":{startLoc:{col:30,line:69},endLoc:{col:1,line:91},startBody:{col:30,line:69},endBody:{col:1,line:91}},transacted:{startLoc:{col:26,line:93},endLoc:{col:1,line:127},startBody:{col:26,line:93},endBody:{col:1,line:127}},completed:{startLoc:{col:25,line:136},endLoc:{col:1,line:159},startBody:{col:25,line:136},endBody:{col:1,line:159}},"with-actions":{startLoc:{col:27,line:161},endLoc:{col:1,line:197},startBody:{col:27,line:161},endBody:{col:1,line:197}},"custom-strings":{startLoc:{col:29,line:199},endLoc:{col:1,line:252},startBody:{col:29,line:199},endBody:{col:1,line:252}},simulation:{startLoc:{col:36,line:254},endLoc:{col:1,line:309},startBody:{col:36,line:254},endBody:{col:1,line:309}}}}},_defineProperty(_parameters,"storySource",{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {\\n  title: \'PaymentRequest\',\\n  component: PaymentRequest,\\n  argTypes: {\\n    // todo\\n  }\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\"\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9 }}\\n    />\\n  )\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill({\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  amount: 0.01\\n}, 0, 20);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done \\\\o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\'\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\'\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n          company: companyAsset\\n        }}\\n        address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1\\n          }\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\'\\n          }\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":17},"endLoc":{"col":1,"line":29},"startBody":{"col":21,"line":17},"endBody":{"col":1,"line":29}},"Detailed":{"startLoc":{"col":24,"line":31},"endLoc":{"col":1,"line":53},"startBody":{"col":24,"line":31},"endBody":{"col":1,"line":53}},"AnimatedStatus":{"startLoc":{"col":30,"line":55},"endLoc":{"col":1,"line":77},"startBody":{"col":30,"line":55},"endBody":{"col":1,"line":77}},"Transacted":{"startLoc":{"col":26,"line":79},"endLoc":{"col":1,"line":113},"startBody":{"col":26,"line":79},"endBody":{"col":1,"line":113}},"Completed":{"startLoc":{"col":25,"line":122},"endLoc":{"col":1,"line":145},"startBody":{"col":25,"line":122},"endBody":{"col":1,"line":145}},"WithActions":{"startLoc":{"col":27,"line":147},"endLoc":{"col":1,"line":183},"startBody":{"col":27,"line":147},"endBody":{"col":1,"line":183}},"CustomStrings":{"startLoc":{"col":29,"line":185},"endLoc":{"col":1,"line":238},"startBody":{"col":29,"line":185},"endBody":{"col":1,"line":238}},"Simulation":{"startLoc":{"col":36,"line":240},"endLoc":{"col":1,"line":295},"startBody":{"col":36,"line":240},"endBody":{"col":1,"line":295}}};\nimport React, { Fragment, useState } from \'react\';\nimport { PaymentRequest } from \'../PaymentRequest\';\nimport { PaymentStatus } from \'./enums/paymentStatus\';\nimport { ITransaction } from \'./interfaces\';\n\n\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\n\nexport default {parameters: {"storySource":{"source":"import React, { Fragment, useState } from \'react\';\\nimport { PaymentRequest } from \'../PaymentRequest\';\\nimport { PaymentStatus } from \'./enums/paymentStatus\';\\nimport { ITransaction } from \'./interfaces\';\\n\\n\\nconst companyAsset = require(\'../../assets/fictiveCompany.png\');\\n\\nexport default {\\n  title: \'PaymentRequest\',\\n  component: PaymentRequest,\\n  argTypes: {\\n    // todo\\n  }\\n};\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\"\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9 }}\\n    />\\n  )\\n};\\n\\nexport const Detailed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const AnimatedStatus = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest waitAnimation\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0 }}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Transacted = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.PENDING}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nconst txs = new Array<ITransaction>(30);\\ntxs.fill({\\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n  amount: 0.01\\n}, 0, 20);\\n\\nexport const Completed = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      status={PaymentStatus.COMPLETE}\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.2, received: 0.2 }}\\n      transactions={txs}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const WithActions = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      customStatusText={\'Waiting for payment\'}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n    />\\n  )\\n};\\n\\nexport const CustomStrings = (): React.ReactNode => {\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n  return (\\n    <PaymentRequest\\n      symbol=\'BTC\'\\n      decimalPlaces={8}\\n      sellerName=\'Such Company LTD\'\\n      logos={{\\n        coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n        company: companyAsset\\n      }}\\n      address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n      amount={{ toPay: 0.9, received: 0.2 }}\\n      transactions={[\\n        {\\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n          amount: 0.1\\n        },\\n        {\\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n          amount: 0.1\\n        }\\n      ]}\\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\\n      deadline={{\\n        dateLocale: \'en-US\',\\n        datetime: dueDate,\\n        humanized: true\\n      }}\\n      customStatusText={\'Custom status message\'}\\n      strings={{\\n        cancel: \'Very cancelling\',\\n        seller: \'Seller\',\\n        deadline: \'Deadline\',\\n        // txStatus is overriden by customStatusText props in this example.\\n        txStatus: {\\n          complete: \'Done \\\\o/\',\\n          failed: \'Failed :(\',\\n          pending: \'is pending...\'\\n        },\\n        request: \'Pay {amount} {symbol} to get your item\',\\n        help: \'Wow, help here\',\\n        status: \'Transaction\',\\n        receivedAmount: \'Received:\',\\n        remainingAmount: \'Remaining:\',\\n        transactions: \'{txAmount} transactions\'\\n      }}\\n    />\\n  )\\n};\\n\\nexport const Simulation: React.FC = () => {\\n  const [status, setStatus] = useState<PaymentStatus>();\\n\\n  const dueDate = new Date();\\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\\n\\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\\n    setStatus(status);\\n  }\\n\\n  return (\\n    <Fragment>\\n      <div style={{ marginBottom: \'20px\' }}>\\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\\n      </div>\\n      <PaymentRequest\\n        symbol=\'BTC\'\\n        decimalPlaces={8}\\n        sellerName=\'Such Company LTD\'\\n        logos={{\\n          coin: \\"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\\",\\n          company: companyAsset\\n        }}\\n        address=\\"1BitcoinEaterAddressDontSendf59kuE\\"\\n        amount={{ toPay: 0.9, received: 0.2 }}\\n        transactions={[\\n          {\\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\\n            amount: 0.1\\n          },\\n          {\\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\\n            amount: 0.1\\n          }\\n        ]}\\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\\n        deadline={{\\n          dateLocale: \'en-US\',\\n          datetime: dueDate,\\n          humanized: true\\n        }}\\n        status={status}\\n        strings={{\\n          txStatus: {\\n            failed: \'Payment failed :(\',\\n            pending: \'Waiting for payment\',\\n            complete: \'Paid! Redirecting...\'\\n          }\\n        }}\\n      />\\n    </Fragment>\\n  );\\n};","locationsMap":{"basic":{"startLoc":{"col":21,"line":17},"endLoc":{"col":1,"line":29},"startBody":{"col":21,"line":17},"endBody":{"col":1,"line":29}},"detailed":{"startLoc":{"col":24,"line":31},"endLoc":{"col":1,"line":53},"startBody":{"col":24,"line":31},"endBody":{"col":1,"line":53}},"animated-status":{"startLoc":{"col":30,"line":55},"endLoc":{"col":1,"line":77},"startBody":{"col":30,"line":55},"endBody":{"col":1,"line":77}},"transacted":{"startLoc":{"col":26,"line":79},"endLoc":{"col":1,"line":113},"startBody":{"col":26,"line":79},"endBody":{"col":1,"line":113}},"completed":{"startLoc":{"col":25,"line":122},"endLoc":{"col":1,"line":145},"startBody":{"col":25,"line":122},"endBody":{"col":1,"line":145}},"with-actions":{"startLoc":{"col":27,"line":147},"endLoc":{"col":1,"line":183},"startBody":{"col":27,"line":147},"endBody":{"col":1,"line":183}},"custom-strings":{"startLoc":{"col":29,"line":185},"endLoc":{"col":1,"line":238},"startBody":{"col":29,"line":185},"endBody":{"col":1,"line":238}},"simulation":{"startLoc":{"col":36,"line":240},"endLoc":{"col":1,"line":295},"startBody":{"col":36,"line":240},"endBody":{"col":1,"line":295}}}},},\n  title: \'PaymentRequest\',\n  component: PaymentRequest,\n  argTypes: {\n    // todo\n  }\n};\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg"\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9 }}\n    />\n  )\n};;\n\nexport const Detailed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;\n\nexport const AnimatedStatus = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest waitAnimation\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;\n\nexport const Transacted = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1\n        }\n      ]}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;\n\nconst txs = new Array<ITransaction>(30);\ntxs.fill({\n  txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n  txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n  amount: 0.01\n}, 0, 20);\n\nexport const Completed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.COMPLETE}\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.2, received: 0.2 }}\n      transactions={txs}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;\n\nexport const WithActions = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1\n        }\n      ]}\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\n      customStatusText={\'Waiting for payment\'}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};;\n\nexport const CustomStrings = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol=\'BTC\'\n      decimalPlaces={8}\n      sellerName=\'Such Company LTD\'\n      logos={{\n        coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n        company: companyAsset\n      }}\n      address="1BitcoinEaterAddressDontSendf59kuE"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n          amount: 0.1\n        },\n        {\n          txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n          amount: 0.1\n        }\n      ]}\n      helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n      onCancel={() => alert(\'User wants to cancel, do something here!\')}\n      deadline={{\n        dateLocale: \'en-US\',\n        datetime: dueDate,\n        humanized: true\n      }}\n      customStatusText={\'Custom status message\'}\n      strings={{\n        cancel: \'Very cancelling\',\n        seller: \'Seller\',\n        deadline: \'Deadline\',\n        // txStatus is overriden by customStatusText props in this example.\n        txStatus: {\n          complete: \'Done \\o/\',\n          failed: \'Failed :(\',\n          pending: \'is pending...\'\n        },\n        request: \'Pay {amount} {symbol} to get your item\',\n        help: \'Wow, help here\',\n        status: \'Transaction\',\n        receivedAmount: \'Received:\',\n        remainingAmount: \'Remaining:\',\n        transactions: \'{txAmount} transactions\'\n      }}\n    />\n  )\n};;\n\nexport const Simulation: React.FC = () => {\n  const [status, setStatus] = useState<PaymentStatus>();\n\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\n    setStatus(status);\n  }\n\n  return (\n    <Fragment>\n      <div style={{ marginBottom: \'20px\' }}>\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\n      </div>\n      <PaymentRequest\n        symbol=\'BTC\'\n        decimalPlaces={8}\n        sellerName=\'Such Company LTD\'\n        logos={{\n          coin: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",\n          company: companyAsset\n        }}\n        address="1BitcoinEaterAddressDontSendf59kuE"\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: \'369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n            txUrl: \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\',\n            amount: 0.1\n          },\n          {\n            txHash: \'519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n            txUrl: \'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647\',\n            amount: 0.1\n          }\n        ]}\n        helpUrl=\'https://github.com/PaulFasola/adoption/blob/master/README.md\'\n        deadline={{\n          dateLocale: \'en-US\',\n          datetime: dueDate,\n          humanized: true\n        }}\n        status={status}\n        strings={{\n          txStatus: {\n            failed: \'Payment failed :(\',\n            pending: \'Waiting for payment\',\n            complete: \'Paid! Redirecting...\'\n          }\n        }}\n      />\n    </Fragment>\n  );\n};\n',locationsMap:{basic:{startLoc:{col:21,line:24},endLoc:{col:1,line:36},startBody:{col:21,line:24},endBody:{col:1,line:36}},detailed:{startLoc:{col:24,line:38},endLoc:{col:1,line:60},startBody:{col:24,line:38},endBody:{col:1,line:60}},"animated-status":{startLoc:{col:30,line:62},endLoc:{col:1,line:84},startBody:{col:30,line:62},endBody:{col:1,line:84}},transacted:{startLoc:{col:26,line:86},endLoc:{col:1,line:120},startBody:{col:26,line:86},endBody:{col:1,line:120}},completed:{startLoc:{col:25,line:129},endLoc:{col:1,line:152},startBody:{col:25,line:129},endBody:{col:1,line:152}},"with-actions":{startLoc:{col:27,line:154},endLoc:{col:1,line:190},startBody:{col:27,line:154},endBody:{col:1,line:190}},"custom-strings":{startLoc:{col:29,line:192},endLoc:{col:1,line:245},startBody:{col:29,line:192},endBody:{col:1,line:245}},simulation:{startLoc:{col:36,line:247},endLoc:{col:1,line:302},startBody:{col:36,line:247},endBody:{col:1,line:302}}}}),_defineProperty(_parameters,"storySource",{source:"import React, { Fragment, useState } from 'react';\nimport { PaymentRequest } from '../PaymentRequest';\nimport { PaymentStatus } from './enums/paymentStatus';\nimport { ITransaction } from './interfaces';\n\n\nconst companyAsset = require('../../assets/fictiveCompany.png');\n\nexport default {\n  title: 'PaymentRequest',\n  component: PaymentRequest,\n  argTypes: {\n    // todo\n  }\n};\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\"\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.9 }}\n    />\n  )\n};\n\nexport const Detailed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n        company: companyAsset\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};\n\nexport const AnimatedStatus = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest waitAnimation\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n        company: companyAsset\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.9, received: 0 }}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};\n\nexport const Transacted = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.PENDING}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n        company: companyAsset\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl: 'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl: 'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1\n        }\n      ]}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};\n\nconst txs = new Array<ITransaction>(30);\ntxs.fill({\n  txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n  txUrl: 'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n  amount: 0.01\n}, 0, 20);\n\nexport const Completed = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      status={PaymentStatus.COMPLETE}\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n        company: companyAsset\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.2, received: 0.2 }}\n      transactions={txs}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};\n\nexport const WithActions = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n        company: companyAsset\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl: 'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl: 'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1\n        }\n      ]}\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n      onCancel={() => alert('User wants to cancel, do something here!')}\n      customStatusText={'Waiting for payment'}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true\n      }}\n    />\n  )\n};\n\nexport const CustomStrings = (): React.ReactNode => {\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n  return (\n    <PaymentRequest\n      symbol='BTC'\n      decimalPlaces={8}\n      sellerName='Such Company LTD'\n      logos={{\n        coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n        company: companyAsset\n      }}\n      address=\"1BitcoinEaterAddressDontSendf59kuE\"\n      amount={{ toPay: 0.9, received: 0.2 }}\n      transactions={[\n        {\n          txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          txUrl: 'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n          amount: 0.1\n        },\n        {\n          txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          txUrl: 'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n          amount: 0.1\n        }\n      ]}\n      helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n      onCancel={() => alert('User wants to cancel, do something here!')}\n      deadline={{\n        dateLocale: 'en-US',\n        datetime: dueDate,\n        humanized: true\n      }}\n      customStatusText={'Custom status message'}\n      strings={{\n        cancel: 'Very cancelling',\n        seller: 'Seller',\n        deadline: 'Deadline',\n        // txStatus is overriden by customStatusText props in this example.\n        txStatus: {\n          complete: 'Done \\o/',\n          failed: 'Failed :(',\n          pending: 'is pending...'\n        },\n        request: 'Pay {amount} {symbol} to get your item',\n        help: 'Wow, help here',\n        status: 'Transaction',\n        receivedAmount: 'Received:',\n        remainingAmount: 'Remaining:',\n        transactions: '{txAmount} transactions'\n      }}\n    />\n  )\n};\n\nexport const Simulation: React.FC = () => {\n  const [status, setStatus] = useState<PaymentStatus>();\n\n  const dueDate = new Date();\n  dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes() + 15));\n\n  const _triggerStatus = (status: PaymentStatus) => (): void => {\n    setStatus(status);\n  }\n\n  return (\n    <Fragment>\n      <div style={{ marginBottom: '20px' }}>\n        <button onClick={_triggerStatus(PaymentStatus.COMPLETE)}>Trigger success</button>\n        <button onClick={_triggerStatus(PaymentStatus.FAILED)}>Trigger failure</button>\n      </div>\n      <PaymentRequest\n        symbol='BTC'\n        decimalPlaces={8}\n        sellerName='Such Company LTD'\n        logos={{\n          coin: \"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg\",\n          company: companyAsset\n        }}\n        address=\"1BitcoinEaterAddressDontSendf59kuE\"\n        amount={{ toPay: 0.9, received: 0.2 }}\n        transactions={[\n          {\n            txHash: '369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            txUrl: 'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1',\n            amount: 0.1\n          },\n          {\n            txHash: '519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            txUrl: 'https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647',\n            amount: 0.1\n          }\n        ]}\n        helpUrl='https://github.com/PaulFasola/adoption/blob/master/README.md'\n        deadline={{\n          dateLocale: 'en-US',\n          datetime: dueDate,\n          humanized: true\n        }}\n        status={status}\n        strings={{\n          txStatus: {\n            failed: 'Payment failed :(',\n            pending: 'Waiting for payment',\n            complete: 'Paid! Redirecting...'\n          }\n        }}\n      />\n    </Fragment>\n  );\n};",locationsMap:{basic:{startLoc:{col:21,line:17},endLoc:{col:1,line:29},startBody:{col:21,line:17},endBody:{col:1,line:29}},detailed:{startLoc:{col:24,line:31},endLoc:{col:1,line:53},startBody:{col:24,line:31},endBody:{col:1,line:53}},"animated-status":{startLoc:{col:30,line:55},endLoc:{col:1,line:77},startBody:{col:30,line:55},endBody:{col:1,line:77}},transacted:{startLoc:{col:26,line:79},endLoc:{col:1,line:113},startBody:{col:26,line:79},endBody:{col:1,line:113}},completed:{startLoc:{col:25,line:122},endLoc:{col:1,line:145},startBody:{col:25,line:122},endBody:{col:1,line:145}},"with-actions":{startLoc:{col:27,line:147},endLoc:{col:1,line:183},startBody:{col:27,line:147},endBody:{col:1,line:183}},"custom-strings":{startLoc:{col:29,line:185},endLoc:{col:1,line:238},startBody:{col:29,line:185},endBody:{col:1,line:238}},simulation:{startLoc:{col:36,line:240},endLoc:{col:1,line:295},startBody:{col:36,line:240},endBody:{col:1,line:295}}}}),_parameters),title:"PaymentRequest",component:PaymentRequest_PaymentRequest,argTypes:{}},function Basic(){return Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{symbol:"BTC",decimalPlaces:8,logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg"},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9}})});index_stories_Basic.displayName="Basic";var index_stories_Detailed=function Detailed(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{status:PaymentStatus.PENDING,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:0},deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};index_stories_Detailed.displayName="Detailed";var index_stories_AnimatedStatus=function AnimatedStatus(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{waitAnimation:!0,status:PaymentStatus.PENDING,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:0},deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};index_stories_AnimatedStatus.displayName="AnimatedStatus";var index_stories_Transacted=function Transacted(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{status:PaymentStatus.PENDING,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};index_stories_Transacted.displayName="Transacted";var txs=new Array(30);txs.fill({txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.01},0,20);var index_stories_Completed=function Completed(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{status:PaymentStatus.COMPLETE,symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.2,received:.2},transactions:txs,deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};index_stories_Completed.displayName="Completed";var index_stories_WithActions=function WithActions(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",onCancel:function onCancel(){return alert("User wants to cancel, do something here!")},customStatusText:"Waiting for payment",deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0}})};index_stories_WithActions.displayName="WithActions";var index_stories_CustomStrings=function CustomStrings(){var dueDate=new Date;return dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15)),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",onCancel:function onCancel(){return alert("User wants to cancel, do something here!")},deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0},customStatusText:"Custom status message",strings:{cancel:"Very cancelling",seller:"Seller",deadline:"Deadline",txStatus:{complete:"Done o/",failed:"Failed :(",pending:"is pending..."},request:"Pay {amount} {symbol} to get your item",help:"Wow, help here",status:"Transaction",receivedAmount:"Received:",remainingAmount:"Remaining:",transactions:"{txAmount} transactions"}})};index_stories_CustomStrings.displayName="CustomStrings";var index_stories_Simulation=function Simulation(){var _useState2=index_stories_slicedToArray(Object(react.useState)(),2),status=_useState2[0],setStatus=_useState2[1],dueDate=new Date;dueDate.setTime(dueDate.setMinutes(dueDate.getMinutes()+15));var _triggerStatus=function _triggerStatus(status){return function(){setStatus(status)}};return Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsxs)("div",{style:{marginBottom:"20px"},children:[Object(jsx_runtime.jsx)("button",{onClick:_triggerStatus(PaymentStatus.COMPLETE),children:"Trigger success"}),Object(jsx_runtime.jsx)("button",{onClick:_triggerStatus(PaymentStatus.FAILED),children:"Trigger failure"})]}),Object(jsx_runtime.jsx)(PaymentRequest_PaymentRequest,{symbol:"BTC",decimalPlaces:8,sellerName:"Such Company LTD",logos:{coin:"https://upload.wikimedia.org/wikipedia/commons/c/c5/Bitcoin_logo.svg",company:companyAsset},address:"1BitcoinEaterAddressDontSendf59kuE",amount:{toPay:.9,received:.2},transactions:[{txHash:"369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",txUrl:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1",amount:.1},{txHash:"519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",txUrl:"https://www.blockchain.com/btc/tx/519f6c9581ce27e0a59f5f8e427b672087e1f2eb1aead0d66288de62ed3e9647",amount:.1}],helpUrl:"https://github.com/PaulFasola/adoption/blob/master/README.md",deadline:{dateLocale:"en-US",datetime:dueDate,humanized:!0},status:status,strings:{txStatus:{failed:"Payment failed :(",pending:"Waiting for payment",complete:"Paid! Redirecting..."}}})]})};index_stories_Simulation.displayName="Simulation";try{index_stories_Simulation.displayName="Simulation",index_stories_Simulation.__docgenInfo={description:"",displayName:"Simulation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/PaymentRequest/index.stories.tsx#Simulation"]={docgenInfo:index_stories_Simulation.__docgenInfo,name:"Simulation",path:"src/components/PaymentRequest/index.stories.tsx#Simulation"})}catch(__react_docgen_typescript_loader_error){}},1107:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Basic",(function(){return index_stories_Basic})),__webpack_require__.d(__webpack_exports__,"Statuses",(function(){return index_stories_Statuses})),__webpack_require__.d(__webpack_exports__,"TransactionDetails",(function(){return index_stories_TransactionDetails})),__webpack_require__.d(__webpack_exports__,"Animated",(function(){return index_stories_Animated})),__webpack_require__.d(__webpack_exports__,"Simulation",(function(){return index_stories_Simulation}));__webpack_require__(8),__webpack_require__(32),__webpack_require__(31),__webpack_require__(17),__webpack_require__(4),__webpack_require__(13),__webpack_require__(22),__webpack_require__(16),__webpack_require__(15),__webpack_require__(18),__webpack_require__(6),__webpack_require__(27),__webpack_require__(20),__webpack_require__(105),__webpack_require__(11),__webpack_require__(296),__webpack_require__(5),__webpack_require__(37);var TxStatus,_templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15,react=__webpack_require__(0),styled_components_browser_esm=__webpack_require__(14),animations=__webpack_require__(116),defaultColorMap={completed:"#f08a5d",pending:"deepskyblue",unknown:"grey",failed:"red"};function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}!function(TxStatus){TxStatus.COMPLETED="completed",TxStatus.PENDING="pending",TxStatus.UNKNOWN="unknown",TxStatus.FAILED="failed"}(TxStatus||(TxStatus={}));var Container=styled_components_browser_esm.b.div(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n\tposition: relative;\n\twidth: 100%;\n\tmax-width: 375px;\n    max-height: 50px;\n    text-align: left;\n    box-shadow: 0 12px 28px rgb(0 0 0 / 10%);\n\tbackground-color: #fff;\n    border-radius: 3px;\n    font-size: 12px;\n    overflow: hidden;\n\ttransition: max-height .4s;\n\n\t","\n\n\t","\n"])),(function(p){return p.hasDate&&"\n    \tmax-height: 60px;\n\t"}),(function(p){return p.showDetails&&"\n\t\tmax-height: 500px;\n\t"})),IconWrapper=styled_components_browser_esm.b.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n\tdisplay: inline-block;\n\twidth: 25px;\n\tfloat: right;\n\t","\n"])),(function(p){return p.clickable&&"\n\t\tcursor: pointer;\n\t"})),Row=styled_components_browser_esm.b.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n\tdisplay: grid;\n\tgrid-template-columns: 5fr 5fr;\n\n\t","\n"])),(function(p){return p.showSide&&"\n\t\tgrid-template-columns: 4fr 4fr 2fr;\n\t"})),Amount=styled_components_browser_esm.b.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral(["\n\tpadding: 0 10px 0 10px;\n\tdisplay: inline-block;\n\tmargin-right: 5px;\n\n\th1, p {\n\t\tdisplay: inline-block;\n\t}\n\n\th1{\n\t\tmargin: 10px 3px 15px 0;\n\t}\n"]))),style_Date=styled_components_browser_esm.b.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral(["\n\tfont-size: 10px;\n\tposition: absolute;\n\tbottom: -4px;\n\twidth: 100%;\n\theight: 20px;\n\tcolor: rgba(0, 0, 0, 0.5);\n\tbackground-color: #fff;\n\n\t> span {\n\t\tmargin: 0 15px 0 10px;\n\t}\n"]))),Status=styled_components_browser_esm.b.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral(["\n\twidth: 60%;\n    align-self: center;\n\tfont-size: 14px;\n    margin-top: 5px;\n"]))),Side=styled_components_browser_esm.b.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral(["\n\tposition: relative;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\talign-items: center;\n\n\tdiv:not(:first-of-type) {\n\t\tmargin: 0 0 0 10px;\n\t}\n\n\t&:after {\n\t\tcontent: '';\n\t\theight: 50%;\n\t\twidth: 1.3px;\n\t\tleft: 0;\n\t\tposition: absolute;\n\t\tbackground-color: rgba(0, 0, 0, 0.2);\n\t  }\n"]))),style_getAnimation=function _getAnimation(animation,bgColor){switch(animation){case TxStatus.FAILED:case TxStatus.UNKNOWN:case TxStatus.COMPLETED:return function _finiteAnim(bgColor){return Object(styled_components_browser_esm.a)(_templateObject9||(_templateObject9=_taggedTemplateLiteral(["\n\ttransition: width .3s linear;\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\tbackground-color: ",";\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tbottom: 0;\n\t\tanimation: "," 0.8s linear 0s 1 normal forwards;\n\t}\n"])),bgColor,animations.a)}(null!=bgColor?bgColor:defaultColorMap[animation]);case TxStatus.PENDING:return function _pendingAnim(bgColor){return Object(styled_components_browser_esm.a)(_templateObject8||(_templateObject8=_taggedTemplateLiteral(["\n\ttransition: width .3s linear;\n\t&:before {\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\tposition: absolute;\n\t\tbackground-color: ",";\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tbottom: 0;\n\t\tanimation: "," 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n\t}\n"])),bgColor,animations.b)}(null!=bgColor?bgColor:"lightblue");default:return null}},StatusBar=styled_components_browser_esm.b.div(_templateObject10||(_templateObject10=_taggedTemplateLiteral(["\n\twidth: 100%;\n\theight: 5px;\n\tbackground-color: ",";\n\tposition: absolute;\n    overflow: hidden;\n\ttop: 0;\n\n\t","\n"])),(function(p){return p.animate?null:p.backgroundColor}),(function(p){return style_getAnimation(p.animate,p.backgroundColor)})),DetailedView=styled_components_browser_esm.b.div(_templateObject11||(_templateObject11=_taggedTemplateLiteral(["\n\t  padding: 10px;\n\t  min-height: 30px;\n\t  margin-bottom: 15px;\n"]))),Trajectory=styled_components_browser_esm.b.div(_templateObject12||(_templateObject12=_taggedTemplateLiteral(["\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\tdiv {\n\t\tdisplay: inline-block;\n\t}\n"]))),Arrow=styled_components_browser_esm.b.div(_templateObject13||(_templateObject13=_taggedTemplateLiteral(["\n\tcolor: rgba(0, 0, 0, 0.6);\n\ttransform: rotate( 45deg );\n\twidth: 0;\n\theight: 0;\n\tborder: 5px solid transparent;\n\tborder-top: 5px solid;\n\tborder-right: 5px solid;\n\tmargin: 3px 15px 15px 10px;\n"]))),TxFees=styled_components_browser_esm.b.div(_templateObject14||(_templateObject14=_taggedTemplateLiteral(["\n\t  text-align: center;\n"]))),CustomComponent=styled_components_browser_esm.b.div(_templateObject15||(_templateObject15=_taggedTemplateLiteral(["\n\toverflow: auto;\n\tmax-width: 100%;\n\tmargin-top: 10px;\n"]))),AdaptiveSpan=__webpack_require__(164),string=__webpack_require__(217),Icon=__webpack_require__(86),jsx_runtime=__webpack_require__(1);function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var _parameters,index_stories_templateObject,TransactionStatus_TransactionStatus=function TransactionStatus(props){var _props$date,_props$date$locale,_useState2=_slicedToArray(Object(react.useState)(TxStatus.UNKNOWN),2),status=_useState2[0],setStatus=_useState2[1],_useState4=_slicedToArray(Object(react.useState)(defaultColorMap),2),colorMap=_useState4[0],setColorMap=_useState4[1],_useState6=_slicedToArray(Object(react.useState)(!1),2),isToggled=_useState6[0],setIsToggled=_useState6[1],shouldRenderDetails=Boolean(props.txFees||props.sender||props.receiver||props.customDetailComponent),shouldRenderTrajectory=Boolean(props.sender||props.receiver),shouldRenderSide=Boolean(props.txURL||shouldRenderDetails);Object(react.useLayoutEffect)((function(){props.status&&setStatus(props.status),props.autoShowDetails&&shouldRenderDetails&&setIsToggled(!0),setColorMap(Object.assign({},defaultColorMap,props.colorMap))}),[props.status,props.colorMap,props.autoShowDetails,shouldRenderDetails]);var _getTransaction=function _getTransaction(tx){return tx&&tx.hash?Object(jsx_runtime.jsx)("a",{href:tx.url,rel:"noreferrer",target:"_blank",children:Object(string.a)(tx.hash,7)}):null};return Object(jsx_runtime.jsxs)(Container,{showDetails:isToggled,hasDate:Boolean(null===(_props$date=props.date)||void 0===_props$date?void 0:_props$date.value),children:[Object(jsx_runtime.jsx)(StatusBar,{backgroundColor:colorMap[status],animate:props.animated?props.status:null}),Object(jsx_runtime.jsxs)(Row,{showSide:shouldRenderSide,children:[Object(jsx_runtime.jsx)(Amount,{children:Object(jsx_runtime.jsx)(AdaptiveSpan.a,{text:"<h1>{amount}</h1><p>{symbol}</p>",mapping:[{tag:"{amount}",value:props.amount,style:"bold"},{tag:"{symbol}",value:props.symbol}]})}),Object(jsx_runtime.jsx)(Status,{title:"Status",children:function _getStatus(){var output=status.toUpperCase()+status.slice(1);return props.uncapitalizeStatus||(output=status.toUpperCase()),output}()}),shouldRenderSide&&Object(jsx_runtime.jsxs)(Side,{children:[props.txURL&&Object(jsx_runtime.jsx)(IconWrapper,{children:Object(jsx_runtime.jsx)(Icon.a,{type:Icon.b.OutboundLink,style:{width:21},url:props.txURL,targetBlank:!0})}),shouldRenderDetails&&Object(jsx_runtime.jsx)(IconWrapper,{clickable:!0,onClick:function _handleToggleClick(){return setIsToggled(!isToggled)},children:Object(jsx_runtime.jsx)(Icon.a,{type:isToggled?Icon.b.ArrowUp:Icon.b.ArrowDown,style:{width:15}})})]})]}),shouldRenderDetails&&Object(jsx_runtime.jsxs)(DetailedView,{children:[shouldRenderTrajectory&&Object(jsx_runtime.jsxs)("div",{children:[Object(jsx_runtime.jsxs)(Trajectory,{children:[_getTransaction(props.sender),props.sender&&props.receiver&&Object(jsx_runtime.jsx)(Arrow,{}),_getTransaction(props.receiver)]}),Object(jsx_runtime.jsxs)(TxFees,{children:[props.txFees," ",props.symbol," (fees)"]})]}),Object(jsx_runtime.jsx)(CustomComponent,{children:props.customDetailComponent})]}),props.date&&props.date.value&&Object(jsx_runtime.jsx)(style_Date,{children:Object(jsx_runtime.jsx)("span",{children:new Intl.DateTimeFormat(null!==(_props$date$locale=props.date.locale)&&void 0!==_props$date$locale?_props$date$locale:"en-US",props.date.options).format(props.date.value)})})]})};TransactionStatus_TransactionStatus.displayName="TransactionStatus",TransactionStatus_TransactionStatus.defaultProps={date:{locale:"en-US",options:{day:"numeric",month:"numeric",hour:"numeric",minute:"numeric"}}};try{TransactionStatus_TransactionStatus.displayName="TransactionStatus",TransactionStatus_TransactionStatus.__docgenInfo={description:"",displayName:"TransactionStatus",props:{amount:{defaultValue:null,description:"",name:"amount",required:!0,type:{name:"string"}},symbol:{defaultValue:null,description:"",name:"symbol",required:!0,type:{name:"string"}},status:{defaultValue:null,description:"",name:"status",required:!1,type:{name:"TxStatus"}},animated:{defaultValue:null,description:"",name:"animated",required:!1,type:{name:"boolean"}},date:{defaultValue:null,description:"",name:"date",required:!1,type:{name:"{ value?: Date; locale?: string | undefined; options?: DateTimeFormatOptions | undefined; } | undefined"}},txURL:{defaultValue:null,description:"",name:"txURL",required:!1,type:{name:"string"}},colorMap:{defaultValue:null,description:"",name:"colorMap",required:!1,type:{name:"Record<TxStatus, string>"}},uncapitalizeStatus:{defaultValue:null,description:"",name:"uncapitalizeStatus",required:!1,type:{name:"boolean"}},autoShowDetails:{defaultValue:null,description:"",name:"autoShowDetails",required:!1,type:{name:"boolean"}},sender:{defaultValue:null,description:"",name:"sender",required:!1,type:{name:"IAdress"}},receiver:{defaultValue:null,description:"",name:"receiver",required:!1,type:{name:"IAdress"}},txFees:{defaultValue:null,description:"",name:"txFees",required:!1,type:{name:"string"}},customDetailComponent:{defaultValue:null,description:"",name:"customDetailComponent",required:!1,type:{name:"ReactNode"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TransactionStatus/index.tsx#TransactionStatus"]={docgenInfo:TransactionStatus_TransactionStatus.__docgenInfo,name:"TransactionStatus",path:"src/components/TransactionStatus/index.tsx#TransactionStatus"})}catch(__react_docgen_typescript_loader_error){}function index_stories_slicedToArray(arr,i){return function index_stories_arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function index_stories_iterableToArrayLimit(arr,i){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(arr)))return;var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function index_stories_unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return index_stories_arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return index_stories_arrayLikeToArray(o,minLen)}(arr,i)||function index_stories_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function index_stories_arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var txCompleted=__webpack_require__(1102),Spacer=(__webpack_exports__.default={parameters:(_parameters={storySource:{source:'\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAdress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'TransactionStatus\',\\\\n  component: TransactionStatus,\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAdress;\\\\n    receiver: IAdress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":19},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":21,\\"line\\":19},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"Statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":64},\\"startBody\\":{\\"col\\":24,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":64}},\\"TransactionDetails\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":66},\\"endLoc\\":{\\"col\\":1,\\"line\\":86},\\"startBody\\":{\\"col\\":34,\\"line\\":66},\\"endBody\\":{\\"col\\":1,\\"line\\":86}},\\"Animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":88},\\"endLoc\\":{\\"col\\":1,\\"line\\":127},\\"startBody\\":{\\"col\\":24,\\"line\\":88},\\"endBody\\":{\\"col\\":1,\\"line\\":127}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":129},\\"endLoc\\":{\\"col\\":1,\\"line\\":228},\\"startBody\\":{\\"col\\":36,\\"line\\":129},\\"endBody\\":{\\"col\\":1,\\"line\\":228}}};\\nimport React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAdress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAdress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'TransactionStatus\',\\\\n  component: TransactionStatus,\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAdress;\\\\n    receiver: IAdress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":19},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":21,\\"line\\":19},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":64},\\"startBody\\":{\\"col\\":24,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":64}},\\"transaction-details\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":66},\\"endLoc\\":{\\"col\\":1,\\"line\\":86},\\"startBody\\":{\\"col\\":34,\\"line\\":66},\\"endBody\\":{\\"col\\":1,\\"line\\":86}},\\"animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":88},\\"endLoc\\":{\\"col\\":1,\\"line\\":127},\\"startBody\\":{\\"col\\":24,\\"line\\":88},\\"endBody\\":{\\"col\\":1,\\"line\\":127}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":129},\\"endLoc\\":{\\"col\\":1,\\"line\\":228},\\"startBody\\":{\\"col\\":36,\\"line\\":129},\\"endBody\\":{\\"col\\":1,\\"line\\":228}}}},},\\n  title: \'TransactionStatus\',\\n  component: TransactionStatus,\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAdress;\\n    receiver: IAdress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":26},"endLoc":{"col":1,"line":35},"startBody":{"col":21,"line":26},"endBody":{"col":1,"line":35}},"Statuses":{"startLoc":{"col":24,"line":37},"endLoc":{"col":1,"line":71},"startBody":{"col":24,"line":37},"endBody":{"col":1,"line":71}},"TransactionDetails":{"startLoc":{"col":34,"line":73},"endLoc":{"col":1,"line":93},"startBody":{"col":34,"line":73},"endBody":{"col":1,"line":93}},"Animated":{"startLoc":{"col":24,"line":95},"endLoc":{"col":1,"line":134},"startBody":{"col":24,"line":95},"endBody":{"col":1,"line":134}},"Simulation":{"startLoc":{"col":36,"line":136},"endLoc":{"col":1,"line":235},"startBody":{"col":36,"line":136},"endBody":{"col":1,"line":235}}};\n\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = "import React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAdress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {\\n  title: \'TransactionStatus\',\\n  component: TransactionStatus,\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAdress;\\n    receiver: IAdress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {"Basic":{"startLoc":{"col":21,"line":19},"endLoc":{"col":1,"line":28},"startBody":{"col":21,"line":19},"endBody":{"col":1,"line":28}},"Statuses":{"startLoc":{"col":24,"line":30},"endLoc":{"col":1,"line":64},"startBody":{"col":24,"line":30},"endBody":{"col":1,"line":64}},"TransactionDetails":{"startLoc":{"col":34,"line":66},"endLoc":{"col":1,"line":86},"startBody":{"col":34,"line":66},"endBody":{"col":1,"line":86}},"Animated":{"startLoc":{"col":24,"line":88},"endLoc":{"col":1,"line":127},"startBody":{"col":24,"line":88},"endBody":{"col":1,"line":127}},"Simulation":{"startLoc":{"col":36,"line":129},"endLoc":{"col":1,"line":228},"startBody":{"col":36,"line":129},"endBody":{"col":1,"line":228}}};\nimport React, { Fragment, useEffect, useRef, useState } from \'react\';\nimport styled from \'styled-components\';\nimport { TransactionStatus } from \'../TransactionStatus\';\nimport { IAdress } from \'./interfaces\';\nimport { TxStatus } from \'./txStatus\';\n\n\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\n\nexport default {parameters: {"storySource":{"source":"\\n      \\n      // @ts-nocheck\\n      // @ts-ignore\\n      var __STORY__ = \\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAdress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'TransactionStatus\',\\\\n  component: TransactionStatus,\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAdress;\\\\n    receiver: IAdress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\";\\n      // @ts-ignore\\n      var __LOCATIONS_MAP__ = {\\"Basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":19},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":21,\\"line\\":19},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"Statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":64},\\"startBody\\":{\\"col\\":24,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":64}},\\"TransactionDetails\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":66},\\"endLoc\\":{\\"col\\":1,\\"line\\":86},\\"startBody\\":{\\"col\\":34,\\"line\\":66},\\"endBody\\":{\\"col\\":1,\\"line\\":86}},\\"Animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":88},\\"endLoc\\":{\\"col\\":1,\\"line\\":127},\\"startBody\\":{\\"col\\":24,\\"line\\":88},\\"endBody\\":{\\"col\\":1,\\"line\\":127}},\\"Simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":129},\\"endLoc\\":{\\"col\\":1,\\"line\\":228},\\"startBody\\":{\\"col\\":36,\\"line\\":129},\\"endBody\\":{\\"col\\":1,\\"line\\":228}}};\\nimport React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAdress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {parameters: {\\"storySource\\":{\\"source\\":\\"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\\\nimport styled from \'styled-components\';\\\\nimport { TransactionStatus } from \'../TransactionStatus\';\\\\nimport { IAdress } from \'./interfaces\';\\\\nimport { TxStatus } from \'./txStatus\';\\\\n\\\\n\\\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\\\n\\\\nexport default {\\\\n  title: \'TransactionStatus\',\\\\n  component: TransactionStatus,\\\\n};\\\\n\\\\nconst Spacer = styled.div`\\\\n  margin: 10px 0 10px 0;\\\\n`;\\\\n\\\\nexport const Basic = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      status={TxStatus.COMPLETED}\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Statuses = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const TransactionDetails = (): React.ReactNode => {\\\\n  return (\\\\n    <TransactionStatus\\\\n      amount=\'0.1\'\\\\n      symbol=\'BTC\'\\\\n      txFees=\'0.0001\'\\\\n      date={{\\\\n        value: new Date(),\\\\n      }}\\\\n      sender={{\\\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n      }}\\\\n      receiver={{\\\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n      }}\\\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const Animated = (): React.ReactNode => (\\\\n  <Fragment>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.PENDING}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.UNKNOWN}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.COMPLETED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={TxStatus.FAILED}\\\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n      />\\\\n    </Spacer>\\\\n  </Fragment>\\\\n);\\\\n\\\\nexport const Simulation: React.FC = () => {\\\\n  interface ITransaction {\\\\n    sender: IAdress;\\\\n    receiver: IAdress;\\\\n  }\\\\n\\\\n  const timer = useRef<NodeJS.Timeout>();\\\\n\\\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\\\n  const [isInit, setIsInit] = useState<boolean>(false);\\\\n  const [txURL, setTxURL] = useState<string>();\\\\n\\\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\\\n  const _delay = (delay: number): Promise<void> =>\\\\n    new Promise((resolve) => setTimeout(resolve, delay));\\\\n\\\\n  useEffect(() => {\\\\n    return () => _clearTimeout();\\\\n  }, []);\\\\n\\\\n  const runSimulation = (): void => {\\\\n    _clearTimeout();\\\\n\\\\n    _delay(3 * 1000)\\\\n      .then(() =>\\\\n        setTxURL(\\\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\\\n        )\\\\n      )\\\\n\\\\n      // wait 5s before completing that transaction\\\\n      .then(() => _delay(5 * 1000))\\\\n      .then(() => setStatus(TxStatus.COMPLETED))\\\\n\\\\n      // let\'s say, tx infos need to be fetched before being able to render them\\\\n      .then(() => _delay(1.5 * 1000))\\\\n      .then(() =>\\\\n        setTx({\\\\n          ...tx,\\\\n          ...{\\\\n            sender: {\\\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\\\n            },\\\\n            receiver: {\\\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\\\n            },\\\\n            txFees: \'0.0001\',\\\\n            customDetailComponent: (\\\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\\\n            ),\\\\n          },\\\\n        })\\\\n      );\\\\n  };\\\\n\\\\n  const _handleReset = (): void => {\\\\n    setTx({});\\\\n    setStatus(TxStatus.PENDING);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  const _handleInit = (): void => {\\\\n    setIsInit(true);\\\\n    runSimulation();\\\\n  };\\\\n\\\\n  if (!isInit) {\\\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\\\n  }\\\\n\\\\n  return (\\\\n    <Spacer>\\\\n      <TransactionStatus\\\\n        animated\\\\n        autoShowDetails\\\\n        amount=\'0.1\'\\\\n        symbol=\'BTC\'\\\\n        status={status}\\\\n        txURL={txURL}\\\\n        date={{\\\\n          value: new Date(),\\\\n        }}\\\\n        {...tx}\\\\n      />\\\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\\\n        Reset\\\\n      </button>\\\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\\\n        <p>\\\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\\\n          When the component will receive props, it will automatically expand the card. This is\\\\n          fully optional.\\\\n        </p>\\\\n      </i>\\\\n    </Spacer>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"basic\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":19},\\"endLoc\\":{\\"col\\":1,\\"line\\":28},\\"startBody\\":{\\"col\\":21,\\"line\\":19},\\"endBody\\":{\\"col\\":1,\\"line\\":28}},\\"statuses\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":30},\\"endLoc\\":{\\"col\\":1,\\"line\\":64},\\"startBody\\":{\\"col\\":24,\\"line\\":30},\\"endBody\\":{\\"col\\":1,\\"line\\":64}},\\"transaction-details\\":{\\"startLoc\\":{\\"col\\":34,\\"line\\":66},\\"endLoc\\":{\\"col\\":1,\\"line\\":86},\\"startBody\\":{\\"col\\":34,\\"line\\":66},\\"endBody\\":{\\"col\\":1,\\"line\\":86}},\\"animated\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":88},\\"endLoc\\":{\\"col\\":1,\\"line\\":127},\\"startBody\\":{\\"col\\":24,\\"line\\":88},\\"endBody\\":{\\"col\\":1,\\"line\\":127}},\\"simulation\\":{\\"startLoc\\":{\\"col\\":36,\\"line\\":129},\\"endLoc\\":{\\"col\\":1,\\"line\\":228},\\"startBody\\":{\\"col\\":36,\\"line\\":129},\\"endBody\\":{\\"col\\":1,\\"line\\":228}}}},},\\n  title: \'TransactionStatus\',\\n  component: TransactionStatus,\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};;\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);;\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAdress;\\n    receiver: IAdress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":26},"endLoc":{"col":1,"line":35},"startBody":{"col":21,"line":26},"endBody":{"col":1,"line":35}},"statuses":{"startLoc":{"col":24,"line":37},"endLoc":{"col":1,"line":71},"startBody":{"col":24,"line":37},"endBody":{"col":1,"line":71}},"transaction-details":{"startLoc":{"col":34,"line":73},"endLoc":{"col":1,"line":93},"startBody":{"col":34,"line":73},"endBody":{"col":1,"line":93}},"animated":{"startLoc":{"col":24,"line":95},"endLoc":{"col":1,"line":134},"startBody":{"col":24,"line":95},"endBody":{"col":1,"line":134}},"simulation":{"startLoc":{"col":36,"line":136},"endLoc":{"col":1,"line":235},"startBody":{"col":36,"line":136},"endBody":{"col":1,"line":235}}}},"storySource":{"source":"import React, { Fragment, useEffect, useRef, useState } from \'react\';\\nimport styled from \'styled-components\';\\nimport { TransactionStatus } from \'../TransactionStatus\';\\nimport { IAdress } from \'./interfaces\';\\nimport { TxStatus } from \'./txStatus\';\\n\\n\\nconst txCompleted = require(\'../../assets/txstatus-completed.jpg\');\\n\\nexport default {\\n  title: \'TransactionStatus\',\\n  component: TransactionStatus,\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount=\'0.1\'\\n      symbol=\'BTC\'\\n      txFees=\'0.0001\'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n      }}\\n      receiver={{\\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.PENDING}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.UNKNOWN}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.COMPLETED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={TxStatus.FAILED}\\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAdress;\\n    receiver: IAdress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let\'s say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\\n            },\\n            receiver: {\\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\\n            },\\n            txFees: \'0.0001\',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount=\'0.1\'\\n        symbol=\'BTC\'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n","locationsMap":{"basic":{"startLoc":{"col":21,"line":19},"endLoc":{"col":1,"line":28},"startBody":{"col":21,"line":19},"endBody":{"col":1,"line":28}},"statuses":{"startLoc":{"col":24,"line":30},"endLoc":{"col":1,"line":64},"startBody":{"col":24,"line":30},"endBody":{"col":1,"line":64}},"transaction-details":{"startLoc":{"col":34,"line":66},"endLoc":{"col":1,"line":86},"startBody":{"col":34,"line":66},"endBody":{"col":1,"line":86}},"animated":{"startLoc":{"col":24,"line":88},"endLoc":{"col":1,"line":127},"startBody":{"col":24,"line":88},"endBody":{"col":1,"line":127}},"simulation":{"startLoc":{"col":36,"line":129},"endLoc":{"col":1,"line":228},"startBody":{"col":36,"line":129},"endBody":{"col":1,"line":228}}}},},\n  title: \'TransactionStatus\',\n  component: TransactionStatus,\n};\n\nconst Spacer = styled.div`\n  margin: 10px 0 10px 0;\n`;\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      status={TxStatus.COMPLETED}\n      amount=\'0.1\'\n      symbol=\'BTC\'\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n    />\n  );\n};;;\n\nexport const Statuses = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.PENDING}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.COMPLETED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.FAILED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n  </Fragment>\n);;;\n\nexport const TransactionDetails = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      amount=\'0.1\'\n      symbol=\'BTC\'\n      txFees=\'0.0001\'\n      date={{\n        value: new Date(),\n      }}\n      sender={{\n        hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n        url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n      }}\n      receiver={{\n        hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\n      }}\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\n      txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n    />\n  );\n};;;\n\nexport const Animated = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.PENDING}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.UNKNOWN}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.COMPLETED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={TxStatus.FAILED}\n        txURL=\'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n      />\n    </Spacer>\n  </Fragment>\n);;;\n\nexport const Simulation: React.FC = () => {\n  interface ITransaction {\n    sender: IAdress;\n    receiver: IAdress;\n  }\n\n  const timer = useRef<NodeJS.Timeout>();\n\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\n  const [isInit, setIsInit] = useState<boolean>(false);\n  const [txURL, setTxURL] = useState<string>();\n\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\n  const _delay = (delay: number): Promise<void> =>\n    new Promise((resolve) => setTimeout(resolve, delay));\n\n  useEffect(() => {\n    return () => _clearTimeout();\n  }, []);\n\n  const runSimulation = (): void => {\n    _clearTimeout();\n\n    _delay(3 * 1000)\n      .then(() =>\n        setTxURL(\n          \'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1\'\n        )\n      )\n\n      // wait 5s before completing that transaction\n      .then(() => _delay(5 * 1000))\n      .then(() => setStatus(TxStatus.COMPLETED))\n\n      // let\'s say, tx infos need to be fetched before being able to render them\n      .then(() => _delay(1.5 * 1000))\n      .then(() =>\n        setTx({\n          ...tx,\n          ...{\n            sender: {\n              hash: \'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n              url: \'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa\',\n            },\n            receiver: {\n              hash: \'1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\n              url: \'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr\',\n            },\n            txFees: \'0.0001\',\n            customDetailComponent: (\n              <img src={txCompleted} alt=\'Custom component\' style={{ width: \'100%\' }} />\n            ),\n          },\n        })\n      );\n  };\n\n  const _handleReset = (): void => {\n    setTx({});\n    setStatus(TxStatus.PENDING);\n    runSimulation();\n  };\n\n  const _handleInit = (): void => {\n    setIsInit(true);\n    runSimulation();\n  };\n\n  if (!isInit) {\n    return <button onClick={_handleInit}>Begin transaction</button>;\n  }\n\n  return (\n    <Spacer>\n      <TransactionStatus\n        animated\n        autoShowDetails\n        amount=\'0.1\'\n        symbol=\'BTC\'\n        status={status}\n        txURL={txURL}\n        date={{\n          value: new Date(),\n        }}\n        {...tx}\n      />\n      <button style={{ marginTop: \'10px\' }} onClick={_handleReset}>\n        Reset\n      </button>\n      <i style={{ display: \'block\', fontSize: \'12px\', marginTop: \'10px\' }}>\n        <p>\n          In this example, <u>autoShowDetails</u> property is added. <br />\n          When the component will receive props, it will automatically expand the card. This is\n          fully optional.\n        </p>\n      </i>\n    </Spacer>\n  );\n};\n\n',locationsMap:{basic:{startLoc:{col:21,line:33},endLoc:{col:1,line:42},startBody:{col:21,line:33},endBody:{col:1,line:42}},statuses:{startLoc:{col:24,line:44},endLoc:{col:1,line:78},startBody:{col:24,line:44},endBody:{col:1,line:78}},"transaction-details":{startLoc:{col:34,line:80},endLoc:{col:1,line:100},startBody:{col:34,line:80},endBody:{col:1,line:100}},animated:{startLoc:{col:24,line:102},endLoc:{col:1,line:141},startBody:{col:24,line:102},endBody:{col:1,line:141}},simulation:{startLoc:{col:36,line:143},endLoc:{col:1,line:242},startBody:{col:36,line:143},endBody:{col:1,line:242}}}}},_defineProperty(_parameters,"storySource",{source:"\n      \n      // @ts-nocheck\n      // @ts-ignore\n      var __STORY__ = \"import React, { Fragment, useEffect, useRef, useState } from 'react';\\nimport styled from 'styled-components';\\nimport { TransactionStatus } from '../TransactionStatus';\\nimport { IAdress } from './interfaces';\\nimport { TxStatus } from './txStatus';\\n\\n\\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\\n\\nexport default {\\n  title: 'TransactionStatus',\\n  component: TransactionStatus,\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount='0.1'\\n      symbol='BTC'\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount='0.1'\\n      symbol='BTC'\\n      txFees='0.0001'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n      }}\\n      receiver={{\\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.UNKNOWN}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAdress;\\n    receiver: IAdress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let's say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n            },\\n            receiver: {\\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n            },\\n            txFees: '0.0001',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount='0.1'\\n        symbol='BTC'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\";\n      // @ts-ignore\n      var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":21,\"line\":19},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":21,\"line\":19},\"endBody\":{\"col\":1,\"line\":28}},\"Statuses\":{\"startLoc\":{\"col\":24,\"line\":30},\"endLoc\":{\"col\":1,\"line\":64},\"startBody\":{\"col\":24,\"line\":30},\"endBody\":{\"col\":1,\"line\":64}},\"TransactionDetails\":{\"startLoc\":{\"col\":34,\"line\":66},\"endLoc\":{\"col\":1,\"line\":86},\"startBody\":{\"col\":34,\"line\":66},\"endBody\":{\"col\":1,\"line\":86}},\"Animated\":{\"startLoc\":{\"col\":24,\"line\":88},\"endLoc\":{\"col\":1,\"line\":127},\"startBody\":{\"col\":24,\"line\":88},\"endBody\":{\"col\":1,\"line\":127}},\"Simulation\":{\"startLoc\":{\"col\":36,\"line\":129},\"endLoc\":{\"col\":1,\"line\":228},\"startBody\":{\"col\":36,\"line\":129},\"endBody\":{\"col\":1,\"line\":228}}};\nimport React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { TransactionStatus } from '../TransactionStatus';\nimport { IAdress } from './interfaces';\nimport { TxStatus } from './txStatus';\n\n\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { Fragment, useEffect, useRef, useState } from 'react';\\nimport styled from 'styled-components';\\nimport { TransactionStatus } from '../TransactionStatus';\\nimport { IAdress } from './interfaces';\\nimport { TxStatus } from './txStatus';\\n\\n\\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\\n\\nexport default {\\n  title: 'TransactionStatus',\\n  component: TransactionStatus,\\n};\\n\\nconst Spacer = styled.div`\\n  margin: 10px 0 10px 0;\\n`;\\n\\nexport const Basic = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      status={TxStatus.COMPLETED}\\n      amount='0.1'\\n      symbol='BTC'\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Statuses = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const TransactionDetails = (): React.ReactNode => {\\n  return (\\n    <TransactionStatus\\n      amount='0.1'\\n      symbol='BTC'\\n      txFees='0.0001'\\n      date={{\\n        value: new Date(),\\n      }}\\n      sender={{\\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n      }}\\n      receiver={{\\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n      }}\\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n    />\\n  );\\n};\\n\\nexport const Animated = (): React.ReactNode => (\\n  <Fragment>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.PENDING}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.UNKNOWN}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.COMPLETED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        amount='0.1'\\n        symbol='BTC'\\n        status={TxStatus.FAILED}\\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n      />\\n    </Spacer>\\n  </Fragment>\\n);\\n\\nexport const Simulation: React.FC = () => {\\n  interface ITransaction {\\n    sender: IAdress;\\n    receiver: IAdress;\\n  }\\n\\n  const timer = useRef<NodeJS.Timeout>();\\n\\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\\n  const [isInit, setIsInit] = useState<boolean>(false);\\n  const [txURL, setTxURL] = useState<string>();\\n\\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\\n  const _delay = (delay: number): Promise<void> =>\\n    new Promise((resolve) => setTimeout(resolve, delay));\\n\\n  useEffect(() => {\\n    return () => _clearTimeout();\\n  }, []);\\n\\n  const runSimulation = (): void => {\\n    _clearTimeout();\\n\\n    _delay(3 * 1000)\\n      .then(() =>\\n        setTxURL(\\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\\n        )\\n      )\\n\\n      // wait 5s before completing that transaction\\n      .then(() => _delay(5 * 1000))\\n      .then(() => setStatus(TxStatus.COMPLETED))\\n\\n      // let's say, tx infos need to be fetched before being able to render them\\n      .then(() => _delay(1.5 * 1000))\\n      .then(() =>\\n        setTx({\\n          ...tx,\\n          ...{\\n            sender: {\\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\\n            },\\n            receiver: {\\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\\n            },\\n            txFees: '0.0001',\\n            customDetailComponent: (\\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\\n            ),\\n          },\\n        })\\n      );\\n  };\\n\\n  const _handleReset = (): void => {\\n    setTx({});\\n    setStatus(TxStatus.PENDING);\\n    runSimulation();\\n  };\\n\\n  const _handleInit = (): void => {\\n    setIsInit(true);\\n    runSimulation();\\n  };\\n\\n  if (!isInit) {\\n    return <button onClick={_handleInit}>Begin transaction</button>;\\n  }\\n\\n  return (\\n    <Spacer>\\n      <TransactionStatus\\n        animated\\n        autoShowDetails\\n        amount='0.1'\\n        symbol='BTC'\\n        status={status}\\n        txURL={txURL}\\n        date={{\\n          value: new Date(),\\n        }}\\n        {...tx}\\n      />\\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\\n        Reset\\n      </button>\\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\\n        <p>\\n          In this example, <u>autoShowDetails</u> property is added. <br />\\n          When the component will receive props, it will automatically expand the card. This is\\n          fully optional.\\n        </p>\\n      </i>\\n    </Spacer>\\n  );\\n};\\n\",\"locationsMap\":{\"basic\":{\"startLoc\":{\"col\":21,\"line\":19},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":21,\"line\":19},\"endBody\":{\"col\":1,\"line\":28}},\"statuses\":{\"startLoc\":{\"col\":24,\"line\":30},\"endLoc\":{\"col\":1,\"line\":64},\"startBody\":{\"col\":24,\"line\":30},\"endBody\":{\"col\":1,\"line\":64}},\"transaction-details\":{\"startLoc\":{\"col\":34,\"line\":66},\"endLoc\":{\"col\":1,\"line\":86},\"startBody\":{\"col\":34,\"line\":66},\"endBody\":{\"col\":1,\"line\":86}},\"animated\":{\"startLoc\":{\"col\":24,\"line\":88},\"endLoc\":{\"col\":1,\"line\":127},\"startBody\":{\"col\":24,\"line\":88},\"endBody\":{\"col\":1,\"line\":127}},\"simulation\":{\"startLoc\":{\"col\":36,\"line\":129},\"endLoc\":{\"col\":1,\"line\":228},\"startBody\":{\"col\":36,\"line\":129},\"endBody\":{\"col\":1,\"line\":228}}}},},\n  title: 'TransactionStatus',\n  component: TransactionStatus,\n};\n\nconst Spacer = styled.div`\n  margin: 10px 0 10px 0;\n`;\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      status={TxStatus.COMPLETED}\n      amount='0.1'\n      symbol='BTC'\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};;\n\nexport const Statuses = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);;\n\nexport const TransactionDetails = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      amount='0.1'\n      symbol='BTC'\n      txFees='0.0001'\n      date={{\n        value: new Date(),\n      }}\n      sender={{\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      }}\n      receiver={{\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n      }}\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};;\n\nexport const Animated = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.UNKNOWN}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);;\n\nexport const Simulation: React.FC = () => {\n  interface ITransaction {\n    sender: IAdress;\n    receiver: IAdress;\n  }\n\n  const timer = useRef<NodeJS.Timeout>();\n\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\n  const [isInit, setIsInit] = useState<boolean>(false);\n  const [txURL, setTxURL] = useState<string>();\n\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\n  const _delay = (delay: number): Promise<void> =>\n    new Promise((resolve) => setTimeout(resolve, delay));\n\n  useEffect(() => {\n    return () => _clearTimeout();\n  }, []);\n\n  const runSimulation = (): void => {\n    _clearTimeout();\n\n    _delay(3 * 1000)\n      .then(() =>\n        setTxURL(\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n        )\n      )\n\n      // wait 5s before completing that transaction\n      .then(() => _delay(5 * 1000))\n      .then(() => setStatus(TxStatus.COMPLETED))\n\n      // let's say, tx infos need to be fetched before being able to render them\n      .then(() => _delay(1.5 * 1000))\n      .then(() =>\n        setTx({\n          ...tx,\n          ...{\n            sender: {\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n            },\n            receiver: {\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n            },\n            txFees: '0.0001',\n            customDetailComponent: (\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\n            ),\n          },\n        })\n      );\n  };\n\n  const _handleReset = (): void => {\n    setTx({});\n    setStatus(TxStatus.PENDING);\n    runSimulation();\n  };\n\n  const _handleInit = (): void => {\n    setIsInit(true);\n    runSimulation();\n  };\n\n  if (!isInit) {\n    return <button onClick={_handleInit}>Begin transaction</button>;\n  }\n\n  return (\n    <Spacer>\n      <TransactionStatus\n        animated\n        autoShowDetails\n        amount='0.1'\n        symbol='BTC'\n        status={status}\n        txURL={txURL}\n        date={{\n          value: new Date(),\n        }}\n        {...tx}\n      />\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\n        Reset\n      </button>\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\n        <p>\n          In this example, <u>autoShowDetails</u> property is added. <br />\n          When the component will receive props, it will automatically expand the card. This is\n          fully optional.\n        </p>\n      </i>\n    </Spacer>\n  );\n};\n\n",locationsMap:{basic:{startLoc:{col:21,line:26},endLoc:{col:1,line:35},startBody:{col:21,line:26},endBody:{col:1,line:35}},statuses:{startLoc:{col:24,line:37},endLoc:{col:1,line:71},startBody:{col:24,line:37},endBody:{col:1,line:71}},"transaction-details":{startLoc:{col:34,line:73},endLoc:{col:1,line:93},startBody:{col:34,line:73},endBody:{col:1,line:93}},animated:{startLoc:{col:24,line:95},endLoc:{col:1,line:134},startBody:{col:24,line:95},endBody:{col:1,line:134}},simulation:{startLoc:{col:36,line:136},endLoc:{col:1,line:235},startBody:{col:36,line:136},endBody:{col:1,line:235}}}}),_defineProperty(_parameters,"storySource",{source:"import React, { Fragment, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { TransactionStatus } from '../TransactionStatus';\nimport { IAdress } from './interfaces';\nimport { TxStatus } from './txStatus';\n\n\nconst txCompleted = require('../../assets/txstatus-completed.jpg');\n\nexport default {\n  title: 'TransactionStatus',\n  component: TransactionStatus,\n};\n\nconst Spacer = styled.div`\n  margin: 10px 0 10px 0;\n`;\n\nexport const Basic = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      status={TxStatus.COMPLETED}\n      amount='0.1'\n      symbol='BTC'\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};\n\nexport const Statuses = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);\n\nexport const TransactionDetails = (): React.ReactNode => {\n  return (\n    <TransactionStatus\n      amount='0.1'\n      symbol='BTC'\n      txFees='0.0001'\n      date={{\n        value: new Date(),\n      }}\n      sender={{\n        hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n        url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n      }}\n      receiver={{\n        hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n      }}\n      customDetailComponent={<b>Hello, this is a custom component!</b>}\n      txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n    />\n  );\n};\n\nexport const Animated = (): React.ReactNode => (\n  <Fragment>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.PENDING}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.UNKNOWN}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.COMPLETED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n    <Spacer>\n      <TransactionStatus\n        animated\n        amount='0.1'\n        symbol='BTC'\n        status={TxStatus.FAILED}\n        txURL='https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n      />\n    </Spacer>\n  </Fragment>\n);\n\nexport const Simulation: React.FC = () => {\n  interface ITransaction {\n    sender: IAdress;\n    receiver: IAdress;\n  }\n\n  const timer = useRef<NodeJS.Timeout>();\n\n  const [status, setStatus] = useState<TxStatus>(TxStatus.PENDING);\n  const [tx, setTx] = useState<Partial<ITransaction>>({});\n  const [isInit, setIsInit] = useState<boolean>(false);\n  const [txURL, setTxURL] = useState<string>();\n\n  const _clearTimeout = () => timer.current && clearInterval(timer.current);\n  const _delay = (delay: number): Promise<void> =>\n    new Promise((resolve) => setTimeout(resolve, delay));\n\n  useEffect(() => {\n    return () => _clearTimeout();\n  }, []);\n\n  const runSimulation = (): void => {\n    _clearTimeout();\n\n    _delay(3 * 1000)\n      .then(() =>\n        setTxURL(\n          'https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1'\n        )\n      )\n\n      // wait 5s before completing that transaction\n      .then(() => _delay(5 * 1000))\n      .then(() => setStatus(TxStatus.COMPLETED))\n\n      // let's say, tx infos need to be fetched before being able to render them\n      .then(() => _delay(1.5 * 1000))\n      .then(() =>\n        setTx({\n          ...tx,\n          ...{\n            sender: {\n              hash: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n              url: 'https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\n            },\n            receiver: {\n              hash: '1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n              url: 'https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr',\n            },\n            txFees: '0.0001',\n            customDetailComponent: (\n              <img src={txCompleted} alt='Custom component' style={{ width: '100%' }} />\n            ),\n          },\n        })\n      );\n  };\n\n  const _handleReset = (): void => {\n    setTx({});\n    setStatus(TxStatus.PENDING);\n    runSimulation();\n  };\n\n  const _handleInit = (): void => {\n    setIsInit(true);\n    runSimulation();\n  };\n\n  if (!isInit) {\n    return <button onClick={_handleInit}>Begin transaction</button>;\n  }\n\n  return (\n    <Spacer>\n      <TransactionStatus\n        animated\n        autoShowDetails\n        amount='0.1'\n        symbol='BTC'\n        status={status}\n        txURL={txURL}\n        date={{\n          value: new Date(),\n        }}\n        {...tx}\n      />\n      <button style={{ marginTop: '10px' }} onClick={_handleReset}>\n        Reset\n      </button>\n      <i style={{ display: 'block', fontSize: '12px', marginTop: '10px' }}>\n        <p>\n          In this example, <u>autoShowDetails</u> property is added. <br />\n          When the component will receive props, it will automatically expand the card. This is\n          fully optional.\n        </p>\n      </i>\n    </Spacer>\n  );\n};\n",locationsMap:{basic:{startLoc:{col:21,line:19},endLoc:{col:1,line:28},startBody:{col:21,line:19},endBody:{col:1,line:28}},statuses:{startLoc:{col:24,line:30},endLoc:{col:1,line:64},startBody:{col:24,line:30},endBody:{col:1,line:64}},"transaction-details":{startLoc:{col:34,line:66},endLoc:{col:1,line:86},startBody:{col:34,line:66},endBody:{col:1,line:86}},animated:{startLoc:{col:24,line:88},endLoc:{col:1,line:127},startBody:{col:24,line:88},endBody:{col:1,line:127}},simulation:{startLoc:{col:36,line:129},endLoc:{col:1,line:228},startBody:{col:36,line:129},endBody:{col:1,line:228}}}}),_parameters),title:"TransactionStatus",component:TransactionStatus_TransactionStatus},styled_components_browser_esm.b.div(index_stories_templateObject||(index_stories_templateObject=function index_stories_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  margin: 10px 0 10px 0;\n"])))),index_stories_Basic=function Basic(){return Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{status:TxStatus.COMPLETED,amount:"0.1",symbol:"BTC",txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})};index_stories_Basic.displayName="Basic";var index_stories_Statuses=function Statuses(){return Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{amount:"0.1",symbol:"BTC",txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{amount:"0.1",symbol:"BTC",status:TxStatus.PENDING,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{amount:"0.1",symbol:"BTC",status:TxStatus.COMPLETED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{amount:"0.1",symbol:"BTC",status:TxStatus.FAILED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})})]})};index_stories_Statuses.displayName="Statuses";var index_stories_TransactionDetails=function TransactionDetails(){return Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{amount:"0.1",symbol:"BTC",txFees:"0.0001",date:{value:new Date},sender:{hash:"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",url:"https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"},receiver:{hash:"1CounterpartyXXXXXXXXXXXXXXXUWLpVr"},customDetailComponent:Object(jsx_runtime.jsx)("b",{children:"Hello, this is a custom component!"}),txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})};index_stories_TransactionDetails.displayName="TransactionDetails";var index_stories_Animated=function Animated(){return Object(jsx_runtime.jsxs)(react.Fragment,{children:[Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{animated:!0,amount:"0.1",symbol:"BTC",status:TxStatus.PENDING,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{animated:!0,amount:"0.1",symbol:"BTC",status:TxStatus.UNKNOWN,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{animated:!0,amount:"0.1",symbol:"BTC",status:TxStatus.COMPLETED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})}),Object(jsx_runtime.jsx)(Spacer,{children:Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,{animated:!0,amount:"0.1",symbol:"BTC",status:TxStatus.FAILED,txURL:"https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1"})})]})};index_stories_Animated.displayName="Animated";var index_stories_Simulation=function Simulation(){var timer=Object(react.useRef)(),_useState2=index_stories_slicedToArray(Object(react.useState)(TxStatus.PENDING),2),status=_useState2[0],setStatus=_useState2[1],_useState4=index_stories_slicedToArray(Object(react.useState)({}),2),tx=_useState4[0],setTx=_useState4[1],_useState6=index_stories_slicedToArray(Object(react.useState)(!1),2),isInit=_useState6[0],setIsInit=_useState6[1],_useState8=index_stories_slicedToArray(Object(react.useState)(),2),txURL=_useState8[0],setTxURL=_useState8[1],_clearTimeout=function _clearTimeout(){return timer.current&&clearInterval(timer.current)},_delay=function _delay(delay){return new Promise((function(resolve){return setTimeout(resolve,delay)}))};Object(react.useEffect)((function(){return function(){return _clearTimeout()}}),[]);var runSimulation=function runSimulation(){_clearTimeout(),_delay(3e3).then((function(){return setTxURL("https://www.blockchain.com/btc/tx/369d241af595fc253479abe394e2f21fda05820a0416942f63266dd793035cf1")})).then((function(){return _delay(5e3)})).then((function(){return setStatus(TxStatus.COMPLETED)})).then((function(){return _delay(1500)})).then((function(){return setTx(Object.assign({},tx,{sender:{hash:"1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",url:"https://www.blockchain.com/btc/address/1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"},receiver:{hash:"1CounterpartyXXXXXXXXXXXXXXXUWLpVr",url:"https://www.blockchain.com/btc/address/1CounterpartyXXXXXXXXXXXXXXXUWLpVr"},txFees:"0.0001",customDetailComponent:Object(jsx_runtime.jsx)("img",{src:txCompleted,alt:"Custom component",style:{width:"100%"}})}))}))};return isInit?Object(jsx_runtime.jsxs)(Spacer,{children:[Object(jsx_runtime.jsx)(TransactionStatus_TransactionStatus,Object.assign({animated:!0,autoShowDetails:!0,amount:"0.1",symbol:"BTC",status:status,txURL:txURL,date:{value:new Date}},tx)),Object(jsx_runtime.jsx)("button",{style:{marginTop:"10px"},onClick:function _handleReset(){setTx({}),setStatus(TxStatus.PENDING),runSimulation()},children:"Reset"}),Object(jsx_runtime.jsx)("i",{style:{display:"block",fontSize:"12px",marginTop:"10px"},children:Object(jsx_runtime.jsxs)("p",{children:["In this example, ",Object(jsx_runtime.jsx)("u",{children:"autoShowDetails"})," property is added. ",Object(jsx_runtime.jsx)("br",{}),"When the component will receive props, it will automatically expand the card. This is fully optional."]})})]}):Object(jsx_runtime.jsx)("button",{onClick:function _handleInit(){setIsInit(!0),runSimulation()},children:"Begin transaction"})};index_stories_Simulation.displayName="Simulation";try{index_stories_Simulation.displayName="Simulation",index_stories_Simulation.__docgenInfo={description:"",displayName:"Simulation",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TransactionStatus/index.stories.tsx#Simulation"]={docgenInfo:index_stories_Simulation.__docgenInfo,name:"Simulation",path:"src/components/TransactionStatus/index.stories.tsx#Simulation"})}catch(__react_docgen_typescript_loader_error){}},116:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return stroke})),__webpack_require__.d(__webpack_exports__,"b",(function(){return infiniteProgress})),__webpack_require__.d(__webpack_exports__,"a",(function(){return finiteProgress}));__webpack_require__(8),__webpack_require__(32),__webpack_require__(31);var _templateObject,_templateObject2,_templateObject3,_templateObject4,styled_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(14);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var stroke=Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.c)(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n\t100% {\n\t\tstroke-dashoffset: 0;\n\t}\n"]))),infiniteProgress=(Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.c)(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n\t0%, 100% {\n\t\ttransform: none;\n\t}\n\n\t50% {\n\t\ttransform: scale3d(1.1, 1.1, 1);\n\t}\n"]))),Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.c)(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n\t0% { left: -200%; right: 100%; }\n  \t50% { left: 107%; right: -8%; }\n  \t100% { left: 107%; right: -8%; }\n"])))),finiteProgress=Object(styled_components__WEBPACK_IMPORTED_MODULE_3__.c)(_templateObject4||(_templateObject4=_taggedTemplateLiteral(["\n\t0% {width: 0%; left: 0; right: 0 }\n\t50% { width: 100%; left: 0; right: 0 }\n\t100% { width: 100%; left: 0; right: 0 }\n"])))},164:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return AdaptiveSpan}));__webpack_require__(43),__webpack_require__(44),__webpack_require__(46),__webpack_require__(26),__webpack_require__(432),__webpack_require__(23),__webpack_require__(11),__webpack_require__(20),__webpack_require__(5),__webpack_require__(0);var dompurify__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(488),dompurify__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(dompurify__WEBPACK_IMPORTED_MODULE_10__),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(1),AdaptiveSpan=function AdaptiveSpan(_ref){var text=_ref.text,mapping=_ref.mapping,style=_ref.style,showTitle=_ref.showTitle,_toTag=function _toTag(value,style){return"bold"===style?"<b>".concat(value,"</b>"):"<i>".concat(value,"</i>")},html=text;style&&(html=_toTag(html,style)),null==mapping||mapping.forEach((function(map){var _map$value;map.value=null!==(_map$value=map.value)&&void 0!==_map$value?_map$value:"",text=text.replace(new RegExp(map.tag,"g"),map.value.toString()),map.style&&(map.value=_toTag(map.value,map.style)),html=html.replace(new RegExp(map.tag,"g"),map.value.toString())}));var props={};return showTitle&&(props=Object.assign({},props,{title:text})),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_11__.jsx)("span",Object.assign({},props,{dangerouslySetInnerHTML:{__html:dompurify__WEBPACK_IMPORTED_MODULE_10___default.a.sanitize(html)}}))};AdaptiveSpan.displayName="AdaptiveSpan";try{AdaptiveSpan.displayName="AdaptiveSpan",AdaptiveSpan.__docgenInfo={description:"",displayName:"AdaptiveSpan",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"TextStyle"}},showTitle:{defaultValue:null,description:"",name:"showTitle",required:!1,type:{name:"boolean"}},mapping:{defaultValue:null,description:"",name:"mapping",required:!1,type:{name:"IMapping[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/AdaptiveSpan/index.tsx#AdaptiveSpan"]={docgenInfo:AdaptiveSpan.__docgenInfo,name:"AdaptiveSpan",path:"src/components/common/AdaptiveSpan/index.tsx#AdaptiveSpan"})}catch(__react_docgen_typescript_loader_error){}},217:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return shortenHash}));__webpack_require__(21);var shortenHash=function shortenHash(hash,length){return hash.length<=2*length?hash:"".concat(hash.substr(0,length),"...").concat(hash.substr(hash.length-length,hash.length-1))}},491:function(module,exports,__webpack_require__){__webpack_require__(492),__webpack_require__(654),__webpack_require__(655),__webpack_require__(813),__webpack_require__(1031),__webpack_require__(1064),__webpack_require__(1069),__webpack_require__(1071),module.exports=__webpack_require__(1090)},564:function(module,exports){},655:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(248)},86:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return IconType})),__webpack_require__.d(__webpack_exports__,"a",(function(){return Icon_Icon}));__webpack_require__(5),__webpack_require__(0),__webpack_require__(8),__webpack_require__(32),__webpack_require__(31);var _templateObject,_templateObject2,styled_components_browser_esm=__webpack_require__(14);function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var IconType,Link=styled_components_browser_esm.b.a(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n\tcolor: rgba(0, 0, 0, 0.8);\n\ttext-decoration: none;\n"]))),IconContainer=styled_components_browser_esm.b.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n\tmargin: 5px 3px 3px 3px;\n\tdisplay: inline-block;\n    vertical-align: middle;\n\n\tsvg .fillable {\n\t\tfill: black;\n\t}\n"]))),jsx_runtime=__webpack_require__(1);!function(IconType){IconType.OutboundLink="outbound-link",IconType.HelpCircleO="help-circle-o",IconType.ArrowUp="arrow-up",IconType.ArrowDown="arrow-down"}(IconType||(IconType={}));var Icon_Icon=function Icon(props){var _outboundLink=Object(jsx_runtime.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[Object(jsx_runtime.jsx)("path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"}),Object(jsx_runtime.jsx)("polyline",{points:"15 3 21 3 21 9"}),Object(jsx_runtime.jsx)("line",{x1:"10",y1:"14",x2:"21",y2:"3"})]}),_arrowUp=Object(jsx_runtime.jsx)("svg",{version:"1.1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 330 330",xmlSpace:"preserve",children:Object(jsx_runtime.jsx)("path",{d:"M325.606,229.393l-150.004-150C172.79,76.58,168.974,75,164.996,75c-3.979,0-7.794,1.581-10.607,4.394 l-149.996,150c-5.858,5.858-5.858,15.355,0,21.213c5.857,5.857,15.355,5.858,21.213,0l139.39-139.393l139.397,139.393 C307.322,253.536,311.161,255,315,255c3.839,0,7.678-1.464,10.607-4.394C331.464,244.748,331.464,235.251,325.606,229.393z"})}),_arrowDown=Object(jsx_runtime.jsx)("svg",{version:"1.1",id:"Layer_1",xmlns:"http://www.w3.org/2000/svg",x:"0px",y:"0px",viewBox:"0 0 330 330",children:Object(jsx_runtime.jsx)("path",{d:"M325.607,79.393c-5.857-5.857-15.355-5.858-21.213,0.001l-139.39,139.393L25.607,79.393 c-5.857-5.857-15.355-5.858-21.213,0.001c-5.858,5.858-5.858,15.355,0,21.213l150.004,150c2.813,2.813,6.628,4.393,10.606,4.393 s7.794-1.581,10.606-4.394l149.996-150C331.465,94.749,331.465,85.251,325.607,79.393z"})}),icons={"help-circle-o":Object(jsx_runtime.jsx)("svg",{viewBox:"0 0 20 20",children:Object(jsx_runtime.jsx)("g",{stroke:"none",strokeWidth:"1",fill:"none",fillRule:"evenodd",children:Object(jsx_runtime.jsx)("g",{transform:"translate(-782.000000, -288.000000)",children:Object(jsx_runtime.jsx)("g",{transform:"translate(100.000000, 100.000000)",children:Object(jsx_runtime.jsx)("g",{transform:"translate(680.000000, 186.000000)",children:Object(jsx_runtime.jsxs)("g",{children:[Object(jsx_runtime.jsx)("polygon",{id:"Path",points:"0 0 24 0 24 24 0 24"}),Object(jsx_runtime.jsx)("path",{className:"fillable",d:"M11,18 L13,18 L13,16 L11,16 L11,18 Z M12,2 C6.48,2 2,6.48 2,12 C2,17.52 6.48,22 12,22 C17.52,22 22,17.52 22,12 C22,6.48 17.52,2 12,2 Z M12,20 C7.59,20 4,16.41 4,12 C4,7.59 7.59,4 12,4 C16.41,4 20,7.59 20,12 C20,16.41 16.41,20 12,20 Z M12,6 C9.79,6 8,7.79 8,10 L10,10 C10,8.9 10.9,8 12,8 C13.1,8 14,8.9 14,10 C14,12 11,11.75 11,15 L13,15 C13,12.75 16,12.5 16,10 C16,7.79 14.21,6 12,6 Z"})]})})})})})}),"outbound-link":_outboundLink,"arrow-up":_arrowUp,"arrow-down":_arrowDown};return props.url?Object(jsx_runtime.jsx)(Link,Object.assign({href:props.url,title:props.url},function _getSpecProps(){var specProps={};return props.targetBlank&&(specProps=Object.assign({},specProps,{target:"_blank",rel:"noreferrer"})),specProps}(),{children:Object(jsx_runtime.jsx)(IconContainer,{style:props.style,children:icons[props.type]})})):Object(jsx_runtime.jsx)(IconContainer,{style:props.style,children:icons[props.type]})};Icon_Icon.displayName="Icon";try{Icon_Icon.displayName="Icon",Icon_Icon.__docgenInfo={description:"",displayName:"Icon",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"enum",value:[{value:'"outbound-link"'},{value:'"help-circle-o"'},{value:'"arrow-up"'},{value:'"arrow-down"'}]}},url:{defaultValue:null,description:"",name:"url",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},targetBlank:{defaultValue:null,description:"",name:"targetBlank",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/common/Icon/index.tsx#Icon"]={docgenInfo:Icon_Icon.__docgenInfo,name:"Icon",path:"src/components/common/Icon/index.tsx#Icon"})}catch(__react_docgen_typescript_loader_error){}}},[[491,1,2]]]);
//# sourceMappingURL=main.3963c207a19a74b89026.bundle.js.map